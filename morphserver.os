// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

Перем Хост, Порт;
Перем ОстановитьСервер;
Перем МоментЗапуска;
Перем Задачи, мЗадачи;
Перем Соединения;
Перем Леммы;
Перем Формы;
Перем Связи;
Перем Биграммы, измБ;
Перем Грамматики, измГ;

Функция ПолучитьИД()
	МоментЗапуска = МоментЗапуска - 1;
	Возврат Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска);
КонецФункции // ПолучитьИД()


Функция СтруктуруВДвоичныеДанные(знСтруктура)
	Результат = Новый Массив;
	Если НЕ знСтруктура = Неопределено Тогда
		Для каждого Элемент Из знСтруктура Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
				Ключ = "#" + Ключ;
				дЗначение = Значение;
			Иначе
				дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
			КонецЕсли;
			дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
			рдКлюч = дКлюч.Размер();
			рдЗначение = дЗначение.Размер();
			бРезультат = Новый БуферДвоичныхДанных(6);
			бРезультат.ЗаписатьЦелое16(0, рдКлюч);
			бРезультат.ЗаписатьЦелое32(2, рдЗначение);
			Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
			Результат.Добавить(дКлюч);
			Результат.Добавить(дЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СоединитьДвоичныеДанные(Результат);
КонецФункции


Функция ДвоичныеДанныеВСтруктуру(Данные, Рекурсия = Истина)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		рдДанные = Данные.Размер();
		Если рдДанные = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("БуферДвоичныхДанных") Тогда
		рдДанные = Данные.Размер;
		бдДанные = Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Позиция = 0;
	знСтруктура = Новый Структура;
	Пока Позиция < рдДанные - 1 Цикл
		рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
		рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
		Если рдКлюч + рдЗначение > рдДанные Тогда // Это не структура
			Возврат Неопределено;
		КонецЕсли;
		Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
		бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
		Позиция = Позиция + 6 + рдКлюч + рдЗначение;
		Л = Лев(Ключ, 1);
		Если Л = "*" Тогда
			Если НЕ Рекурсия Тогда
				Продолжить;
			КонецЕсли;
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение);
		ИначеЕсли Л = "#" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
		Иначе
			Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
		КонецЕсли;
		знСтруктура.Вставить(Ключ, Значение);
	КонецЦикла;
	Возврат знСтруктура;
КонецФункции


Функция ПередатьДанные(Хост, Порт, стрДанные) Экспорт
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 5000;
		Соединение.ОтправитьДвоичныеДанныеАсинхронно(СтруктуруВДвоичныеДанные(стрДанные));
		Возврат Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Если Соединение = Неопределено Тогда
			Сообщить("dataserver: Хост недоступен: " + Хост + ":" + Порт);
		Иначе
			Соединение.Закрыть();
			Соединение = Неопределено;
		КонецЕсли;
	КонецПопытки;
	Возврат Соединение;
КонецФункции // ПередатьДанные()


Функция ОткрытьПоток(Запись)
	Если Запись = 1 Тогда
		Связи =	ФайловыеПотоки.ОткрытьДляЗаписи(ОбъединитьПути(ТекущийКаталог(), "morph", "Связи.txt"));
	Иначе
		Связи =	ФайловыеПотоки.ОткрытьДляЧтения(ОбъединитьПути(ТекущийКаталог(), "morph", "Связи.txt"));
	КонецЕсли;

КонецФункции // ОткрытьПоток()


Функция ПолучитьЗначения(Знач н, Знач ф, мф, Все = Ложь)
	буф = Новый БуферДвоичныхДанных(10);
	Пока Истина Цикл
		Связи.Перейти(н, ПозицияВПотоке.Начало);
		Связи.Прочитать(буф, 0, 10);
		ф1 = буф.ПрочитатьЦелое16(0);
		нн = буф.ПрочитатьЦелое32(2); // позиция следующего
		вн = буф.ПрочитатьЦелое32(6); // позиция вложенного
		Если НЕ вн = 0 И НЕ (ф1 = 9 И НЕ Все) Тогда // есть вложение
			ПолучитьЗначения(вн, ф + Символ(ф1), мф, Все);
		Иначе
			мф.Добавить(ф + Символ(ф1));
		КонецЕсли;
		н = нн;
		Если н = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецФункции // ПолучитьЗначения()


Функция НайтиЗначение(нгр)

	// пройти по дереву

	буф = Новый БуферДвоичныхДанных(10);

	ОткрытьПоток(0);

	н = 0;
	к = 1;

	Пока Истина Цикл
		ф = КодСимвола(Сред(нгр, к, 1));
		Пока Истина Цикл
			Связи.Перейти(н, ПозицияВПотоке.Начало);
			Связи.Прочитать(буф, 0, 10);
			ф1 = буф.ПрочитатьЦелое16(0);
			н = буф.ПрочитатьЦелое32(2); // позиция следующего
			Если ф1 = ф ИЛИ ф = 42 Тогда  // найден элемент
				Если ф = 42 Тогда // *
					Если ф1 = КодСимвола(Сред(нгр, к + 1, 1)) Тогда
						к = к + 1;
					КонецЕсли;
				Иначе
					к = к + 1;
				КонецЕсли;
				н = буф.ПрочитатьЦелое32(6); // позиция вложенного
				Прервать;
			КонецЕсли;
			Если н = 0 ИЛИ к > СтрДлина(нгр) Тогда // это последний
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если н = 0 ИЛИ к > СтрДлина(нгр) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат н;

КонецФункции // НайтиЗначение()


Функция ДобавитьЗначения(гр)

	// пройти по дереву
	ОткрытьПоток(0);
	буф = Новый БуферДвоичныхДанных(10);

	н = 0;
	к = 1;

	Если НЕ Связи.Размер() = 0 Тогда

		Пока Истина Цикл
			ф = КодСимвола(Сред(гр, к, 1));
			Пока Истина Цикл
				Связи.Перейти(н, ПозицияВПотоке.Начало);
				Связи.Прочитать(буф, 0, 10);
				ф1 = буф.ПрочитатьЦелое16(0);
				нн = буф.ПрочитатьЦелое32(2); // позиция следующего
				Если ф1 = ф Тогда  // найден элемент
					нн = буф.ПрочитатьЦелое32(6); // позиция вложенного
					Если нн = 0 И НЕ к = СтрДлина(гр) Тогда // создать ссылку на вложенный
						кн = Связи.Размер();
						ОткрытьПоток(1);
						буф.ЗаписатьЦелое32(6, кн); // вложенный в конец
						Связи.Перейти(н, ПозицияВПотоке.Начало);
						Связи.Записать(буф, 0, 10);
						Связи.СброситьБуферы();
					КонецЕсли;
					к = к + 1;
					н = нн;
					Прервать;
				ИначеЕсли нн = 0 И НЕ к = СтрДлина(гр) Тогда // это последний
					ОткрытьПоток(1);
					кн = Связи.Размер();
					буф.ЗаписатьЦелое32(2, кн); // соседний в конец
					Связи.Перейти(н, ПозицияВПотоке.Начало);
					Связи.Записать(буф, 0, 10);
					Связи.СброситьБуферы();
				КонецЕсли;
				Если нн = 0 Тогда
					Прервать;
				КонецЕсли;
				н = нн;
			КонецЦикла;
			Если нн = 0 ИЛИ к > СтрДлина(гр) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// создать новые элементы
	ОткрытьПоток(1);

	Для к = к по СтрДлина(гр) Цикл
		ф = КодСимвола(Сред(гр, к, 1));
		Связи.Перейти(0, ПозицияВПотоке.Конец);
		Если НЕ к = СтрДлина(гр) Тогда
			кн = Связи.ТекущаяПозиция() + 10;
		Иначе
			кн = 0;
		КонецЕсли;
		буф.ЗаписатьЦелое16(0, ф); // код символа
		буф.ЗаписатьЦелое32(2, 0); // нет соседнего
		буф.ЗаписатьЦелое32(6, кн); // вложенный в конец
		Связи.Записать(буф, 0, 10);
		Связи.СброситьБуферы();
	КонецЦикла;

КонецФункции // ДобавитьЗначения()


Функция ВыполнитьЗадачу(структЗадача)

	Перем Команда;

	структЗадача.Запрос.Свойство("cmd", Команда);

	Если Команда = "stopserver" Тогда
		ОстановитьСервер = Истина;
		Возврат Ложь;

	ИначеЕсли Команда = "ФормыСлов" Тогда

		мСлова = СтрРазделить(структЗадача.Запрос.Слова, Символы.ПС);

		Если структЗадача.Результат.Количество() = мСлова.Количество() Тогда
			Возврат Истина;
		КонецЕсли;

		сл = мСлова.Получить(структЗадача.Результат.Количество());
		слф = ВРег(сл);
		рез = "";

		буф = Новый БуферДвоичныхДанных(2);
		бп = Новый БуферДвоичныхДанных(4);

		Сообщить(слф);

		н = 0;
		ф1 = 1;
		Для к = 1 по СтрДлина(слф) Цикл
			ф = КодСимвола(Сред(слф, к, 1));
			ф1 = 0;
			Пока Истина Цикл
				Формы.Перейти(н, ПозицияВПотоке.Начало);
				Формы.Прочитать(буф, 0, 2);
				ф1 = буф.ПрочитатьЦелое16(0);
				Если ф1 = 1 Тогда
					Прервать;
				ИначеЕсли ф1 = 0 Тогда
					Формы.Прочитать(бп, 0, 4);
					н = н + 2 + 4 + бп.ПрочитатьЦелое32(0);
				ИначеЕсли ф1 = ф Тогда
					н = н + 2 + 4;
					Прервать;
				Иначе
					Формы.Прочитать(бп, 0, 4);
					н = бп.ПрочитатьЦелое32(0);
				КонецЕсли;
			КонецЦикла;
			Если ф1 = 1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ф1 = 1 Тогда
			Пока Истина Цикл
				Формы.Перейти(н, ПозицияВПотоке.Начало);
				Формы.Прочитать(буф, 0, 2);
				ф1 = буф.ПрочитатьЦелое16(0);
				Если ф1 = 1 Тогда
					Прервать;
				ИначеЕсли ф1 = 0 Тогда
					Формы.Прочитать(бп, 0, 4);
					рд = бп.ПрочитатьЦелое32(0);
					бд = Новый БуферДвоичныхДанных(рд);
					Формы.Прочитать(бд, 0, рд);
					дд = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бд);
					стр = ПолучитьСтрокуИзДвоичныхДанных(дд);
					фс = СтрРазделить(стр, Символы.Таб);
					нФорма = фс[0];
					нл = фс[1];
					фл = фс[2];
					рез = рез + ?(рез = "", "", Символы.ПС) + слф + Символы.Таб + Леммы.Получить(Число(фл)) + Символы.Таб + нФорма + Символы.Таб + Леммы.Получить(Число(нл));
					н = н + 2 + 4 + рд;
				Иначе
					Формы.Прочитать(бп, 0, 4);
					н = бп.ПрочитатьЦелое32(0);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если рез = "" Тогда // форма слова не найдена
			Если СтрНайти(слф, "Ё") = 0 Тогда // е заменить на ё
				Для н = 1 по СтрДлина(слф) Цикл
					Если Сред(слф, н, 1) = "Е" Тогда
						структЗадача.Запрос.Слова = структЗадача.Запрос.Слова + Символы.ПС + Лев(слф, н - 1) + "Ё" + Сред(слф, н + 1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		структЗадача.Результат.Вставить("s_" + структЗадача.Результат.Количество(), Новый Структура("Слово, Результат", сл, рез));

		Возврат Ложь;

	ИначеЕсли Команда = "Биграммы" Тогда

		мСлова = СтрРазделить(структЗадача.Запрос.Слова, Символы.ПС);

		Для каждого бигр Из мСлова Цикл

			мб = СтрРазделить(бигр, Символы.Таб);

			ток1имя = мб[0];
			ток1нач = мб[1];

			мс = Биграммы.Получить(ток1нач); // начальная форма

			р = "";
			Если мб.Количество() = 8 Тогда // добавить или удалить

				ток1гр = мб[2];
				свимя = мб[3];
				ток2имя = мб[4];
				ток2нач = мб[5];
				ток2гр = мб[6];
				р = мб[7];

				Если р = "" Тогда // удалить биграмму
					Если НЕ мс = Неопределено Тогда
						п = мс.Найти(ток2нач);
						Если НЕ п = Неопределено Тогда
							мс.Удалить(п);
							измБ = Истина;
						КонецЕсли;
						п = мс.Найти("_" + ток2нач);
						Если НЕ п = Неопределено Тогда
							мс.Удалить(п);
							измБ = Истина;
						КонецЕсли;
					КонецЕсли;

				ИначеЕсли р = "г" Тогда // удалить грамматику
					г2 = Грамматики.Получить(свимя);
					Если НЕ г2 = Неопределено Тогда
						п = г2.Найти(ток2гр);
						Если НЕ п = Неопределено Тогда
							г2.Удалить(п);
							измГ = Истина;
						КонецЕсли;
						Если НЕ г2.Количество() Тогда
							г1 = Грамматики.Получить(ток1гр);
							Если НЕ г1 = Неопределено Тогда
								п = г1.Найти(свимя);
								Если НЕ п = Неопределено Тогда
									г1.Удалить(п);
									измГ = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Продолжить;
				КонецЕсли;

				Если мс = Неопределено Тогда
					мс = Новый Массив;
					Биграммы.Вставить(ток1нач, мс);
					измБ = Истина;
				КонецЕсли;

				Если р = "+" Тогда // добавить корректную биграмму
					Если мс.Найти(ток2нач) = Неопределено Тогда
						мс.Добавить(ток2нач);
						измБ = Истина;
					КонецЕсли;
					// удалить из некорректных
					п = мс.Найти("_" + ток2нач);
					Если НЕ п = Неопределено Тогда
						мс.Удалить(п);
						измБ = Истина;
					КонецЕсли;

					// добавить грамматику
					гр =
						ток1гр + Символы.Таб +
						ток2гр + Символы.Таб +
						свимя;

					ДобавитьЗначения(гр);

					// добавить связь
					св = Символы.Таб +
						ток1нач + Символы.Таб +
						ток2нач + Символы.Таб +
						свимя + Символы.Таб +
						р;

					ДобавитьЗначения(св);

					// г1 = Грамматики.Получить(ток1гр);
					// Если г1 = Неопределено Тогда
					// 	г1 = Новый Массив;
					// 	г1.Добавить(свимя);
					// 	Грамматики.Вставить(ток1гр, г1);
					// 	измГ = Истина;
					// ИначеЕсли г1.Найти(свимя) = Неопределено Тогда
					// 	г1.Добавить(свимя);
					// 	измГ = Истина;
					// КонецЕсли;
					// г2 = Грамматики.Получить(свимя);
					// Если г2 = Неопределено Тогда
					// 	г2 = Новый Массив;
					// 	г2.Добавить(ток2гр);
					// 	Грамматики.Вставить(свимя, г2);
					// 	измГ = Истина;
					// ИначеЕсли г2.Найти(ток2гр) = Неопределено Тогда
					// 	г2.Добавить(ток2гр);
					// 	измГ = Истина;
					// КонецЕсли;

				ИначеЕсли р = "-" Тогда // добавить некорректную биграмму
					Если мс.Найти("_" + ток2нач) = Неопределено Тогда
						мс.Добавить("_" + ток2нач);
						измБ = Истина;
					КонецЕсли;
					// удалить из корректных
					п = мс.Найти(ток2нач);
					Если НЕ п = Неопределено Тогда
						мс.Удалить(п);
						измБ = Истина;
					КонецЕсли;

				КонецЕсли;

			Иначе // найти биграмму

				Если НЕ мс = Неопределено Тогда
					ток2имя = мб[2];
					ток2нач = мб[3];
					Если НЕ мс.Найти(ток2нач) = Неопределено Тогда
						р = "+";
					ИначеЕсли НЕ мс.Найти("_" + ток2нач) = Неопределено Тогда
						р = "-";
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			структЗадача.Результат.Вставить(ток1имя + "_" + ток2имя, р);

		КонецЦикла;

		Возврат Истина;

	ИначеЕсли Команда = "Грамматики" Тогда

		мСлова = СтрРазделить(структЗадача.Запрос.Слова, Символы.ПС);

		сгр = Новый Соответствие;

		Для каждого гр Из мСлова Цикл

			мгр = СтрРазделить(гр, Символы.Таб);

			нгр = гр + Символы.Таб;

			н = НайтиЗначение(нгр);

			Если НЕ н = 0 Тогда // найдено совпадение по образцу
				мф = Новый Массив;
				ф = ПолучитьЗначения(н, "", мф);
				Для каждого г2 Из мф Цикл
					Если сгр.Получить(гр + "_" + г2) = Неопределено Тогда
						структЗадача.Результат.Вставить("гр_" + структЗадача.Результат.Количество(), гр + "_" + г2);
						сгр.Вставить(гр + "_" + г2, "");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			// ток1нач = мгр[0];
			// ток2нач = мгр[1];
			//
			// г1 = Грамматики.Получить(ток1нач);
			// Если НЕ г1 = Неопределено Тогда
			// 	Для каждого г2 Из г1 Цикл
			// 		структЗадача.Результат.Вставить("св_" + структЗадача.Результат.Количество(), ток1нач + "_" + г2);
			// 		г3 = Грамматики.Получить(г2);
			// 		Если НЕ г3.Найти(ток2нач) = Неопределено Тогда
			// 			Если сгр.Получить(гр + "_" + г2) = Неопределено Тогда
			// 				структЗадача.Результат.Вставить("гр_" + структЗадача.Результат.Количество(), гр + "_" + г2);
			// 				сгр.Вставить(гр + "_" + г2, "");
			// 			КонецЕсли;
			// 		КонецЕсли;
			// 	КонецЦикла;
			// КонецЕсли;

		КонецЦикла;

		Возврат Истина;

	КонецЕсли;

КонецФункции


Процедура ОбработатьСоединения() Экспорт

	Если АргументыКоманднойСтроки.Количество() Тогда
		Порт = Число(АргументыКоманднойСтроки[0]);
	Иначе
		Порт = 8886;
	КонецЕсли;

	Таймаут = 50;

	TCPСервер = Новый TCPСервер(Порт);
	TCPСервер.ЗапуститьАсинхронно();

	Сообщить(СокрЛП(ТекущаяДата()) + " Сервер морфологии запущен на порту: " + Порт);

	Леммы = Новый Соответствие;
	ф = Новый ЧтениеТекста(ОбъединитьПути(ТекущийКаталог(), "morph", "Леммы.txt"));
	Пока Истина Цикл
		кл = ф.ПрочитатьСтроку();
		Если кл = Неопределено Тогда
			Прервать;
		КонецЕсли;
		зн = ф.ПрочитатьСтроку();
		Леммы.Вставить(Число(кл), зн);
	КонецЦикла;
	Сообщить("Прочитал Леммы");
	ф.Закрыть();

	Формы =	ФайловыеПотоки.ОткрытьДляЧтения(ОбъединитьПути(ТекущийКаталог(), "morph", "Формы.txt"));

	Биграммы = Новый Соответствие;
	ф = Новый ЧтениеТекста(ОбъединитьПути(ТекущийКаталог(), "morph", "Биграммы.txt"));
	ф.ПрочитатьСтроку();
	Пока Истина Цикл
		гр1 = ф.ПрочитатьСтроку();
		Если гр1 = Неопределено Тогда
			Прервать;
		КонецЕсли;
		мгр = Новый Массив();
		гр2 = "" + ф.ПрочитатьСтроку();
		Пока НЕ гр2 = "" Цикл
			мгр.Добавить(гр2);
			гр2 = "" + ф.ПрочитатьСтроку();
		КонецЦикла;
		Биграммы.Вставить(гр1, мгр);
	КонецЦикла;
	Сообщить("Прочитал Биграммы");
	ф.Закрыть();
	измБ = Ложь;

	Грамматики = Новый Соответствие;
	ф = Новый ЧтениеТекста(ОбъединитьПути(ТекущийКаталог(), "morph", "Грамматики.txt"));
	ф.ПрочитатьСтроку();
	Пока Истина Цикл
		гр1 = ф.ПрочитатьСтроку();
		Если гр1 = Неопределено Тогда
			Прервать;
		КонецЕсли;
		мгр = Новый Массив();
		гр2 = "" + ф.ПрочитатьСтроку();
		Пока НЕ гр2 = "" Цикл
			мгр.Добавить(гр2);
			гр2 = "" + ф.ПрочитатьСтроку();
		КонецЦикла;
		Грамматики.Вставить(гр1, мгр);
	КонецЦикла;
	Сообщить("Прочитал Грамматики");
	ф.Закрыть();
	измГ = Ложь;

	Задачи = Новый Соответствие;
	мЗадачи = Новый Массив;

	ОстановитьСервер = Ложь;
	ПерезапуститьСервер = Ложь;
	Соединение = Неопределено;

	Соединения = Новый Массив();

	СуммаЦиклов = 0;
	РабочийЦикл = 0;
	ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Пока НЕ ОстановитьСервер Цикл

		НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СуммаЦиклов = СуммаЦиклов + 1;

		Если СуммаЦиклов > 999 Тогда
			ПредЗамер = ЗамерВремени;
			ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Загрузка = " " + РабочийЦикл / 10 + "% " + Цел(1000 * РабочийЦикл / (ЗамерВремени - ПредЗамер)) + " q/s " + Задачи.Количество() + " tasks";
			СуммаЦиклов = 0;
			РабочийЦикл = 0;
		КонецЕсли;

		к = мЗадачи.Количество();
		Пока к > 0 И НЕ ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50 Цикл
			к = к - 1;
			структЗадача = мЗадачи.Получить(0);
			мЗадачи.Удалить(0);

			ЕстьРезультат = Ложь;
			РабочийЦикл = РабочийЦикл + 1;
			Попытка
				ЕстьРезультат = ВыполнитьЗадачу(структЗадача);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Если ЕстьРезультат = Истина Тогда
				Попытка
					ОбратныйЗапрос = "";
					Если структЗадача.Запрос.Свойство("ОбратныйЗапрос", ОбратныйЗапрос) Тогда // возвращаем результат
						ОбратныйЗапрос.Вставить("РезультатДанные", Новый Структура("Ответ, Результат", структЗадача.Ответ, структЗадача.Результат));
						Если ПередатьДанные(ОбратныйЗапрос.Хост, ОбратныйЗапрос.Порт, ОбратныйЗапрос) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						Сообщить("morphserver " + ТекущаяДата() + " time=" + (ТекущаяДата() - структЗадача.ВремяНачало) + Загрузка);
						структЗадача.Результат = Неопределено;
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				Задачи.Удалить(структЗадача.ИдЗадачи);
				//Сообщить("morphserver: всего задач " + Задачи.Количество());
				Продолжить;
			КонецЕсли;

			мЗадачи.Добавить(структЗадача);

		КонецЦикла;

		т = Таймаут;
		Пока Истина Цикл
			Соединение = TCPСервер.ПолучитьСоединение(т);
			Если Соединение = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Соединения.Вставить(0, Соединение);
			т = 0;
		КонецЦикла;

		к = Соединения.Количество();
		Пока к > 0 Цикл
			к = к - 1;
			Соединение = Соединения.Получить(0);
			Соединения.Удалить(0);

			Если Соединение.Статус = "Успех" Тогда

				Попытка
					Запрос = Неопределено;
					Запрос = ДвоичныеДанныеВСтруктуру(Соединение.ПолучитьДвоичныеДанные());
				Исключение
					Сообщить("morphserver: " + ОписаниеОшибки());
				КонецПопытки;

				Если НЕ Запрос = Неопределено Тогда
					структЗадача = Новый Структура("ИдЗадачи, Запрос, Ответ, Результат, ВремяНачало", ПолучитьИД(), Запрос, Неопределено, Новый Структура(), ТекущаяДата());
					Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
					мЗадачи.Добавить(структЗадача);
					//Сообщить("dataserver: всего задач " + Задачи.Количество());
				КонецЕсли;

				Соединение.Закрыть();
				Продолжить;

			ИначеЕсли Соединение.Статус = "Ошибка" Тогда

				Соединение.Закрыть();
				Продолжить;

			КонецЕсли;

			Соединения.Добавить(Соединение);

		КонецЦикла;

		ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
		Если ВремяЦикла > 100 Тогда
			Сообщить("!morphserver ВремяЦикла=" + ВремяЦикла);
		КонецЕсли;
		Таймаут = ?(ВремяЦикла > 50, 0, 30);

	КонецЦикла;

	Если НЕ Связи = Неопределено Тогда
		Связи.Закрыть();
	КонецЕсли;

	TCPСервер.Остановить();
	Сообщить("Завершил работу сервера морфологии.");

КонецПроцедуры

МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбработатьСоединения();
