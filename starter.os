// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

Перем Хост;
Перем Контроллеры;
Перем Локальный;
Перем mono;
Перем showdata;
Перем Соединения;
Перем СоединенияП;


Функция ПередатьДанные(Хост, Порт, стрДанные) Экспорт
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 5000;
		Соединение.ОтправитьДвоичныеДанныеАсинхронно(СтруктуруВДвоичныеДанные(стрДанные));
		//Соединение.Закрыть();
		СоединенияП.Вставить(Соединение, Истина);
		Возврат Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Если Соединение = Неопределено Тогда
			Сообщить("starter: Хост недоступен: " + Хост + ":" + Порт);
		Иначе
			Соединение.Закрыть();
			Соединение = Неопределено;
		КонецЕсли;
	КонецПопытки;
	Возврат Соединение;
КонецФункции // ПередатьДанные()


Функция СтруктуруВДвоичныеДанные(знСтруктура)
	Результат = Новый Массив;
	Если НЕ знСтруктура = Неопределено Тогда
		Для каждого Элемент Из знСтруктура Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
				Ключ = "#" + Ключ;
				дЗначение = Значение;
			Иначе
				дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
			КонецЕсли;
			дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
			рдКлюч = дКлюч.Размер();
			рдЗначение = дЗначение.Размер();
			бРезультат = Новый БуферДвоичныхДанных(6);
			бРезультат.ЗаписатьЦелое16(0, рдКлюч);
			бРезультат.ЗаписатьЦелое32(2, рдЗначение);
			Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
			Результат.Добавить(дКлюч);
			Результат.Добавить(дЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СоединитьДвоичныеДанные(Результат);
КонецФункции


Функция ДвоичныеДанныеВСтруктуру(Данные, Рекурсия = Истина)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		рдДанные = Данные.Размер();
		Если рдДанные = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("БуферДвоичныхДанных") Тогда
		рдДанные = Данные.Размер;
		бдДанные = Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Позиция = 0;
	знСтруктура = Новый Структура;
	Пока Позиция < рдДанные - 1 Цикл
		рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
		рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
		Если рдКлюч + рдЗначение > рдДанные Тогда // Это не структура
			Возврат Неопределено;
		КонецЕсли;
		Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
		бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
		Позиция = Позиция + 6 + рдКлюч + рдЗначение;
		Л = Лев(Ключ, 1);
		Если Л = "*" Тогда
			Если НЕ Рекурсия Тогда
				Продолжить;
			КонецЕсли;
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение);
		ИначеЕсли Л = "#" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
		Иначе
			Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
		КонецЕсли;
		знСтруктура.Вставить(Ключ, Значение);
	КонецЦикла;
	Возврат знСтруктура;
КонецФункции


Функция ЗапуститьПроцесс(Имя, Порт, Параметры = "")
	Попытка
		// Проверка свободного порта
		Сервер = Новый TCPСервер(Порт);
		Сервер.Запустить();
		Сервер.Остановить();
		ЗапуститьПриложение(mono + "uascript.exe " + Имя + " " + Порт + " " + Параметры, ТекущийКаталог());
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции // ЗапуститьПроцесс()


Хост = "127.0.0.1";

Порт = 8890; // Порт стартера
ПортЗ = 8888; // Порт запросов веб-сервера
ПортВ = 8889; // Порт ответов веб-сервера
ПортД = 8887; // Порт дата-сервера

НовыйПортК = ПортД;

Таймаут = 50;

ПараметрХост = " "; // путь для загрузки ресурсов

Контроллеры = Новый Соответствие;

Соединения = Новый Соответствие();
СоединенияП = Новый Соответствие();

Локальный = Истина;

mono = "";
си = Новый СистемнаяИнформация();
Если Лев(си.ВерсияОС, 4) = "Unix" Тогда
	mono = "mono ";
КонецЕсли;

Если АргументыКоманднойСтроки.Количество() Тогда
	Локальный = (НЕ АргументыКоманднойСтроки[0] = "site");
	Если НЕ Локальный Тогда
		ПортЗ = АргументыКоманднойСтроки[1];
		Сообщить("Режим сайта, порт " + ПортЗ); // перезапуск и завершение заблокированы
		ПараметрХост = ""; // путь для загрузки ресурсов
	КонецЕсли;
КонецЕсли;

TCPСервер = Новый TCPСервер(Порт);
TCPСервер.Запустить();
Сообщить("Стартер запущен на порту: " + Порт);

// Запуск дата-сервера
Пока НЕ ЗапуститьПроцесс("dataserver.os", ПортД) Цикл
	Приостановить(200);
КонецЦикла;

// Запуск веб-сервера
Пока НЕ ЗапуститьПроцесс("webserver.os", ПортВ, ПортЗ) Цикл;
	Приостановить(200);
КонецЦикла;

// Параметры веб-сервера
Пока ПередатьДанные(Хост, ПортВ, Новый Структура("Хост, Порт, ПортС, ПортД, cmd", Хост, ПортВ, Порт, ПортД, "init")) = Неопределено Цикл
	Приостановить(200);
КонецЦикла;

ЗавершитьПроцесс = Ложь;
ПерезапуститьПроцесс = Ложь;
ПустойЦикл = 0;

Пока Истина Цикл

	Если НЕ ЗавершитьПроцесс Тогда

		Если showdata = Неопределено Тогда // запустить процесс заранее
			Если НовыйПортК < 5555 Тогда
				НовыйПортК = ПортД;
			КонецЕсли;
			НовыйПортК = НовыйПортК - 1;
			Пока НЕ ЗапуститьПроцесс("showdata.os", НовыйПортК) Цикл
				НовыйПортК = НовыйПортК - 1;
			КонецЦикла;
			showdata = НовыйПортК;
		КонецЕсли;

		Соединение = TCPСервер.ОжидатьСоединения(Таймаут);

		Если НЕ Соединение = Неопределено Тогда

			//Соединение.ТаймаутОтправки = 5000;
			Соединение.ТаймаутЧтения = 5000;

			Соединение.ПрочитатьДвоичныеДанныеАсинхронно();
			Соединения.Вставить(Соединение, Новый Массив);

		КонецЕсли;

	КонецЕсли;

	Для каждого зСоединение Из Соединения Цикл
		Соединение = зСоединение.Ключ;
		мДанные = зСоединение.Значение;
		Если Соединение.Статус = "Успех" Тогда

			Попытка
				ДанныеВходящие = Неопределено;
				дд = Соединение.ПолучитьДвоичныеДанные();
				Если НЕ дд.Размер() = 0 Тогда
					мДанные.Добавить(дд);
					ДанныеВходящие = ДвоичныеДанныеВСтруктуру(СоединитьДвоичныеДанные(мДанные));
				КонецЕсли;
			Исключение
				Сообщить("starter: " + ОписаниеОшибки());
			КонецПопытки;

			Если ДанныеВходящие = Неопределено Тогда
				//Соединения.Вставить(Соединение, мДанные);
				Продолжить;
			КонецЕсли;

			cmd = "";
			Если ДанныеВходящие.Свойство("cmd", cmd) Тогда
				Сообщить("starter " + cmd);
				Если cmd = "startproc" Тогда
					Если Контроллеры.Получить(ДанныеВходящие.procid) = Неопределено Тогда
						ПортК = showdata;
						showdata = Неопределено;
						стрКонтроллер = Новый Структура("procid, Хост, Порт, ПортС, ПортВ, ПортД, Субъект, Локальный, ПараметрХост, sdata, data, УдаленныйУзел, cmd", ДанныеВходящие.procid, Хост, ПортК, Порт, ПортВ, ПортД, "", Локальный, ПараметрХост, ДанныеВходящие.sdata, ДанныеВходящие.data, ДанныеВходящие.УдаленныйУзел, "init");
						Пока ПередатьДанные(Хост, ПортК, стрКонтроллер) = Неопределено Цикл
							Сообщить("Ошибка передачи параметров процессу.");
							Приостановить(50);
						КонецЦикла;
						Контроллеры.Вставить(ДанныеВходящие.procid, стрКонтроллер);
					КонецЕсли;
				ИначеЕсли cmd = "termproc" Тогда
					Если ДанныеВходящие.Свойство("procid") Тогда // процесс завершен
						элКонтроллер = Контроллеры.Получить(ДанныеВходящие.procid);
						Если НЕ элКонтроллер = Неопределено Тогда
							Контроллеры.Удалить(ДанныеВходящие.procid);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли cmd = "stopserver" ИЛИ cmd = "restartserver" Тогда
					Если Локальный Тогда
						// Завершить процессы
						Для каждого элКонтроллер Из Контроллеры Цикл
							ПередатьДанные(элКонтроллер.Значение.Хост, элКонтроллер.Значение.Порт, Новый Структура("cmd, taskid", "termproc", "0"));
						КонецЦикла;
						Если НЕ showdata = Неопределено Тогда // процесс запущен заранее
							ПередатьДанные(Хост, showdata, Новый Структура("cmd, taskid", "termproc", "0"));
						КонецЕсли;
						ЗавершитьПроцесс = Истина;
						Если cmd = "restartserver" Тогда
							ПерезапуститьПроцесс = Истина;
						КонецЕсли;
					Иначе // завершаем один процесс
						Если ДанныеВходящие.Свойство("procid") Тогда
							элКонтроллер = Контроллеры.Получить(ДанныеВходящие.procid);
							Если НЕ элКонтроллер = Неопределено Тогда
								ПередатьДанные(элКонтроллер.Хост, элКонтроллер.Порт, Новый Структура("cmd, taskid", "termproc", "0"));
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Соединение.Закрыть();
			Соединения.Удалить(Соединение);
			Прервать;

		ИначеЕсли Соединение.Статус = "Ошибка" Тогда

			Соединения.Удалить(Соединение);
			Прервать;

		Иначе

			ПустойЦикл = ПустойЦикл + 1;

		КонецЕсли;

	КонецЦикла;


	Для каждого зСоединение Из СоединенияП Цикл
		Соединение = зСоединение.Ключ;
		Если НЕ Соединение.Статус = "Занят" Тогда
			Соединение.Закрыть();
			СоединенияП.Удалить(Соединение);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЗавершитьПроцесс Тогда
		Если Контроллеры.Количество() Тогда
			Сообщить("Не все контроллеры завершили работу.");
		КонецЕсли;
		Прервать;
	КонецЕсли;

КонецЦикла;

TCPСервер.Остановить();

// Завершить веб-сервер
с1 = ПередатьДанные(Хост, ПортВ, Новый Структура("cmd", "stopserver"));

// Завершить дата-сервер
с2 = ПередатьДанные(Хост, ПортД, Новый Структура("cmd", "stopserver"));

Пока с1.Статус = "Занят" ИЛИ с2.Статус = "Занят" Цикл
	Приостановить(200);
КонецЦикла;

Если ПерезапуститьПроцесс Тогда
	Сообщить("Перезапуск");
	ЗапуститьПроцесс("starter.os", Порт);
КонецЕсли;

Сообщить("Процесс starter завершен.");
