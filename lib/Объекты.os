// MIT License
// Copyright (c) 2020 vasvl123
// https://github.com/vasvl123/useyourmind


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция ИмяЗначение(Имя, Значение)
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции


Функция НоваяФорма(Имя)
	Возврат "
	|Форма.
	|	name: '" + Имя + "'
	|	form: 'box'
	|	role: 'thing'
	|	movable: true
	|	color: 0x555555
	|	transparent: true
	|	opacity: 0.3
	|	position_x: 0
	|	position_y: 0
	|	position_z: 0
	|	scale_x: 2
	|	scale_y: 2
	|	scale_z: 2
	|";
КонецФункции // НоваяФорма()


Функция Субъект_Свойства() Экспорт
	Возврат "
	|События
	|" + НоваяФорма("Субъект") + "
	|	camera_x: 0
	|	camera_y: 50
	|	camera_z: 100
	|	role: 'player'
	|";
КонецФункции


Функция Предмет_Свойства() Экспорт
	Возврат "
	|События
	|" + НоваяФорма("Предмет");
КонецФункции


Функция Комната_Свойства() Экспорт
	Возврат "
	|События
	|" + НоваяФорма("Комната") + "
	|	role: 'room'
	|	movable: false
	|";
КонецФункции


Функция Кнопка_Свойства() Экспорт
	Возврат "
	|События
	|Текст
	|Вид
	|	button	class=btn btn-primary	onclick=addcmd(this); return false	type=button
	|		Значение: Текст
	|";
КонецФункции


Функция Надпись_Свойства() Экспорт
	Возврат "
	|События
	|Текст
	|Вид
	|";
КонецФункции


// Выполнить
Функция Выполнить_Свойства() Экспорт
	Возврат "
	|События
	|Условие
	|Тогда
	|Иначе
	|Результат
	|";
КонецФункции

Функция Выполнить_Модель(Данные, Свойства, Изменения) Экспорт
	Если Изменения.Получить(Свойства.Условие) = Истина ИЛИ Изменения.Получить(Свойства.ЭтотУзел) = Истина Тогда
		Условие = Данные.ЗначениеСвойства(Свойства.Условие);
		Если Условие Тогда
			Результат = Данные.ЗначениеСвойства(Свойства.Тогда);
		Иначе
			Результат = Данные.ЗначениеСвойства(Свойства.Иначе);
		КонецЕсли;
		Данные.НовоеЗначениеУзла(Свойства.Результат, ИмяЗначение("" + ТипЗнч(Результат), Результат), Истина);
		Изменения.Вставить(Свойства.Результат, Истина);
	КонецЕсли;
	Возврат Изменения;
КонецФункции


// Источник данных
Функция ИсточникДанных_Свойства() Экспорт
	Возврат "
	|События
	|ЗапросДанных.
	|	БазаДанных
	|	УсловияОтбора
	|	Обновление: Авто
	|	ЧислоЗаписей: 10
	|	СписокПолей
	|	Команда: НайтиЗаголовок
	|	Задача
	|Записи.
	|";
КонецФункции

Функция ИсточникДанных_Модель(Данные, Свойства, Изменения) Экспорт
	Если Данные.ЗначениеСвойства(Свойства.ЗапросДанных.Задача) = Данные.Пустой Тогда
		Запрос = Новый Структура("Данные, Узел, ЗапросДанных, cmd", Данные, Свойства.Записи.ЭтотУзел, Данные.СвойстваВСтуктуру(Свойства.ЗапросДанных), "ЗапросДанных");
		ИдЗадачи = Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
		Данные.НовоеЗначениеУзла(Свойства.ЗапросДанных.Задача, ИмяЗначение("Строка", ИдЗадачи), Истина);
		Изменения.Вставить(Свойства.ЗапросДанных.Задача, Истина);
	КонецЕсли;
	Возврат Изменения;
КонецФункции


// СтрокаТаблицы
Функция СтрокаТаблицы_Свойства() Экспорт
	Возврат "
	|События
	|Источник
	|Поля
	|Вид
	|	tr
	|		Значение: Содержимое
	|";
КонецФункции

Функция СтрокаТаблицы_Модель(Данные, Свойства, Изменения) Экспорт
	Если Изменения.Получить(Свойства.Источник) = Истина Тогда
	КонецЕсли;

	// Конструктор
	Если Изменения.Получить(Свойства.ЭтотУзел) = Истина Тогда
		Поля = Данные.ЗначениеСвойства(Свойства.Поля);
		Источник = Данные.ЗначениеСвойства(Свойства.Источник);
		Узел = Свойства.ЭтотУзел;
		Для каждого элПоле Из Поля Цикл
			Если элПоле.Ключ = "ЭтотУзел" Тогда
				Продолжить;
			КонецЕсли;
			Поле = элПоле.Ключ;
			ПолеЗначение = УзелСвойство(Источник, Поле);
			стрУзел = ИмяЗначение("td", ПолеЗначение);
			Узел = Данные.НовыйСоседний(Узел, стрУзел, Истина);
		КонецЦикла;
	КонецЕсли;

	Возврат Изменения;
КонецФункции


// Таблица
Функция Таблица_Свойства() Экспорт
	Возврат "
	|События
	|СписокПолей
	|ИсточникСтрок
	|Вид
	|	table
	|		Значение: Содержимое
	|";
КонецФункции

Функция Таблица_Модель(Данные, Свойства, Изменения) Экспорт

	Если Изменения.Получить(Свойства.ИсточникСтрок) = Истина Тогда
	КонецЕсли;

	// Конструктор
	Если Изменения.Получить(Свойства.ЭтотУзел) = Истина Тогда
		УзелСвойства = Свойства.ЭтотУзел;

		УзелЗаголовок = Данные.Соседний(УзелСвойства);
		Если УзелЗаголовок = Неопределено Тогда // создать заголовок
			УзелЗаголовок = Данные.НовыйСоседний(УзелСвойства, ИмяЗначение("thread",  ""), Истина);
			Узел = Данные.НовыйДочерний(УзелЗаголовок, ИмяЗначение("tr",  ""), Истина);
			Для каждого элПоле Из Свойства.СписокПолей Цикл
				Если элПоле.Ключ = "ЭтотУзел" Тогда
					Продолжить;
				КонецЕсли;
				Поле = элПоле.Значение;
				стрУзел = ИмяЗначение("th", Данные.ЗначениеСвойства(Поле.Заголовок));
				Если Узел.Имя = "tr" Тогда
					Узел = Данные.НовыйДочерний(Узел, стрУзел, Истина);
				Иначе
					Узел = Данные.НовыйСоседний(Узел, стрУзел, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ИсточникСтрок = Данные.ЗначениеСвойства(Свойства.ИсточникСтрок);
		УзелСтроки = Данные.Соседний(УзелЗаголовок);
		Если УзелСтроки = Неопределено Тогда // добавить строки
			УзелСтроки = УзелЗаголовок;
			Для каждого элСтрока Из ИсточникСтрок Цикл
				Если элСтрока.Ключ = "ЭтотУзел" Тогда
					Продолжить;
				КонецЕсли;
				УзелСтроки = Данные.НовыйСоседний(УзелСтроки, ИмяЗначение("О",  "СтрокаТаблицы"), Истина);
				СвойстваСтроки = Данные.ОбработатьОбъект(УзелСтроки, Истина);
				Данные.НовоеЗначениеУзла(СвойстваСтроки.Источник, ИмяЗначение("Указатель", элСтрока.Значение.Код), Истина);
				Данные.НовоеЗначениеУзла(СвойстваСтроки.Поля, ИмяЗначение("Указатель", Свойства.СписокПолей.ЭтотУзел.Код), Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Изменения;
КонецФункции
