// MIT License
// Copyright (c) 2019 Vladimir Vasiliev
// https://github.com/vasvl123/OneScriptDB


Функция УзелСвойство(Узел, Свойство)
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция СписокВТаблицу(Данные, Параметры) Экспорт
	ЭтотУзел = Параметры.ЭтотУзел;
	ДочернийУзел = Данные.Дочерний(ЭтотУзел);
	// прежний дочерний нужно удалять
	Если НЕ ДочернийУзел = Неопределено Тогда
		Данные.УдалитьУзел(ДочернийУзел);
	КонецЕсли;
	ПарШаблон = Неопределено;
	Список = Данные.Дочерний(Параметры.Список);
	нУзел = Неопределено;
	Пока НЕ Список = Неопределено Цикл
		нстрУзел = Новый Структура("Имя", "tr");
		Если нУзел = Неопределено Тогда
			нУзел = Данные.НовыйУзел(нстрУзел, Истина);
			нУзел.Вставить("Старший", ЭтотУзел);
			нУзел.Вставить("Родитель", ЭтотУзел);
			ЭтотУзел.Вставить("Дочерний", нУзел.Код);
		Иначе
			нУзел = Данные.НовыйСоседний(нУзел, нстрУзел, Истина);
		КонецЕсли;
		// это ссылка на строку таблицы
		Узел = Данные.НовыйДочерний(нУзел, Новый Структура("Имя, Значение", "Узел", "Строка"), Истина);
		Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "Указатель", Список.Код), Истина);
		Атрибут = Данные.Атрибут(Список);
		Пока НЕ Атрибут = Неопределено Цикл
			нстУзел = Новый Структура("Имя, Значение", "td", Атрибут.Значение);
			Если Узел.Имя = "tr" Тогда
				Узел = Данные.НовыйДочерний(нУзел, нстУзел, Истина);
			Иначе
				Узел = Данные.НовыйСоседний(Узел, нстУзел, Истина);
			КонецЕсли;
			// Если есть шаблон для значения
			Если Параметры.Свойство(Атрибут.Имя, ПарШаблон) Тогда
 				Узел.Значение = Неопределено;
				Элемент = Данные.КопироватьВетку(Данные.Дочерний(ПарШаблон), , Узел, Узел, , Ложь);
				Данные.НовыйДочерний(Узел, Элемент, Истина);
			КонецЕсли;
			Атрибут = Данные.Соседний(Атрибут);
		КонецЦикла;
		Список = Данные.Соседний(Список);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции


// Функция ПокаЦикл(Данные, Параметры) Экспорт
// 	ЭтотУзел = Параметры.ЭтотУзел;
// 	УсловиеПока = Параметры.УсловиеПока;
// 	ЦиклУзел = Параметры.ЦиклУзел;
// 	Узел = Неопределено;
// 	Пока Данные.Интерпретировать(УсловиеПока) Цикл
// 		НовыйУзел = Данные.КопироватьВетку(ЦиклУзел, Узел, ЭтотУзел);
// 		Если Узел = ЭтотУзел Тогда
// 			Узел.Вставить("Дочерний", НовыйУзел);
// 		Иначе
// 			Узел.Вставить("Соседний", НовыйУзел);
// 		конецЕсли;
// 		Узел = НовыйУзел;
// 	КонецЦикла;
// 	Возврат Узел;
// КонецФункции // ПокаЦикл()


Функция НоваяВкладка(Данные, Параметры) Экспорт
	Параметры.Вставить("cmd", "newtab");
	Данные.Процесс.НоваяЗадача(Параметры, "Служебный");
	Возврат Неопределено;
КонецФункции // НоваяВкладка()


Функция ИсточникДанных(Данные, Параметры, ЭтоЗадача = Ложь) Экспорт
	Если НЕ ЭтоЗадача Тогда
		ЭтотУзел = Параметры.ЭтотУзел;
		ЗапросДанных = Параметры.ЗапросДанных;
		Если Данные.УзелСостояние(ЗапросДанных, "Значение") = Неопределено Тогда
			// прежний дочерний нужно удалять
			ДочернийУзел = Данные.Дочерний(ЭтотУзел);
			Если НЕ ДочернийУзел = Неопределено Тогда
				Данные.УдалитьУзел(ДочернийУзел);
			КонецЕсли;
			Запрос = Новый Структура("Данные, Узел, ЗапросДанных, ИмяФункции, cmd", Данные, ЭтотУзел, ЗапросДанных, "ИсточникДанных", "ВыполнитьФункцию");
			Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
			Данные.УзелСостояниеЗначение(ЗапросДанных, "Значение", Новый Структура);
		КонецЕсли;
	Иначе // задача "ВыполнитьФункцию"
		структЗадача = Параметры;
		Запрос = Параметры.Запрос;
		Если НЕ Запрос.Свойство("РезультатДанные") Тогда
			стрЗапрос = Новый Структура("ЗапросДанных, Команда", Запрос.ЗапросДанных, "ЗапросДанных");
			стрЗапрос.Вставить("БазаДанных", УзелСвойство(Запрос.ЗапросДанных, "БазаДанных"));
			стрЗапрос.Вставить("ИмяДанных", УзелСвойство(Запрос.ЗапросДанных, "ИмяДанных"));
			стрЗапрос.Вставить("ПозицияДанных", УзелСвойство(Запрос.ЗапросДанных, "ПозицияДанных"));
			стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
			Если Данные.Процесс.ПередатьДанныеД(стрЗапрос) Тогда
				Запрос.Вставить("РезультатДанные", Неопределено);
			КонецЕсли;
		ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
			РезультатДанные = Запрос.РезультатДанные;
			ЗапросДанные = РезультатДанные.Результат;
			Если РезультатДанные.Ответ = "ОшибкаПотокаДанных" Тогда
				// сообщить об ошибке
				Возврат "УдалитьЗадачу";
			ИначеЕсли ЗапросДанные.ЗаголовокНайден Тогда
				ЧислоЗаписей = Неопределено;
				СписокПолей = Неопределено;
				Заголовок = ЗапросДанные.Заголовок;
				Если ЗапросДанные.Свойство("СписокПолей", СписокПолей) Тогда
					Если НЕ СписокПолей.Количество() Тогда
						СписокПолей = Неопределено;
					КонецЕсли;
				КонецЕсли;
				Если ЗапросДанные.Свойство("Позиция") Тогда
					Если ЗапросДанные.Позиция = "1" Тогда // очистить существующие записи
						дУзел = Данные.Дочерний(Запрос.Узел);
						Если НЕ дУзел = Неопределено Тогда
							Данные.УдалитьУзел(дУзел, Истина, Ложь);
							Запрос.Узел.Вставить("Дочерний", Неопределено);
							Запрос.Вставить("кУзел", Неопределено);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// добавить найденную запись
				кУзел = УзелСвойство(Запрос, "кУзел");
				Если кУзел = Неопределено Тогда
					кУзел = Данные.НовыйДочерний(Запрос.Узел, Новый Структура("Имя", "Строка"), Истина);
				Иначе
					кУзел = Данные.НовыйСоседний(кУзел, Новый Структура("Имя", "Строка"), Истина);
				КонецЕсли;
				Запрос.Вставить("кУзел", кУзел);
				аУзел = Неопределено;
				Если СписокПолей = Неопределено Тогда
					СписокПолей = Заголовок;
				КонецЕсли;
				Для каждого элПоле Из СписокПолей Цикл
					Если аУзел = Неопределено Тогда
						аУзел = Данные.НовыйАтрибут(кУзел, Новый Структура("Имя, Значение", элПоле.Ключ, УзелСвойство(Заголовок, элПоле.Ключ)), Истина);
					Иначе
						аУзел = Данные.НовыйСоседний(аУзел, Новый Структура("Имя, Значение", элПоле.Ключ, УзелСвойство(Заголовок, элПоле.Ключ)), Истина);
					КонецЕсли;
				КонецЦикла;
				Данные.ОбновитьУзел(Запрос.Узел);
				Запрос.РезультатДанные = Неопределено;
				Данные.Процесс.ЗадачаОбновитьВыполнить = Истина;
			КонецЕсли;
			Если РезультатДанные.Ответ = "ЗапросЗавершен" Тогда // все данные получены
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		Возврат "Приостановить";

	КонецЕсли;
КонецФункции // ИсточникДанных()

Функция Регистрация(Данные, Параметры, ЭтоЗадача = Ложь) Экспорт
	Возврат Авторизация(Данные, Параметры, ЭтоЗадача);
КонецФункции


Функция Авторизация(Данные, Параметры, ЭтоЗадача = Ложь) Экспорт
	Если НЕ ЭтоЗадача Тогда
		ЭтотУзел = Параметры.ЭтотУзел;
		стрЗапрос = Новый Структура("unm, uid, procid, pwd", Параметры.unm, Параметры.uid, Данные.Процесс.procid, Параметры.pwd);
		Запрос = Новый Структура("Данные, Узел, ЗапросДанные, ИмяФункции, cmd", Данные, ЭтотУзел, стрЗапрос, Параметры.Ф, "ВыполнитьФункцию");
		Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
		Возврат "Выполняется запрос";
	Иначе // задача "ВыполнитьФункцию"
		структЗадача = Параметры;
		Запрос = Параметры.Запрос;
		Если НЕ Запрос.Свойство("РезультатДанные") Тогда
			стрЗапрос = Новый Структура("ЗапросДанные, Команда", Запрос.ЗапросДанные, Запрос.ИмяФункции);
			стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
			Если Данные.Процесс.ПередатьДанныеД(стрЗапрос) Тогда
				Запрос.Вставить("РезультатДанные", Неопределено);
			КонецЕсли;
		ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
			РезультатДанные = Запрос.РезультатДанные;
			ЗапросДанные = РезультатДанные.Результат;
			Если РезультатДанные.Ответ = "ОшибкаПотокаДанных" Тогда
				// сообщить об ошибке
				Возврат "УдалитьЗадачу";
			КонецЕсли;
			// прежний дочерний нужно удалять
			ДочернийУзел = Данные.Дочерний(Запрос.Узел);
			Если НЕ ДочернийУзел = Неопределено Тогда
				Данные.УдалитьУзел(ДочернийУзел);
			КонецЕсли;
			дУзел = Данные.НовыйДочерний(Запрос.Узел, Новый Структура("Имя, Значение", "Узел", "ЗапросДанные"), Истина);
			кУзел = Неопределено;
			Для каждого Параметр Из ЗапросДанные Цикл
				стрУзел = Новый Структура("Имя, Значение", "Узел", Параметр.Ключ);
				Если кУзел = Неопределено Тогда
					кУзел = Данные.НовыйДочерний(дУзел, стрУзел, Истина);
				Иначе
					кУзел = Данные.НовыйСоседний(кУзел, стрУзел, Истина);
				КонецЕсли;
				Данные.НовыйДочерний(кУзел, Новый Структура("Имя, Значение", "Строка", Параметр.Значение), Истина);
			КонецЦикла;
			Если ЗапросДанные.ПрошелАвторизацию Тогда
				Данные.Процесс.Субъект = ЗапросДанные.unm;
				Данные.Процесс.НоваяЗадача(Новый Структура("data, cmd", "expldb", "newtab"), "Служебный");
				Данные.Процесс.ИзменитьАдрес();
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат "Приостановить";
КонецФункции // Авторизация()


Функция НоваяБаза(Данные, Параметры) Экспорт
	БазаДанных = Параметры.БазаДанных;
	Запрос = Новый Структура("Данные, БазаДанных, cmd", Данные, БазаДанных, "НоваяБаза");
	Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
	Возврат Неопределено;
КонецФункции


Функция ЗагруженныеДанные(Данные, Параметры) Экспорт
	ЭтотУзел = Параметры.ЭтотУзел;
	ДочернийУзел = Данные.Дочерний(ЭтотУзел);
	// прежний дочерний нужно удалять
	Если НЕ ДочернийУзел = Неопределено Тогда
		Данные.УдалитьУзел(ДочернийУзел);
	КонецЕсли;
	Узел = ЭтотУзел;
	Для каждого элОбъектДанных Из Данные.Процесс.ВсеДанные Цикл
		ОбъектДанных = элОбъектДанных.Значение;
		стрУзел = Новый Структура("Имя", "Строка");
		Если Узел.Имя = "Узел" Тогда
			Узел = Данные.НовыйДочерний(Узел, стрУзел, Истина);
		Иначе
			Узел = Данные.НовыйСоседний(Узел, стрУзел, Истина);
		КонецЕсли;
		Атр = Данные.НовыйАтрибут(Узел, Новый Структура("Имя, Значение", "ИмяДанных", ОбъектДанных.ИмяДанных), Истина);
		Атр = Данные.НовыйСоседний(Атр, Новый Структура("Имя, Значение", "ПозицияДанных", ОбъектДанных.ПозицияДанных), Истина);
		Атр = Данные.НовыйСоседний(Атр, Новый Структура("Имя, Значение", "БазаДанных", ОбъектДанных.БазаДанных), Истина);
		Атр = Данные.НовыйСоседний(Атр, Новый Структура("Имя, Значение", "Размер", ОбъектДанных.Количество), Истина);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции
