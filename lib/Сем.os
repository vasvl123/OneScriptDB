// MIT License
// Copyright (c) 2020 vasvl123
// https://github.com/vasvl123/useyourmind

Перем пДанные;
Перем Правила;
Перем Формы;


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция ИмяЗначение(Имя, Значение = "")
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции


Процедура ФормыСлов(Данные, Свойства, Результат) Экспорт
	Если НЕ Результат = Неопределено Тогда
		Для каждого Вариант Из Результат Цикл
			ф = Формы.с.Получить(Вариант.Значение.Слово);
			мРез = СтрРазделить(Вариант.Значение.Результат, Символы.ПС);
			Для каждого Рез Из мРез Цикл
				Если НЕ Рез = "" Тогда
					мФорм = СтрРазделить(Рез, Символы.Таб);
					Запись = ИмяЗначение(мФорм[0], мФорм[1]);
					у = пДанные.НовыйДочерний(ф, Запись, , Истина); // Добавить форму
					Если мФорм.Количество() > 2 Тогда
						пДанные.НовыйАтрибут(у, ИмяЗначение(мФорм[2], мФорм[3]));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Свойства.д.Разбор.Значение = "Токены";
	Данные.ОбъектыОбновитьДобавить(Свойства.Родитель);
КонецПроцедуры


Процедура ПостроитьИндекс(пУзел)
	пУзел.Вставить("с", Новый Соответствие);
	дУзел = пУзел.Дочерний;
	Пока НЕ дУзел = Неопределено Цикл
		ПостроитьИндекс(дУзел);
		ин = 0;
		Пока НЕ пУзел.с.Получить(дУзел.Имя + "_" + ин) = Неопределено Цикл
			ин = ин + 1;
		КонецЦикла;
		пУзел.с.Вставить(дУзел.Имя + "_" + ин, дУзел);
		дУзел = дУзел.Соседний;
	КонецЦикла;
КонецПроцедуры

Функция Корень_Свойства(Данные, оУзел) Экспорт

	Если пДанные = Неопределено Тогда // Загрузить правила анализа
		Запрос = Новый Структура("sdata, data", Данные.Процесс.Источник, "semdata");
		пДанные = Данные.Процесс.ПолучитьДанные(Новый Структура("Запрос", Запрос));
		Если пДанные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ пДанные.Корень.Свойство("Свойства") Тогда
		пДанные.ОбъектыОбновить.Добавить(пДанные.Корень);
		Возврат Ложь;
	КонецЕсли;
	Если Правила = Неопределено Тогда // построить индекс
		Правила = пДанные.Корень.Свойства.д.Правила;
		ПостроитьИндекс(Правила);
	КонецЕсли;
	Если Формы = Неопределено Тогда // формы слов
		Формы = пДанные.Корень.Свойства.д.Формы;
		Формы.Вставить("с", Новый Соответствие);
		фУзел = Формы.Дочерний;
		Пока НЕ фУзел = Неопределено Цикл
			Формы.с.Вставить(фУзел.Имя, фУзел);
			фУзел = фУзел.Соседний;
		КонецЦикла;
	КонецЕсли;

	Если НЕ оУзел.Свойство("Свойства") Тогда // новый объект
		Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
		оУзел.Вставить("Свойства", Свойства);
	КонецЕсли;
	Если оУзел.Свойства.Дочерний = Неопределено Тогда
		шСвойства = "
		|*Вид
		|	div	class=card mb-3 col-lg-7	style=background-color:rgba(255,255,255,0.4); min-height:20rem
		|		div class=card-body
		|			П: Содержимое
		|";
		Данные.СоздатьСвойства(оУзел.Свойства, шСвойства, "Только");
	КонецЕсли;
КонецФункции // Корень_Свойства()


Функция Предложение_Свойства(Данные, оУзел) Экспорт

	Если НЕ оУзел.Свойство("Свойства") Тогда // новый объект
		Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
		шСвойства = "
		|Токены
		|Разбор: Нет
		|*Открыть: Нет
		|*вТокен
		|*вСвязь
		|*События
		|*Вид";
		Данные.СоздатьСвойства(Свойства, шСвойства);
		оУзел.Вставить("Свойства", Свойства);
	КонецЕсли;

КонецФункции

Функция ДобавитьПравило(Данные, оУзел, сУзел)

	ток1Форма = сУзел.Родитель.Значение;
	ток2Форма = сУзел.Значение;

	и1 = 0;
	Пока Истина Цикл
		п1 = Правила.с.Получить(ток1Форма + "_" + и1); // поиск правил
		Если п1 = Неопределено Тогда
			Прервать;
		КонецЕсли;
		и2 = 0;
		Пока Истина Цикл
			п2 = п1.с.Получить(ток2Форма + "_" + и2);
			Если п2 = Неопределено Тогда
				Прервать;
			КонецЕсли;
			// найдено такое правило
			Если п2.Значение = сУзел.Значение Тогда
				Возврат п2;
			КонецЕсли;
			и2 = и2 + 1;
		КонецЦикла;
		и1 = и1 + 1;
	КонецЦикла;

	// Добавить правило
	Если п2 = Неопределено Тогда
		Если п1 = Неопределено Тогда
			п1 = пДанные.НовыйДочерний(Правила, ИмяЗначение(ток1Форма), , Истина);
			ПостроитьИндекс(п1);
		КонецЕсли;
		п2 = пДанные.НовыйДочерний(п1, ИмяЗначение(ток2Форма, сУзел.Значение), , Истина);
		ПостроитьИндекс(Правила);
	КонецЕсли;

	Возврат п2;

КонецФункции // ()

Функция Предложение_Модель(Данные, Свойства, Изменения) Экспорт
	Перем Обновить, пр;

	оУзел = Свойства.Родитель;

	вТокен = Свойства.д.вТокен.Значение;
	вСвязь = Свойства.д.вСвязь.Значение;

	// обработать события
	Если Изменения.Получить(Свойства.д.События) = Истина Тогда
		дУзел = Свойства.д.События.Дочерний;
		Если НЕ дУзел = Неопределено Тогда
			мСобытие = СтрРазделить(дУзел.Значение, Символы.Таб);
			тСобытие = мСобытие[0];
			Если тСобытие = "ПриНажатии" Тогда
				сУзел = Данные.ПолучитьУзел(мСобытие[1]);

				ЗначениеКнопка = УзелСвойство(дУзел, "Параметры");
				Если НЕ ЗначениеКнопка = Неопределено Тогда

					Если ЗначениеКнопка = "sent" Тогда
						см = Свойства.д.Открыть.Значение;
						см = ?(см = "Да", "Нет", "Да");
						Свойства.д.Открыть.Значение = см;

					ИначеЕсли ЗначениеКнопка = "token" Тогда

						Если НЕ вТокен = сУзел Тогда
							Если НЕ вСвязь = "" Тогда
								// добавить связь
								сУзел = Данные.НовыйДочерний(вТокен, ИмяЗначение(сУзел.Имя, вСвязь));
								// добавить правило
								п2 = ДобавитьПравило(Данные, оУзел, сУзел);
								пДанные.НовыйДочерний(п2, ИмяЗначение(сУзел.Родитель.Имя, сУзел.Имя), Истина); // для отладки
								сУзел = вТокен;
								Свойства.д.вСвязь.Значение = "";
								вСвязь = Свойства.д.вСвязь.Значение;
							Иначе
								Свойства.д.вТокен.Значение = сУзел;
								вТокен = Свойства.д.вТокен.Значение;
							КонецЕсли;
						Иначе
							Свойства.д.вСвязь.Значение = "";
							вСвязь = Свойства.д.вСвязь.Значение;
							Свойства.д.вТокен.Значение = "";
							вТокен = Свойства.д.вТокен.Значение;
						КонецЕсли;

					ИначеЕсли Лев(ЗначениеКнопка, 5) = "link_" Тогда

						св = Сред(ЗначениеКнопка, 6);
						Если НЕ вСвязь = св Тогда
							Свойства.д.вСвязь.Значение = св;
							вСвязь = Свойства.д.вСвязь.Значение;
						Иначе
							Свойства.д.вСвязь.Значение = "";
							вСвязь = Свойства.д.вСвязь.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			Иначе // изменение полей
				сУзел = Данные.ПолучитьУзел(мСобытие[1]);
				Свойства.д.вСвязь.Значение = дУзел.Параметры;
				вСвязь = Свойства.д.вСвязь.Значение;
			КонецЕсли;

		КонецЕсли;
		Данные.УдалитьУзел(дУзел);
		Изменения.Вставить(Свойства.д.События, Истина);
		оУзел.Вставить("Обновить", Истина);
	КонецЕсли;

	Если НЕ УзелСвойство(оУзел, "Обновить") = Ложь Тогда

		// найти формы
		Если Свойства.д.Разбор.Значение = "Нет" И Свойства.д.Открыть.Значение = "Да" Тогда
			Свойства.д.Токены.Вставить("с", Новый Соответствие);
			Если Свойства.д.Свойство("Текст", пр) Тогда
				сСимв = ".,!?:;()«»""'-–";
				Для н = 1 По стрДлина(сСимв) Цикл
					сс = Сред(сСимв, н, 1);
					пр = СтрЗаменить(пр, сс, " " + сс + " ");
				КонецЦикла;
				м = СтрРазделить(пр, " ");
				мсл = "";
				Для каждого сл Из м Цикл
					Если НЕ сл = "" Тогда
						// взять готовую форму
						токФорма = "";
						тУзел = оУзел.Атрибут.Соседний.Дочерний;
						Пока НЕ тУзел = Неопределено Цикл
							Если тУзел.Имя = сл Тогда
								токФорма = тУзел.Значение;
								Прервать;
							КонецЕсли;
							тУзел = тУзел.Соседний;
						КонецЦикла;
						т = Данные.НовыйДочерний(Свойства.д.Токены, ИмяЗначение(сл, токФорма), , Истина);
						Если стрНайти(сСимв, сл) = 0 Тогда
							всл = ВРег(сл);
							Если Формы.с.Получить(всл) = Неопределено Тогда
								ф = пДанные.НовыйДочерний(Формы, ИмяЗначение(всл), , Истина);
								Формы.с.Вставить(всл, ф);
								мсл = мсл + Символы.ПС + всл;
							КонецЕсли;
						КонецЕсли;
						Свойства.д.Токены.с.Вставить(сл, т);
					КонецЕсли;
				КонецЦикла;
				Запрос = Новый Структура("Библиотека, Данные, Слова, Свойства, cmd", ЭтотОбъект, Данные, Сред(мсл, 2), Свойства, "ФормыСлов");
				Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
				Свойства.д.Разбор.Значение = "Формы";
			Иначе // нечего разбирать
				оУзел.Вставить("Обновить", Ложь);
			КонецЕсли;
		КонецЕсли;

		// найти правила
		Если Свойства.д.Разбор.Значение = "Токены" Тогда
			Для каждого т1 Из Свойства.д.Токены.с Цикл
				ток1 = т1.Значение;
				ток1Формы = Формы.с.Получить(ВРег(т1.Ключ));
				Если НЕ ток1Формы = Неопределено Тогда
					фУзел1 = ток1Формы.Дочерний;
					Пока НЕ фУзел1 = Неопределено Цикл // варианты форм
						и1 = 0;
						Пока Истина Цикл
							п1 = Правила.с.Получить(фУзел1.Значение + "_" + и1); // поиск правил
							Если п1 = Неопределено Тогда
								Прервать;
							КонецЕсли;
							Для каждого т2 Из Свойства.д.Токены.с Цикл // связанный токен
								ток2 = т2.Значение;
								Если НЕ ток1 = ток2 Тогда
									ток2Формы = Формы.с.Получить(ВРег(т2.Ключ)); // формы токена
									Если НЕ ток2Формы = Неопределено Тогда
										фУзел2 = ток2Формы.Дочерний;
										Пока НЕ фУзел2 = Неопределено Цикл
											и2 = 0;
											Пока Истина Цикл
												п2 = п1.с.Получить(фУзел2.Значение + "_" + и2); // форма соответствует правилу
												Если п2 = Неопределено Тогда
													Прервать;
												КонецЕсли;
												// найдено подходящее правило
												нп = Данные.НовыйДочерний(ток1, ИмяЗначение(ток2.Имя, п2.Значение), , Истина);
												Данные.НовыйАтрибут(нп, ИмяЗначение(п1.Имя, п2.Имя));
												пДанные.НовыйДочерний(п2, ИмяЗначение(ток1.Имя, ток2.Имя), Истина); // для отладки
												и2 = и2 + 1;
											КонецЦикла;
											фУзел2 = фУзел2.Соседний;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							и1 = и1 + 1;
						КонецЦикла;
						фУзел1 = фУзел1.Соседний;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			Свойства.д.Разбор.Значение = "Выполнен";
			оУзел.Вставить("Обновить", Ложь);

		КонецЕсли;

		// сформировать представление
		Вид = "";
		Если Свойства.д.Свойство("Текст", пр) Тогда // Предложение
			ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-light' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
			см = ?(Свойства.д.Открыть.Значение = "Нет", "&#9655;", "&#9661;");
			Вид = СтрЗаменить(ш, ".текст", см);
			Если Свойства.д.Открыть.Значение = "Нет" Тогда
				Вид = "<div class='btn-group' role='group'>" + Вид + СтрЗаменить(ш, ".текст", пр) + "</div>";
			Иначе
				тУзел = Свойства.д.Токены.Дочерний;
				Пока НЕ тУзел = Неопределено Цикл
					Вид = Вид + "<button id='_" + тУзел.Код + "' type='button' class='text-left btn1 btn-" + ?(вТокен = тУзел, "info", "light") + "' onclick='addcmd(this,event); return false' role='token'>" + тУзел.Имя + "</button>";
					Вид = Вид + "<!--t_" + тУзел.Код + "-->";
					тУзел = тУзел.Соседний;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		Если НЕ Свойства.д.Разбор.Значение = "Нет" И Свойства.д.Открыть.Значение = "Да" Тогда // Токены
			тУзел = Свойства.д.Токены.Дочерний;
			Вид = Вид + "<p>" + ТокенВид(Свойства, тУзел) + "</p>";
		КонецЕсли;

		Если НЕ вТокен = "" Тогда // выбрать связь
			// показать виды связей
			нСв = "";
			Связи = Новый Массив;
			Если НЕ вСвязь = "" Тогда
				Связи.Добавить(вСвязь);
			Иначе
				ток1Формы = Формы.с.Получить(ВРег(сУзел.Имя));
				Если НЕ ток1Формы = Неопределено Тогда
					фУзел1 = ток1Формы.Дочерний;
					Пока НЕ фУзел1 = Неопределено Цикл // варианты форм
						и1 = 0;
						Пока Истина Цикл
							п1 = Правила.с.Получить(фУзел1.Значение + "_" + и1); // поиск правил
							Если п1 = Неопределено Тогда
								Прервать;
							КонецЕсли;
							Для каждого п2 Из п1.с Цикл // все связи
								Если Связи.Найти(п2.Значение.Значение) = Неопределено Тогда
									Связи.Добавить(п2.Значение.Значение);
								КонецЕсли;
							КонецЦикла;
							и1 = и1 + 1;
						КонецЦикла;
						фУзел1 = фУзел1.Соседний;
					КонецЦикла;
				КонецЕсли;
				Связи.Добавить("+");
			КонецЕсли;
			Если вСвязь = "+" Тогда
				нСв = нСв + "<input id='" + вТокен.Код + "' type='text' class='form-control-sm' onchange='addcmd(this,event); return false' role='link'></input>";
				нСв = нСв + "<script>$('#" + вТокен.Код + "')[0].select();</script>";
			Иначе
				Для каждого св Из Связи Цикл
					Если вСвязь = "" ИЛИ св = вСвязь Тогда
						нСв = нСв + "<button id='_" + вТокен.Код + "' type='button' class='text-left btn1 btn-" + ?(вСвязь = "", "secondary", "warning") + "' onclick='addcmd(this,event); return false' role='link_" + св + "'>" + св + "</button>";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Вид = СтрЗаменить(Вид, "<!--t_" + вТокен.Код + "-->", нСв);
		КонецЕсли;

		Свойства.д.Вид.Значение = "<p>" + Вид + "</p>";

	КонецЕсли;

	Возврат Обновить;

КонецФункции

Функция ТокенВид(Свойства, Знач дУзел)
	Связи = "";
	вТокен = Свойства.д.вТокен.Значение;
	Пока НЕ дУзел = Неопределено Цикл
		Если дУзел.Родитель = Свойства.д.Токены Тогда
			Связь = "";
			Если вТокен = "" ИЛИ вТокен = дУзел Тогда
				Связь = "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + ?(вТокен = дУзел, "info", "light") + "' onclick='addcmd(this,event); return false' role='token'>" + дУзел.Имя + "</button>";
				Если НЕ дУзел.Дочерний = Неопределено Тогда
					Связь = Связь + ТокенВид(Свойства, дУзел.Дочерний);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Связь = "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-secondary' onclick='addcmd(this,event); return false' role='link'>" + дУзел.Значение + "</button>";
			Если НЕ "" + дУзел.Имя = "" Тогда
				Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-light' onclick='addcmd(this,event); return false' role='token'>" + дУзел.Имя + "</button>";
			КонецЕсли;
			тУзел = дУзел.Родитель.Родитель.с.Получить(дУзел.Имя);
			Связь = Связь + ТокенВид(Свойства, тУзел.Дочерний);
		КонецЕсли;
		Связь = "<ul>" + Связь + "</ul>";
		Связи = Связи + Связь;
		дУзел = дУзел.Соседний;
	КонецЦикла;
	Возврат Связи;
КонецФункции // ТокенВид()

Функция Токен_Свойства(Данные, оУзел) Экспорт

	Если НЕ оУзел.Свойство("Свойства") Тогда // новый объект
		Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
		шСвойства = "
		|";
		Данные.СоздатьСвойства(Свойства, шСвойства);
		оУзел.Вставить("Свойства", Свойства);
	КонецЕсли;

КонецФункции

Функция Токен_Модель(Данные, Свойства, Изменения) Экспорт

	оУзел = Свойства.Родитель;
	Если НЕ УзелСвойство(оУзел, "Обновить") = Ложь Тогда
	КонецЕсли;

КонецФункции
