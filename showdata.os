// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

Перем procid Экспорт;
Перем Шаблон Экспорт;
Перем Буфер, БуферДанные, БуферУзел;
Перем Параметры;
Перем Вкладки, ВкладкиСписок, ИдВкладки;
Перем ОбновитьВкладки;
Перем ТекущаяВкладка, ТекущиеДанные, ТекущееОкно;
Перем Задачи;
Перем ЗадачаОбновитьВыполнить Экспорт;
Перем ЗадачаОбновить;
//Перем ЗадачаОбновитьВремя;
Перем ОбщийРезультат;
Перем Скрипты;
Перем Команда;
Перем ВсеДанные;
Перем зИмяДанных;
Перем Источник Экспорт;
Перем ОстановитьСервер;
Перем Субъект Экспорт;
Перем ПараметрХост;
Перем Порт;
Перем Локальный;
Перем МоментЗапуска;
Перем УдаленныйУзел Экспорт;
Перем Библиотеки;
Перем Соединения;
Перем СоединенияП;


Функция ПолучитьИД() Экспорт
	МоментЗапуска = МоментЗапуска - 1;
	Возврат Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска);
КонецФункции // ПолучитьИД()


Функция ИмяЗначение(Имя = "", Значение = "")
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции


Функция РазмерПоля(Знач Стр)
	Размер = Цел(СтрДлина(стр)/3);
	Если Размер < 3 Тогда
		Размер = 3;
	ИначеЕсли Размер > 12 Тогда
		Размер = 12;
	КонецЕсли;
	Возврат Строка(Размер);
КонецФункции


Функция СтрЭкранироватьРазметку(Знач Стр, огрДлины = 0)
	Стр = СтрЗаменить(Стр, "&", "&amp;");
	Стр = СтрЗаменить(Стр, """", "&quot;");
	Стр = СтрЗаменить(Стр, "'", "&#39;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, Символы.ПС, "<br/>");
	Если огрДлины > 0 Тогда
		длСтр = СтрДлина(Стр);
		Если длСтр > огрДлины Тогда
			Стр = Лев(Стр, огрДлины) + " ...";
		КонецЕсли;
	КонецЕсли;
	Возврат Стр;
КонецФункции


Функция СтруктуруВДвоичныеДанные(знСтруктура)
	Результат = Новый Массив;
	Если НЕ знСтруктура = Неопределено Тогда
		Для каждого Элемент Из знСтруктура Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
				Ключ = "#" + Ключ;
				дЗначение = Значение;
			Иначе
				дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
			КонецЕсли;
			дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
			рдКлюч = дКлюч.Размер();
			рдЗначение = дЗначение.Размер();
			бРезультат = Новый БуферДвоичныхДанных(6);
			бРезультат.ЗаписатьЦелое16(0, рдКлюч);
			бРезультат.ЗаписатьЦелое32(2, рдЗначение);
			Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
			Результат.Добавить(дКлюч);
			Результат.Добавить(дЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СоединитьДвоичныеДанные(Результат);
КонецФункции


Функция ДвоичныеДанныеВСтруктуру(Данные, Рекурсия = Истина)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		рдДанные = Данные.Размер();
		Если рдДанные = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("БуферДвоичныхДанных") Тогда
		рдДанные = Данные.Размер;
		бдДанные = Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Позиция = 0;
	знСтруктура = Новый Структура;
	Пока Позиция < рдДанные - 1 Цикл
		рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
		рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
		Если рдКлюч + рдЗначение > рдДанные Тогда // Это не структура
			Возврат Неопределено;
		КонецЕсли;
		Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
		бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
		Позиция = Позиция + 6 + рдКлюч + рдЗначение;
		Л = Лев(Ключ, 1);
		Если Л = "*" Тогда
			Если НЕ Рекурсия Тогда
				Продолжить;
			КонецЕсли;
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение);
		ИначеЕсли Л = "#" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
		Иначе
			Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
		КонецЕсли;
		знСтруктура.Вставить(Ключ, Значение);
	КонецЦикла;
	Возврат знСтруктура;
КонецФункции


Функция ПоказатьВкладки()
	Текст = "";
	ПараметрыШаблона = Новый Структура;
	Для каждого элВкладка Из ВкладкиСписок Цикл
		Вкладка = элВкладка.Значение;
		Если НЕ Вкладка.ТипВкладки = "prop" Тогда
			ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
			ПараметрыШаблона.Вставить("ПараметрЗаголовок", Вкладка.Заголовок);
			ПараметрыШаблона.Вставить("ПараметрАктивный", ?(Вкладка.ИдВкладки = ТекущаяВкладка, "active", ""));
			ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
			ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
			ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
			ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
			Если НЕ Вкладка.Режим = "image" Тогда
				ПараметрыШаблона.Вставить("ПараметрБазаДанных", Вкладка.Данные.БазаДанных + " / " + Вкладка.Данные.ИмяДанных + " / " + Вкладка.Данные.ПозицияДанных);
			КонецЕсли;
			Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьВкладка", ПараметрыШаблона);
		КонецЕсли;
	КонецЦикла;
	// ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	// Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьНоваяВкладка", ПараметрыШаблона);
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВкладки", Текст);
	ПараметрыШаблона.Вставить("ПараметрЗаголовокСтраницы", "" + УзелСвойство(ТекущиеДанные, "ЗаголовокСтраницы"));
	ПараметрыШаблона.Вставить("ПараметрРежим", УзелСвойство(Вкладки.Получить(ТекущаяВкладка), "Режим"));
	ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", "" + ТекущаяВкладка);
	Текст = Шаблон.ПолучитьОбласть("ОбластьВкладки", ПараметрыШаблона);
	// Меню пользователя
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрСубъект", Субъект);
	Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьСубъект", ПараметрыШаблона);
	Возврат Текст;
КонецФункции // ПоказатьВкладки()


Функция НоваяСтруктураВкладка(Данные, ТипВкладки, Заголовок, Режим, УзелКод)

	НоваяВкладка = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, УзлыОбновить, Заголовок, Режим, ИдУзла, ОбновитьУзел, Прокрутка",
		ИдВкладки, ТипВкладки, Данные, Новый Соответствие, Новый Соответствие, Заголовок, Режим, УзелКод, Истина, "0");
	Если НЕ ТипВкладки = "prop" Тогда
		Если НЕ ТекущаяВкладка = Неопределено Тогда
			ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(Вкладки.Получить(ТекущаяВкладка))) + 1, НоваяВкладка);
		Иначе
			ВкладкиСписок.Добавить(НоваяВкладка);
		КонецЕсли;
		ТекущаяВкладка = ИдВкладки;
		ОбновитьВкладки = Истина;
	КонецЕсли;
	Вкладки.Вставить(ИдВкладки, НоваяВкладка);
	ИдВкладки = ИдВкладки + 1;
	ОбщийРезультат = ОбщийРезультат + "<script>newtab('" + НоваяВкладка.ИдВкладки + "','" + НоваяВкладка.ТипВкладки + "','" + НоваяВкладка.ИдУзла + "');</script>";

	Возврат НоваяВкладка;

КонецФункции // НоваяСтруктураВкладка()


Функция ПолучитьДанные(структЗадача) Экспорт
	ИстДанных = "" + УзелСвойство(структЗадача.Запрос, "sdata");
	БазаДанных = "" + УзелСвойство(структЗадача.Запрос, "sdb");
	ИмяДанных = "" + УзелСвойство(структЗадача.Запрос, "data");
	ПозицияДанных = "" + УзелСвойство(структЗадача.Запрос, "datapos");
	ИмяШаблона = "" + УзелСвойство(структЗадача.Запрос, "templ");
	ПутьДанные = ИстДанных + "/" + БазаДанных + "/" + ИмяДанных + "/" + ПозицияДанных;
	Данные = ВсеДанные.Получить(ПутьДанные);
	Если Данные = "НетДанных" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные = Неопределено Тогда
		ЗадачаПараметры = Новый Структура("ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, ИмяШаблона, cmd", ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, ИмяШаблона, "ПолучитьДанные");
		НоваяЗадача(ЗадачаПараметры, "Служебный", структЗадача);
		ВсеДанные.Вставить(ПутьДанные, "НетДанных");
	КонецЕсли;
	Возврат Данные;
КонецФункции


Функция НоваяВкладка(структЗадача) Экспорт
	Данные = ПолучитьДанные(структЗадача);
	Если Данные = Неопределено Тогда // пока нет данных
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Режим = "image";
		ТипВкладки = "win";
		ИмяДанных = УзелСвойство(структЗадача.Запрос, "data");
		ТекущиеДанные = НоваяСтруктураВкладка(Данные, ТипВкладки, ИмяДанных, Режим, Неопределено);
		ТекущиеДанные.Вставить("ИстДанных", структЗадача.Запрос.sdata);
		ТекущиеДанные.Вставить("БазаДанных", структЗадача.Запрос.sdb);
		ТекущиеДанные.Вставить("ИмяДанных", "" + УзелСвойство(структЗадача.Запрос, "data"));
		ТекущиеДанные.Вставить("ПозицияДанных", "" + УзелСвойство(структЗадача.Запрос, "datapos"));
	Иначе
		Режим = "" + УзелСвойство(структЗадача.Запрос, "mode");
		ТипВкладки = "data";
		Если Режим = "" Тогда
			Режим = "view";
		КонецЕсли;
		ТекущиеДанные = НоваяСтруктураВкладка(Данные, ТипВкладки, Данные.ИмяДанных, Режим, Данные.Корень.Код);
		ЗаголовокСтраницы = Данные.ИмяДанных + " - uascript.net";
		свУзел = Данные.Корень.Дочерний;
		Если НЕ свУзел = Неопределено Тогда
			Если свУзел.Имя = "Свойства." Тогда
				Свойства = Данные.СтруктураСвойств(свУзел);
				Если Свойства.Свойство("д") Тогда
					Если Свойства.д.Свойство("Заголовок") Тогда
						ЗаголовокСтраницы = Свойства.д.Заголовок.Значение;
					КонецЕсли;
					Если Свойства.д.Свойство("Меню") Тогда
						Меню = Свойства.д.Меню.Значение;
						ТекущиеДанные.Вставить("Меню", Меню);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.Вставить("ЗаголовокСтраницы", ЗаголовокСтраницы);
	КонецЕсли;
	Возврат ТекущиеДанные;
КонецФункции


Функция НачальнаяСтраница(Содержимое, Заголовок, БокПанель)
	Текст = Шаблон.ПолучитьОбласть("ОбластьШапка", Новый Структура("ПараметрХост, ПараметрЗаголовок", ПараметрХост, Заголовок))
		+ Шаблон.ПолучитьОбласть("ОбластьПанельОкно", Новый Структура("ПараметрХост, ПараметрСодержимое, ПараметрБокПанель", ПараметрХост, Содержимое, БокПанель))
		+ Шаблон.ПолучитьОбласть("ОбластьПодвал", Новый Структура("ПараметрИдПроцесса, ПараметрХост", procid, ПараметрХост));
	Возврат Текст;
КонецФункции


Функция ПоказатьМенюИнструменты(Вкладка, Узел, ЭтоАтрибут = Ложь)

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
	ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
	ПараметрыШаблона.Вставить("ПараметрВидимость", "");

	ПараметрМенюИнструменты = "";

	Если Вкладка.Режим = "design" Тогда

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["СтруктураДанных"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура данных");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьУзел"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Редактировать узел");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["СтруктураДанных"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура данных");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ЗначениеУзла"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение узла");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		// ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ЗначениеОбъекта"]);
		// ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение объекта");
		// ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		//Если НЕ этоАтрибут = Истина Тогда
			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйРодитель"]);
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый родитель");
			ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйАтрибут"]);
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый атрибут");
			ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйДочерний"]);
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый дочерний");
			ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
		//КонецЕсли;

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйСоседний"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый соседний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВырезатьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вырезать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["КопироватьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Копировать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьАтрибут"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьДочерний"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить дочерний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьСоседний"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить соседний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьАтрибуты"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все атрибуты");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьРодителя"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить родителя");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВидМеню", Команда["МенюРедактора"]);
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
	КнопкаИнструменты = Шаблон.ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

	Возврат КнопкаИнструменты;

КонецФункции // ПоказатьМенюИнструменты()


Функция ПоказатьСтруктуруУзла(Вкладка, Узел, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "" ;

	УзелОткрыт = УзелСостояние(Вкладка, Узел, "УзелОткрыт");
	Если УзелОткрыт = Неопределено Тогда
		УзелОткрыт = Ложь;
	КонецЕсли;

	УзелИмя = Узел.Имя;

	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = Узел.Значение;
	КонецЕсли;

	РедактироватьЗначение = УзелСостояние(Вкладка, Узел, "РедактироватьЗначение");
	РедактироватьИмя = УзелСостояние(Вкладка, Узел, "РедактироватьИмя");

	Если этоАтрибут = Истина Тогда
		УзелИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		УзелИмя = СтрЗаменить(УзелИмя, "_", "-");
	КонецЕсли;

	КнопкаУзел = "";

	Если Вкладка.ТипВкладки = "prop" И Узел.Код = Вкладка.ИдУзла Тогда // заголовок свойство
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", ?(Лев(Узел.Код, 1) = "s", "-s", ""));
		ПараметрыШаблона.Вставить("ПараметрНадписьИмя", СтрЭкранироватьРазметку(УзелИмя, 50));
		ПараметрыШаблона.Вставить("ПараметрНадписьЗначение", СтрЭкранироватьРазметку(УзелЗначение, 100));
		ПараметрИмяУзла = Шаблон.ПолучитьОбласть("ОбластьИмяЗначениеСвойство", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", ?(НЕ этоАтрибут = Истина ИЛИ Узел.Код = Вкладка.ИдУзла, ?(УзелОткрыт, Команда["ЗакрытьУзел"], Команда["ОткрытьУзел"]), Команда["СтруктураДанных"]));
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", ?(Узел.Дочерний = Неопределено, "-", ?(УзелОткрыт, "⚪" , "⚫")));
		КнопкаУзел = Шаблон.ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);

		Если РедактироватьИмя = Истина Тогда

			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовоеИмяУзла"]);
			ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелИмя, СпособКодированияСтроки.КодировкаURL));
			//ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелИмя));
			ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
			ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);
			Скрипты = Скрипты + Шаблон.ПолучитьОбласть("ОбластьСкриптИзменитьИмяЗначение", ПараметрыШаблона);

		Иначе

			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
			ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["МенюРедактора"]);
			ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелИмя, 50));
			ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
			ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", ?(Лев(Узел.Код, 1) = "s", "-s", ""));
			ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

		КонецЕсли;

		Если РедактироватьЗначение = Истина Тогда

			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовоеЗначениеУзла"]);
			ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
			//ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелЗначение));
			ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
			ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);
			Скрипты = Скрипты + Шаблон.ПолучитьОбласть("ОбластьСкриптИзменитьИмяЗначение", ПараметрыШаблона);

		Иначе

			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
			ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьЗначение"]);
			ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелЗначение, 100));
			ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
			ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", ?(Лев(Узел.Код, 1) = "s", "-s", ""));
			ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

		КонецЕсли;

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
		ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
		ПараметрИмяУзла = КнопкаУзел + Шаблон.ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	Если НЕ ЭтоАтрибут ИЛИ Узел.Код = Вкладка.ИдУзла Тогда

		ПараметрЗаголовокУзла = ПараметрИмяУзла + Атрибуты;

		ПараметрДочернийУзел = Дочерний;

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЗаголовокУзла", ПараметрЗаголовокУзла);
		ПараметрыШаблона.Вставить("ПараметрДочернийУзел", ПараметрДочернийУзел);
		Представление = Шаблон.ПолучитьОбласть("ОбластьУзел", ПараметрыШаблона);

	Иначе

		Представление = ПараметрИмяУзла;

	КонецЕсли;

	Возврат Представление;

КонецФункции


Функция ОтобразитьDOM(Вкладка, Узел, Родитель = Неопределено, Знач Обновить = Ложь, Знач ТипУзла = "", Знач НачальныйУзел = Ложь)

	Данные = Вкладка.Данные;

	Представление = Неопределено;

	Если ТипУзла = "" Тогда
		Если Узел.Свойство("ЭтоАтрибут") = Истина Тогда
			ТипУзла = "Атрибут";
		КонецЕсли;
	КонецЕсли;

	// Если УзелСостояние(Вкладка, Узел, "НачальныйУзел") = Истина Тогда
	// 	НачальныйУзел = Истина;
	// КонецЕсли;
	Если УзелСостояние(Вкладка, Узел, "ОбновитьУзел") = Истина Тогда
		Обновить = Истина;
	Иначе
		Представление = УзелСостояние(Вкладка, Узел, "Представление");
		Если НЕ Представление = Неопределено И НЕ Обновить Тогда
			Представление = "";
		КонецЕсли;
	КонецЕсли;

	Если Представление = Неопределено Тогда
		Если Обновить Тогда
			Атрибуты = "";
			Если НЕ Узел.Атрибут = Неопределено Тогда
				Атрибуты = ОтобразитьDOM(Вкладка, Узел.Атрибут, Узел, Обновить, "Атрибут");
			КонецЕсли;

			Дочерний = "";
			Если УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				Если НЕ Узел.Дочерний = Неопределено Тогда
					Дочерний = ОтобразитьDOM(Вкладка, Узел.Дочерний, Узел, Обновить, "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Представление = ПоказатьСтруктуруУзла(Вкладка, Узел, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
			УзелСостояниеЗначение(Вкладка, Узел, "Представление", Представление);
			УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьУзел", Ложь);
			УзелСостояниеЗначение(Вкладка, Узел, "Родитель", Родитель);
		Иначе
			Если УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				Если НЕ Узел.Дочерний = Неопределено Тогда
					Представление = ОтобразитьDOM(Вкладка, Узел.Дочерний, Узел, Обновить, "Дочерний");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ НачальныйУзел Тогда
		Если НЕ Узел.Соседний = Неопределено Тогда
			Соседний = ОтобразитьDOM(Вкладка, Узел.Соседний, Родитель, Обновить, ТипУзла);
			Представление = "" + Представление + Соседний;
		КонецЕсли;
	КонецЕсли;

	Возврат "" + Представление;

КонецФункции // ОтобразитьDOM()


Функция Диалог(Вкладка, Узел)

	УзелИмя = Узел.Имя;

	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = Узел.Значение;
	КонецЕсли;

	ЭтоАтрибут = (Узел.Свойство("ЭтоАтрибут") = Истина);

	Если УзелСостояние(Вкладка, Узел, "ЗагрузитьHTML") = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		Возврат Шаблон.ПолучитьОбласть("ОбластьЗагрузитьHTML", ПараметрыШаблона);
	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "ЗагрузитьДерево") = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		Возврат Шаблон.ПолучитьОбласть("ОбластьЗагрузитьДерево", ПараметрыШаблона);
	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "РедактироватьУзел") = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИмяУзла", СтрЭкранироватьРазметку(УзелИмя));
		ПараметрыШаблона.Вставить("ПараметрЗначениеУзла", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		Скрипты = Скрипты + Шаблон.ПолучитьОбласть("ОбластьСкриптРедактироватьУзел", ПараметрыШаблона);
		Возврат Шаблон.ПолучитьОбласть("ОбластьРедактироватьУзел", ПараметрыШаблона);
	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "НайтиУзел") = Истина Тогда
		ОбновитьСостояние(Вкладка, Узел, "НайтиУзел", Ложь);
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		Возврат Шаблон.ПолучитьОбласть("ОбластьНайтиУзел", ПараметрыШаблона);
	КонецЕсли;

	Возврат "";

КонецФункции // Диалог(Вкладка, Узел)


Функция СформироватьОтвет()

	//Команд = 0;
	//ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Если ОбновитьВкладки = Истина Тогда
		ОбщийРезультат = ОбщийРезультат + ПоказатьВкладки();
		Режим = УзелСвойство(Вкладки.Получить(ТекущаяВкладка), "Режим");
		Если Режим = "design" Тогда
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимРедактор");
		ИначеЕсли Режим = "view" Тогда
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимПросмотр");
		Иначе
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимСтруктура");
		КонецЕсли;
	КонецЕсли;

	Для каждого элВкладка Из Вкладки Цикл
		Вкладка = элВкладка.Значение;
		Если Вкладка.Данные = "НетДанных" Тогда
			Продолжить;
		КонецЕсли;

		Если Вкладка.Режим = "struct" Тогда
			Если Вкладка.ОбновитьУзел = Истина Тогда
				Узел = Вкладка.Данные.ПолучитьУзел(Вкладка.ИдУзла);
				Ответ = Диалог(Вкладка, Узел);
				Если Ответ = "" Тогда
					Ответ = "" + ОтобразитьDOM(Вкладка, Узел, , Вкладка.ОбновитьУзел, , Истина);
				КонецЕсли;
			Иначе
				Ответ = "";
				Для каждого элУзел Из Вкладка.УзлыОбновить Цикл
					Узел = элУзел.Ключ;
					Ответ = Ответ + ОтобразитьDOM(Вкладка, Узел, , Вкладка.ОбновитьУзел, , Истина);
				КонецЦикла;
				Вкладка.УзлыОбновить.Очистить();
			КонецЕсли;
		ИначеЕсли Вкладка.Режим = "image" Тогда
			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрИдПроцесса", "" + procid);
			ПараметрыШаблона.Вставить("ПараметрИстДанных", "" + Вкладка.ИстДанных);
			ПараметрыШаблона.Вставить("ПараметрБазаДанных", "" + Вкладка.БазаДанных);
			ПараметрыШаблона.Вставить("ПараметрИмяДанных", "" + Вкладка.ИмяДанных);
			ПараметрыШаблона.Вставить("ПараметрПозицияДанных", "" + Вкладка.ПозицияДанных);
			Ответ = Шаблон.ПолучитьОбласть("ОбластьКартинка", ПараметрыШаблона);
		Иначе
			Если Вкладка.ОбновитьУзел = Истина Тогда
				Узел = Вкладка.Данные.ПолучитьУзел(Вкладка.ИдУзла);
				Представление = Вкладка.Данные.ОбновитьПредставление(Узел);
			Иначе
				Представление = Вкладка.Данные.Представление;
			КонецЕсли;
			Ответ = "" + СтрЗаменить(Представление, "id='_", "id='" + Вкладка.ИдВкладки + "_");
		КонецЕсли;
		Если Вкладка.ТипВкладки = "win" Тогда // добавить окно
			Если Вкладка.ОбновитьУзел = Истина Тогда
				Если Вкладка.Режим = "struct" И НЕ Узел = Вкладка.Данные.Корень Тогда // это не корень, добавим кнопку родитель
					ПараметрыШаблона = Новый Структура;
					ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Родитель.Код);
					ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ИзменитьНачальныйУзел"]);
					ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", "...");
					ПараметрыШаблона.Вставить("ПараметрДочернийУзел", "" + Ответ);
					Ответ = Шаблон.ПолучитьОбласть("ОбластьКнопкаРодитель", ПараметрыШаблона);
				КонецЕсли;
				ПараметрыШаблона = Новый Структура;
				ПараметрыШаблона.Вставить("ПараметрЗаголовокОкна", Вкладка.Заголовок);
				ПараметрыШаблона.Вставить("ПараметрСодержимоеОкна", Ответ);
				ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
				ПараметрыШаблона.Вставить("ПараметрИдУзла", Вкладка.ИдУзла);
				ПараметрыШаблона.Вставить("ПараметрПрозрачность", ?(Вкладка.Режим = "image", "1", "0.9"));
				Ответ = Шаблон.ПолучитьОбласть("ОбластьПанель", ПараметрыШаблона);
			КонецЕсли;
		КонецЕсли;
		ОбщийРезультат = ОбщийРезультат + Ответ;
		Если ОбновитьВкладки = Истина И Вкладка.ИдВкладки = ТекущаяВкладка Тогда // показать вкладку
			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
			ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
			ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
			ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
			ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", ТекущаяВкладка);
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьСкрипт", ПараметрыШаблона);
		КонецЕсли;
		Вкладка.ОбновитьУзел = Ложь;
	КонецЦикла;

	ОбновитьВкладки = Ложь;

	Для каждого элДанные Из ВсеДанные Цикл
		Данные = элДанные.Значение;
		Если ТипЗнч(Данные) = Тип("pagedata") Тогда
			Данные.Представление = "";
		КонецЕсли;
	КонецЦикла;

	// Если Команд > 0 Тогда
	// 	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьСтатус", Новый Структура("ПараметрСтатусСообщение", "" + Цел(100*(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало))/100 + " s " + Команд + " c"));
	// КонецЕсли;

КонецФункции


Функция УстановитьПараметры(знПараметры)
	Параметры = знПараметры;
	procid = Параметры.procid;
	зИмяДанных = "" + УзелСвойство(Параметры, "data");
	Если зИмяДанных = "" Тогда
		зИмяДанных = "start";
	КонецЕсли;
	Источник = "" + УзелСвойство(Параметры, "sdata");
	ПараметрХост = Параметры.ПараметрХост;
	УдаленныйУзел = Параметры.УдаленныйУзел;
	Локальный = Параметры.Локальный; // если не локальный то простаивающий процесс будет завершен
	ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Параметры); // регистрация на веб-сервере
	ПередатьДанные(Параметры.Хост, Параметры.ПортД, Параметры); // регистрация на дата-сервере
	Сообщить("procid = " + procid);
	Субъект = Параметры.Субъект;
КонецФункции // УстановитьПараметры()


Функция ЗапросВыполнитьЗадачу(Знач структЗадача)

	//Сообщить(структЗадача.Этап + "=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd") + " время=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - структЗадача.ВремяНачало));

	Если структЗадача.Этап = "ВыполнитьЗадачу" Тогда

		СформироватьОтвет = ВыполнитьДействия(структЗадача);
		Если структЗадача.Тип = "Служебный" И ТипЗнч(СформироватьОтвет) = Тип("Булево") Тогда
			Если СформироватьОтвет = Истина Тогда
				ЗадачаОбновитьВыполнить = Истина;
			КонецЕсли;
			структЗадача.Этап = "УдалитьЗадачу";
		ИначеЕсли СформироватьОтвет = Истина Тогда
			структЗадача.Этап = "СформироватьОтвет";
		ИначеЕсли СформироватьОтвет = Ложь Тогда
			структЗадача.Этап = "УдалитьЗадачу";
		ИначеЕсли СформироватьОтвет = "Приостановить" Тогда
			структЗадача.Этап = "Приостановить";
		ИначеЕсли СформироватьОтвет = "Продолжить" Тогда
			структЗадача.Этап = "ВыполнитьЗадачу";
		ИначеЕсли СформироватьОтвет = "УдалитьЗадачу" Тогда
			структЗадача.Этап = "УдалитьЗадачу";
		ИначеЕсли НЕ СформироватьОтвет = "ПродолжитьВыполнение" Тогда
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;
	КонецЕсли;

	Если структЗадача.Этап = "СформироватьОтвет" Тогда

		Если структЗадача.Действие = Команда["ОбновитьДанные"] Тогда //ИЛИ структЗадача.Действие = Команда["ОбновитьСтраницу"] Тогда
			СформироватьОтвет();
			Если НЕ ОбщийРезультат + Скрипты = "" Тогда
				ЗадачаОбновить = Неопределено;
				структЗадача.Этап = "ЕстьРезультат";
			КонецЕсли;
		Иначе
			СформироватьОтвет();
			// тВкладка = Вкладки.Получить(ТекущаяВкладка);
			// Если НЕ тВкладка = Неопределено Тогда
			// 	СформироватьОтвет(тВкладка.Данные); // сначала обновить данные текущей вкладки
			// КонецЕсли;
			// ЗадачаОбновитьВыполнить = Истина; // потом все остальные
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;

	КонецЕсли;

	Если структЗадача.Этап = "ЕстьРезультат" Тогда
		Если структЗадача.Результат = "" Тогда
			структЗадача.Результат = ОбщийРезультат + Скрипты;
			ОбщийРезультат = "";
			Скрипты = "";
		КонецЕсли;
		Если НЕ ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Новый Структура("procid, taskid, Результат", procid, структЗадача.Запрос.taskid, структЗадача.Результат)) = Неопределено Тогда
			структЗадача.Этап = "УдалитьЗадачу";
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЗапросВыполнитьЗадачу()


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция УзелСвойствоЗначение(Узел, СвойствоИмя, СвойствоЗначение) Экспорт
	Если НЕ Узел = Неопределено Тогда
		Узел.Вставить(СвойствоИмя, СвойствоЗначение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСвойствоЗначение(Узел)


Функция УзелСостояние(Вкладка, Узел, СостояниеИмя) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если НЕ УзелСостояние = Неопределено Тогда
		УзелСостояние.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)


Функция УзелСостояниеЗначение(Вкладка, Узел, СостояниеИмя, СостояниеЗначение, Событие = Ложь) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если УзелСостояние = Неопределено Тогда
		УзелСостояние = Новый Структура();
		Вкладка.Состояния.Вставить(Узел.Код, УзелСостояние);
	КонецЕсли;
	УзелСостояние.Вставить(СостояниеИмя, СостояниеЗначение);
	//Сообщить("" + Вкладка.ИдВкладки + "_" + Узел.Код + " " + СостояниеИмя + "=" + (Лев(СостояниеЗначение,30)));
	Если СостояниеИмя = "ОбновитьУзел" И СостояниеЗначение = Истина Тогда
		Если Событие Тогда
			Вкладка.Данные.ОбновитьУзел(Узел);
		КонецЕсли;
		Вкладка.УзлыОбновить.Вставить(Узел);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСостояниеЗначение(Узел)


Функция ОбновитьСостояние(Вкладка, Узел, Состояние, Значение, Событие = Ложь, НачальныйУзел = Ложь) Экспорт

	Если Узел = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Данные = Вкладка.Данные;

	Результат = Истина;

	Если Состояние = "Изменить" Тогда
		// ОбновитьСостояние(Вкладка, Данные.Атрибут(Узел), "Изменить", Значение);
		// ОбновитьСостояние(Вкладка, Данные.Дочерний(Узел), "Изменить", Значение);
		// Если НЕ НачальныйУзел Тогда
		// 	ОбновитьСостояние(Вкладка, Данные.Соседний(Узел), "Изменить", Значение);
		// КонецЕсли;

	ИначеЕсли Состояние = "НовоеЗначениеУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Значение", Значение);

	ИначеЕсли Состояние = "НовоеИмяУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь, Истина);
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина, Истина);
		УзелСвойствоЗначение(Узел, "Имя", Значение);

	ИначеЕсли Состояние = "ОбновитьУзел" И Значение = Истина Тогда
		ОбновитьСостояние(Вкладка, Узел, "Представление", Неопределено, Ложь);

	ИначеЕсли Состояние = "Представление" И Значение = Неопределено Тогда
		Родитель = УзелСостояние(Вкладка, Узел, "Родитель");
		ОбновитьСостояние(Вкладка, Родитель, "Представление", Значение, Событие);

	КонецЕсли;

	Если НЕ Результат = Ложь Тогда
		УзелСостояниеЗначение(Вкладка, Узел, Состояние, Значение, Событие);
		Если НЕ Состояние = "ОбновитьУзел" И НЕ Состояние = "Представление" Тогда
			// Обновить все связанные вкладки
			Для каждого элВкладка Из Вкладки Цикл
				знВкладка = элВкладка.Значение;
				Если знВкладка.Данные = Вкладка.Данные Тогда
					знУзел = знВкладка.Данные.ПолучитьУзел(Узел.Код);
					Если НЕ знУзел = Неопределено Тогда
						ОбновитьСостояние(знВкладка, знУзел, "ОбновитьУзел", Истина, Событие);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбновитьСостояние()


// // Получить значение внешнего узла
// Функция ВнешнийУзел(Знач Узел, Аргументы, Объект) Экспорт
// 	БазаДанных = "" + УзелСвойство(Аргументы, "БазаДанных");
// 	ИмяДанных = "" + УзелСвойство(Аргументы, "ИмяДанных");
// 	ПозицияДанных = "" + УзелСвойство(Аргументы, "ПозицияДанных");
// 	Данные = ПолучитьДанные(БазаДанных, ИмяДанных, ПозицияДанных);
// 	Возврат Данные.ВнешнийЗначение(Узел, Объект);
// КонецФункции


Функция ВыполнитьДействия(структЗадача)
	Перем Вкладка;

	Действие = УзелСвойство(структЗадача, "Действие");

	Если Действие = Неопределено Тогда
		структЗадача.Запрос.Вставить("sdata", Источник);
		структЗадача.Запрос.Вставить("data", зИмяДанных);
		Действие = Команда["ОбновитьСтраницу"];
	КонецЕсли;

	// Если НЕ Действие = Неопределено Тогда

		Запрос = структЗадача.Запрос;

		Если Действие = "ПолучитьДанные" Тогда // загрузить данные с дата-сервера

			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				ИстДанных = Запрос.ИстДанных;
				БазаДанных = Запрос.БазаДанных;
				ИмяДанных = Запрос.ИмяДанных;
				ПозицияДанных = Запрос.ПозицияДанных;
				Если НЕ Запрос.ИмяШаблона = "" Тогда
					БазаДанных = "";
					ИмяДанных = Запрос.ИмяШаблона;
					ПозицияДанных = "";
				КонецЕсли;
				// Если ПозицияДанных = "" И НЕ БазаДанных = "" Тогда // новые данные
				// 	Запрос.Вставить("РезультатДанные", Новый Структура("Ответ", "Новые данные"));
				// Иначе
					стрЗапрос = Новый Структура("ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, Команда", ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, "ПолучитьДанные");
					стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
					Если НЕ ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрЗапрос) = Неопределено Тогда
						Запрос.Вставить("РезультатДанные", Неопределено); // теперь ждем ответа
					КонецЕсли;
				// КонецЕсли;
			КонецЕсли;

			Если НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				Сообщить(Запрос.РезультатДанные.Ответ);
				Текст = Неопределено;
				Если Запрос.РезультатДанные.Ответ = "Успешно" Тогда
					ТипДанных = "" + УзелСвойство(Запрос.РезультатДанные.Результат, "ТипДанных");
					Если ТипДанных = "2" Тогда // это файл
						Данные = Запрос.РезультатДанные.Результат.Данные;
					Иначе
						Текст = ПолучитьСтрокуИзДвоичныхДанных(Запрос.РезультатДанные.Результат.Данные);
					КонецЕсли;
				Иначе
					Текст = ""; // создаем новый файл
				КонецЕсли;
				Если НЕ Текст = Неопределено Тогда
					Данные = Новый pagedata(ЭтотОбъект, Текст, Запрос.БазаДанных, Запрос.ИмяДанных, Запрос.ПозицияДанных);
				КонецЕсли;
				ПутьДанные = Запрос.ИстДанных + "/" + Запрос.БазаДанных + "/" + Запрос.ИмяДанных + "/" + Запрос.ПозицияДанных;
				ВсеДанные.Вставить(ПутьДанные, Данные);
				Запрос.Удалить("РезультатДанные"); // данные загружены
				Возврат Истина;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = "ЗапросДанных" Тогда

			Если Запрос.Свойство("ЗапросДанных") Тогда
				Если Запрос.ЗапросДанных.Команда = "ЗагруженныеДанные" Тогда
					Позиция = 1;
					Для каждого элОбъектДанных Из ВсеДанные Цикл
						Заголовок = Новый Структура;
						ЗапросДанные = Новый Структура("Позиция, Заголовок", Позиция, Заголовок);
						ОбъектДанных = элОбъектДанных.Значение;
						Заголовок.Вставить("ИмяДанных", ОбъектДанных.ИмяДанных);
						Заголовок.Вставить("ПозицияДанных", ОбъектДанных.ПозицияДанных);
						Заголовок.Вставить("БазаДанных", ОбъектДанных.БазаДанных);
						Заголовок.Вставить("Размер", ОбъектДанных.Количество);
						Запрос.Данные.НовоеЗначениеУзла(Запрос.Свойства.д.Результат, ЗапросДанные, Истина, Истина);
						Позиция = Позиция + 1;
					КонецЦикла;
					//Запрос.Данные.ОбновитьУзел(Запрос.Узел);
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;

			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				стрЗапрос = Новый Структура("ЗапросДанных, Команда", Запрос.ЗапросДанных, "ЗапросДанных");
				ИстДанных = "" + УзелСвойство(Запрос.ЗапросДанных, "ИстДанных");
				Если ИстДанных = "" Тогда
					ИстДанных = Источник;
				КонецЕсли;
				стрЗапрос.Вставить("ИстДанных", ИстДанных);
				стрЗапрос.Вставить("БазаДанных", УзелСвойство(Запрос.ЗапросДанных, "БазаДанных"));
				стрЗапрос.Вставить("ИмяДанных", УзелСвойство(Запрос.ЗапросДанных, "ИмяДанных"));
				стрЗапрос.Вставить("ПозицияДанных", УзелСвойство(Запрос.ЗапросДанных, "ПозицияДанных"));
				стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
				Если НЕ ПередатьДанныеД(стрЗапрос) = Неопределено Тогда
					Запрос.Вставить("РезультатДанные", Неопределено);
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				РезультатДанные = Запрос.РезультатДанные;
				ЗапросДанные = РезультатДанные.Результат;
				Если РезультатДанные.Ответ = "ОшибкаПотокаДанных" Тогда
					// сообщить об ошибке
					Возврат "УдалитьЗадачу";
				ИначеЕсли ЗапросДанные.ЗаголовокНайден Тогда
					КонечнаяПозиция = "" + УзелСвойство(ЗапросДанные, "ПозицияДанных");
					Если НЕ КонечнаяПозиция = "" Тогда
						Запрос.Свойства.д.ЗапросДанных.д.КонечнаяПозиция.Значение = КонечнаяПозиция;
					КонецЕсли;
					Пока НЕ ЗапросДанные = Неопределено Цикл
						Запись = ЗапросДанные;
						ЗапросДанные = УзелСвойство(ЗапросДанные, "Соседний");
						Запись.Удалить("Соседний");
						Запрос.Данные.НовоеЗначениеУзла(Запрос.Свойства.д.Результат, Запись, Истина, Истина); // Добавить запись в источник данных
					КонецЦикла;
					Запрос.РезультатДанные = Неопределено;
					ЗадачаОбновитьВыполнить = Истина;
				КонецЕсли;
				Если РезультатДанные.Ответ = "ЗапросЗавершен" Тогда // все данные получены
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = "ФормыСлов" Тогда // запрос к серверу морфологии

			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				стрЗапрос = Новый Структура("Слова, ОбратныйЗапрос", Запрос.Слова, Новый Структура("ИдЗадачи, Хост, Порт", структЗадача.ИдЗадачи, Параметры.Хост, Порт));
				Если НЕ ПередатьДанные(Параметры.Хост, Параметры.ПортМ, стрЗапрос) = Неопределено Тогда
					Запрос.Вставить("РезультатДанные", Неопределено);
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ сервера
				РезультатДанные = Запрос.РезультатДанные;
				Запрос.Библиотека.ФормыСлов(Запрос.Данные, Запрос.Свойства, РезультатДанные.Результат);
				Запрос.РезультатДанные = Неопределено;
				Возврат Ложь;
			КонецЕсли;
			Возврат "Приостановить";

		// ИначеЕсли Действие = "ВыполнитьФункцию" Тогда
		// 	Результат = Запрос.Данные.ВызватьФункцию(Запрос.Узел, Запрос.ИмяФункции, структЗадача);
		// 	Если Результат = Истина Тогда
		// 		Запрос.Данные.ОбновитьУзел(Запрос.Узел);
		// 	КонецЕсли;
		// 	Возврат Результат;

		ИначеЕсли Действие = "file" Тогда
			Данные = ПолучитьДанные(структЗадача);
			Если Данные = Неопределено Тогда // пока нет данных
				Возврат "Продолжить";
			КонецЕсли;
			структЗадача.Результат = Данные;
			Возврат "ЕстьРезультат";

		ИначеЕсли Действие = Команда["Загрузка"] Тогда
			ПередатьДанныеД(Новый Структура("ИстДанных, БазаДанных, Заголовок, Команда, дДанные, неОбратныйЗапрос", Источник, "inbox", Новый Структура("ИмяДанных, ТипДанных", Запрос.filename, 2), "ЗаписатьДанные", Запрос.data, Неопределено));
			Возврат Истина;

		ИначеЕсли Действие = "redirect" Тогда
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьПеренаправить", Новый Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", Запрос.url, 0, ""));
			Возврат Истина;

		ИначеЕсли Действие = "ЗавершитьЗадачу" Тогда
			сЗадача = Задачи.Получить(Запрос.сЗадача);
			Если НЕ сЗадача = Неопределено Тогда
				Если сЗадача.Действие = "ЗапросДанных" Тогда
					стрЗапрос = Новый Структура("сЗадача, Команда", сЗадача.ИдЗадачи, "ЗавершитьЗадачу");
					ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрЗапрос);
				КонецЕсли;
				сЗадача.Этап = "УдалитьЗадачу";
			КонецЕсли;
			Возврат Ложь;

		ИначеЕсли Действие = Команда["ЗавершитьПроцесс"] Тогда
			Сообщить("Получена команда на завершение.");
			ОстановитьСервер = Истина;
			Возврат Ложь;

		ИначеЕсли Действие = Команда["ОстановитьСервер"] Тогда
			ОбщийРезультат = "<div id='data' class='my-4'><h3>завершение ...</h3></div>";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьПеренаправить", Новый Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", "/", 1000, ""));
			ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый Структура("cmd, procid", "stopserver", procid));
			Возврат Истина;

		ИначеЕсли Действие = Команда["ПерезапуститьСервер"] Тогда
			ОбщийРезультат = "<div id='data' class='my-4'><h3>перезапуск ...</h3></div>";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьПеренаправить", Новый Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", "/", 1500, ""));
			ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый Структура("cmd, procid", "restartserver", procid));
			Возврат Истина;

		ИначеЕсли Действие = Команда["ОбновитьДанные"] Тогда
			Возврат Истина;

		ИначеЕсли Действие = Команда["ОбновитьСтраницу"] Тогда
			Если НЕ Вкладки.Количество() Тогда
				Если НоваяВкладка(структЗадача) = Неопределено Тогда
					Возврат "ПродолжитьВыполнение";
				КонецЕсли;
			КонецЕсли;
			тВкладка = Вкладки.Получить(ТекущаяВкладка);
			Узел = тВкладка.Данные.ПолучитьУзел(тВкладка.ИдУзла);
			Представление = тВкладка.Данные.ОбновитьПредставление(Узел);
			Содержимое = "<div id='data'>";
			Для каждого элВкладка Из Вкладки Цикл
				Вкладка = элВкладка.Значение;
				Если Вкладка = тВкладка Тогда // текущую отобразить сразу
					Вкладка.ОбновитьУзел = Ложь;
					Содержимое = Содержимое + "<div class='my-4' id='" + Вкладка.ИдВкладки + "_0'>" + СтрЗаменить(Представление, "id='_", "id='" + тВкладка.ИдВкладки + "_") + "</div>";
					//Содержимое = Содержимое + "<script>tabselect(" + Вкладка.ТипВкладки + "," + Вкладка.ИдВкладки + "," + Вкладка.Прокрутка + ");</script>";
				Иначе
					Вкладка.ОбновитьУзел = Истина;
					Содержимое = Содержимое + "<div class='my-4' style='display: none;' id='" + Вкладка.ИдВкладки + "_0'><div id='" + Вкладка.ИдВкладки + "_" + Вкладка.ИдУзла + "'></div></div>";
				КонецЕсли;
			КонецЦикла;
			Содержимое = Содержимое + "</div><div id='win'></div>";
			Меню = "" + УзелСвойство(тВкладка, "Меню");
			Если Меню = "Нет" Тогда
				Меню = Шаблон.ПолучитьОбласть("ОбластьПанельНетМеню");
			ИначеЕсли Меню = "" Тогда
				Меню = Шаблон.ПолучитьОбласть(?(Субъект = "", "ОбластьПанельМеню1", "ОбластьПанельМеню2"));
			КонецЕсли;
			Заголовок = "" + УзелСвойство(тВкладка, "ЗаголовокСтраницы");
			ОбщийРезультат = НачальнаяСтраница(Содержимое, Заголовок, Меню);
			Если НЕ ЗадачаОбновить = Неопределено Тогда
				ЗадачаОбновить.Этап = "УдалитьЗадачу";
				ЗадачаОбновить = Неопределено;
			КонецЕсли;
			ЗадачаОбновитьВыполнить = Истина;
			ОбновитьВкладки = Истина;
			Возврат "ЕстьРезультат";

		ИначеЕсли Действие = Команда["СохранитьДанные"] Тогда
			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				Вкладка = Вкладки.Получить(ТекущаяВкладка);
				Если НЕ Вкладка = Неопределено Тогда
					Запрос.Вставить("ТекущаяВкладка", ТекущаяВкладка);
					ОбратныйЗапрос = Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи);
					Заголовок = Новый Структура("ИмяДанных, ТипДанных", Вкладка.Данные.ИмяДанных, 3);
					Если Запрос.Свойство("Заголовок") Тогда
						Для каждого св Из Запрос.Заголовок Цикл
							Заголовок.Вставить(св.Ключ, св.Значение);
						КонецЦикла;
					КонецЕсли;
					ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("ИстДанных, БазаДанных, Заголовок, Команда, дДанные, ОбратныйЗапрос", Источник, Вкладка.Данные.БазаДанных, Заголовок, "ЗаписатьДанные", ПолучитьДвоичныеДанныеИзСтроки(Вкладка.Данные.СохранитьДанные()), ОбратныйЗапрос));
					Запрос.Вставить("РезультатДанные", Неопределено);
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				стрСообщение = "Неизвестно";
				Вкладка = Вкладки.Получить(Число(Запрос.ТекущаяВкладка));
				Если НЕ Вкладка = Неопределено Тогда
					Ответ = Запрос.РезультатДанные.Ответ;
					ОтветСтатус = 2;
					Если Ответ = "Успешно" Тогда
						Если Запрос.Свойство("События") Тогда
							Вкладка.Данные.ДобавитьСобытие(Запрос.События, "savedata");
						КонецЕсли;
						Вкладка.Данные.ПозицияДанных = Запрос.РезультатДанные.Результат;
						Ответ = "Данные сохранены";
						ОтветСтатус = 1;
					КонецЕсли;
					ЗаписатьСобытие(Вкладка.Данные.БазаДанных + "/" + Вкладка.Данные.ИмяДанных + "/" + Вкладка.Данные.ПозицияДанных, Ответ, ОтветСтатус);
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = Команда["УстановитьПараметры"] Тогда
			УстановитьПараметры(структЗадача.Запрос);
			Возврат "УдалитьЗадачу";

		ИначеЕсли Действие = Команда["НоваяБаза"] Тогда
			стрСообщение = "";
			БазаДанных = УзелСвойство(Запрос, "sdb");
			Если НЕ "" + БазаДанных = "" Тогда
				Если НЕ Запрос.Свойство("РезультатДанные") Тогда // отправить запрос к дата-серверу
					ОбратныйЗапрос = Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи);
					ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("ИстДанных, БазаДанных, ОбратныйЗапрос, Команда", Источник, БазаДанных, ОбратныйЗапрос, "ПолучитьДанные"));
					Запрос.Вставить("РезультатДанные", Неопределено);
				ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
					Если Запрос.РезультатДанные.Ответ = "Успешно" Тогда
						стрСообщение = "Создана новая база данных " + БазаДанных;
						кСооб = 1;
					Иначе
						// Сообщить об ошибке
						стрСообщение = Запрос.РезультатДанные.Ответ;
						кСооб = 3;
					КонецЕсли;
					ЗаписатьСобытие(БазаДанных, стрСообщение, кСооб);
					Возврат Истина;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			Возврат "Приостановить";

		КонецЕсли;

		datascrolled = "" + УзелСвойство(Запрос, "datascrolled");
		Если НЕ datascrolled = "" И НЕ datascrolled = "undefined" Тогда
			Если НЕ ТекущиеДанные = Неопределено Тогда
				ТекущиеДанные.Вставить("Прокрутка", datascrolled);
			КонецЕсли;
		КонецЕсли;

		winscrolled = "" + УзелСвойство(Запрос, "winscrolled");
		Если НЕ winscrolled = "" И НЕ winscrolled = "undefined" Тогда
			Если НЕ ТекущееОкно = Неопределено Тогда
				ТекущееОкно.Вставить("Прокрутка", winscrolled);
			КонецЕсли;
		КонецЕсли;

		Если Действие = Команда["НоваяВкладка"] Тогда
			Если НЕ структЗадача.Запрос.Свойство("sdata") Тогда
				структЗадача.Запрос.Вставить("sdata", Источник);
			КонецЕсли;
			Если НоваяВкладка(структЗадача) = Неопределено Тогда
				Возврат "ПродолжитьВыполнение";
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;

		Если Действие = Команда["РежимРедактор"] Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "design";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимРедактор");
			ОбновитьВкладки = Истина;
			Возврат Истина;
		КонецЕсли;

		Если Действие = Команда["РежимПросмотр"] Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "view";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимПросмотр");
			ОбновитьВкладки = Истина;
			Возврат Истина;
		КонецЕсли;

		tab = "" + УзелСвойство(Запрос, "tab");
		Если НЕ tab = "" И НЕ tab = "undefined" Тогда
			Если tab = "current" Тогда
				tab = ТекущаяВкладка;
			Иначе
				tab = Число(tab);
			КонецЕсли;
			Вкладка = Вкладки.Получить(tab);
			Если Вкладка = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;

			Если Действие = Команда["ЗакрытьВкладку"] Тогда
				ОбщийРезультат = ОбщийРезультат + "<div id='" + tab + "_0'/>";
				Если Вкладка = ТекущиеДанные Тогда
					ТекущиеДанные = Неопределено;
				ИначеЕсли Вкладка = ТекущееОкно Тогда
					ТекущееОкно = Неопределено;
				КонецЕсли;

				Вкладки.Удалить(tab);
				удВкладка = Вкладка;

				Если tab = ТекущаяВкладка Тогда
					ТекущаяВкладка = Неопределено;
					пВкладка = Неопределено;
					Для каждого элВкладка Из ВкладкиСписок Цикл
						знВкладка = элВкладка.Значение;
						Если знВкладка = удВкладка Тогда
							tab = Неопределено;
							Продолжить;
						КонецЕсли;
						Если tab = Неопределено И НЕ пВкладка = Неопределено Тогда
							Прервать;
						КонецЕсли;
						пВкладка = знВкладка;
					КонецЦикла;
					Если НЕ пВкладка = Неопределено Тогда
						ТекущаяВкладка = пВкладка.ИдВкладки;
						Если пВкладка.ТипВкладки = "data" Тогда
							ТекущиеДанные = пВкладка;
						ИначеЕсли пВкладка.ТипВкладки = "win" Тогда
							ТекущееОкно = пВкладка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Вкладка = ВкладкиСписок.НайтиПоЗначению(удВкладка);
				Если НЕ Вкладка = Неопределено Тогда
					ВкладкиСписок.Удалить(Вкладка);
				КонецЕсли;

				Если ВкладкиСписок.Количество() = Вкладки.Количество() Тогда // нет свойств
					ОбщийРезультат = ОбщийРезультат + "<script>$('body').removeClass('aside-menu-show');</script>";
				КонецЕсли;

				ОбновитьВкладки = Истина;
				Возврат Истина;
			КонецЕсли;

			Если Действие = Команда["ВыбратьВкладку"] Тогда
				ТекущаяВкладка = tab;
				Если Вкладка.ТипВкладки = "data" Тогда
					ТекущиеДанные = Вкладка;
					ТекущееОкно = Неопределено;
				КонецЕсли;
				Если Вкладка.ТипВкладки = "win" Тогда
					ТекущееОкно = Вкладка;
				КонецЕсли;
				//Вкладка.ОбновитьУзел = Истина;
				ОбновитьВкладки = Истина;
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;

		ИдУзла = УзелСвойство(структЗадача.Запрос, "nodeid");

		Если ИдУзла = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		НайтиИдУзла = Найти(ИдУзла, "_");
		Если НайтиИдУзла Тогда
			НайтиИдВкладки = Число(Лев(ИдУзла, НайтиИдУзла - 1));
			Вкладка = Вкладки.Получить(НайтиИдВкладки);
			ИдУзла = Сред(ИдУзла, НайтиИдУзла + 1);
		Иначе
			//Возврат Ложь;
		КонецЕсли;

		Если Вкладка = Неопределено Тогда
			Если НЕ ТекущаяВкладка = Неопределено Тогда
				Вкладка = Вкладки.Получить(ТекущаяВкладка);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Данные = Вкладка.Данные;
		Если Данные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Узел = Данные.ПолучитьУзел(ИдУзла);

		Если Узел = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Если Действие = Команда["Авторизация"] ИЛИ Действие = Команда["Регистрация"] Тогда
			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				стрЗапрос = Новый Структура("ЗапросДанные, Команда", Запрос, Действие);
				стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
				Если НЕ ПередатьДанныеД(стрЗапрос) = Неопределено Тогда
					Запрос.Вставить("РезультатДанные", Неопределено);
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				РезультатДанные = Запрос.РезультатДанные;
				ЗапросДанные = РезультатДанные.Результат;
				Если РезультатДанные.Ответ = "ОшибкаПотокаДанных" Тогда
					// сообщить об ошибке
					Возврат "УдалитьЗадачу";
				КонецЕсли;
				// прежние свойства нужно удалить
				Если НЕ Узел.Дочерний = Неопределено Тогда
					Данные.УдалитьУзел(Узел.Дочерний, , Истина);
				КонецЕсли;
				кУзел = Узел;
				Для каждого Параметр Из ЗапросДанные Цикл
					стрУзел = ИмяЗначение(Параметр.Ключ, Параметр.Значение);
					кУзел = Данные.НовыйДочерний(Узел, стрУзел, Истина, Истина);
				КонецЦикла;
				Если ЗапросДанные.ПрошелАвторизацию Тогда
					Субъект = ЗапросДанные.unm;
					Источник = Субъект;
					ИзменитьАдрес();
					НоваяЗадача(Новый Структура("tab, cmd", "current", "tabclose"), "Служебный");
					НоваяЗадача(Новый Структура("sdata, data, cmd", "", "expldb", "newtab"), "Служебный");
					ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьПанельМеню2");
				КонецЕсли;
				Данные.ОбновитьУзел(Узел);
				Возврат Истина;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = Команда["ПриИзменении"] Тогда
			ЗначениеПоля = УзелСвойство(Запрос, "value");
			Если НЕ ЗначениеПоля = Неопределено Тогда
				Данные.ДобавитьСобытие(Узел, "ПриИзменении", ЗначениеПоля);
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["ПриНажатии"] Тогда
			ЗначениеНадпись = УзелСвойство(Запрос, "role");
			Данные.ДобавитьСобытие(Узел, "ПриНажатии", ЗначениеНадпись);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ПриОтправке"] Тогда
			Данные.ДобавитьСобытие(Узел, "ПриОтправке", Запрос);
			Возврат Истина;

		ИначеЕсли Действие = Команда["МенюРедактора"] Тогда
			ОбщийРезультат = ОбщийРезультат + ПоказатьМенюИнструменты(Вкладка, Узел, УзелСвойство(Запрос, "attr") = "1");
			Возврат Истина;

		ИначеЕсли Действие = Команда["ОткрытьУзел"] Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

		ИначеЕсли Действие = Команда["ЗакрытьУзел"] Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Ложь);

		ИначеЕсли Действие = Команда["РедактироватьЗначение"] Тогда
			// Если УзелСвойство(Запрос, "attr") = "1" Тогда
			// 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			// КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина);

		ИначеЕсли Действие = Команда["НовоеЗначениеУзла"] Тогда
			// Если УзелСвойство(Запрос, "attr") = "1" Тогда
			// 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			// КонецЕсли;
			Если Запрос.Свойство("valuedit") Тогда
				Данные.ОбновитьУзел(Узел);
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь);
			КонецЕсли;

		ИначеЕсли Действие = Команда["РедактироватьИмя"] Тогда

			// Если УзелСвойство(Запрос, "attr") = "1" Тогда
			// 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			// КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Истина);

		ИначеЕсли Действие = Команда["СвойстваУзла"] Тогда

			ПоказатьСвойство = (УзелСвойство(Запрос, "show") = "true");

			Если НЕ Вкладка.Режим = "design" Тогда // показать объект
				Если ПоказатьСвойство Тогда
					ТекущееОкно = НоваяСтруктураВкладка(Вкладка.Данные, "win", Узел.Значение, "view", Узел.Код);
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;

			вклСвойства = Неопределено;
			Для каждого элВкладка Из Вкладки Цикл
				Вкладка = элВкладка.Значение;
				Если Вкладка.ТипВкладки = "prop" И Вкладка.ИдУзла = Узел.Код Тогда // уже есть такая
					вклСвойства = Вкладка;
					ОбщийРезультат = ОбщийРезультат + "<script>showprop('#" + вклСвойства.ИдВкладки + "_0');</script>";
					ПоказатьСвойство = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если вклСвойства = Неопределено И ПоказатьСвойство Тогда
				вклСвойства = НоваяСтруктураВкладка(Данные, "prop", СтрЭкранироватьРазметку(Данные.ИмяДанных , 20), "struct", Узел.Код);
				ОбновитьСостояние(вклСвойства, Узел, "УзелОткрыт", Истина);
			КонецЕсли;

			запрСвойства = УзелСвойство(Запрос, "prop");
			Если НЕ "" + запрСвойства = "" Тогда // установить значения свойств формы объекта
				фУзел = Данные.ПолучитьУзел(Запрос.propid);
				мсв = СтрРазделить(запрСвойства, ";");
				усв = Неопределено;
				Для каждого эл Из мсв Цикл
					элм = СтрРазделить(эл, "=");
					Если фУзел.д.Свойство(элм[0], усв) Тогда
						усв.Вставить("Значение", элм[1]);
						Данные.ОбновитьУзел(усв);
						Если ПоказатьСвойство Тогда
							ОбновитьСостояние(вклСвойства, усв, "ОбновитьУзел", Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Возврат ПоказатьСвойство;

		ИначеЕсли Действие = Команда["РедактироватьУзел"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + "  " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "struct", Узел.Код);
			Возврат ОбновитьСостояние(ТекущееОкно, Узел, "РедактироватьУзел", Истина);

		ИначеЕсли Действие = Команда["ИзменитьНачальныйУзел"] Тогда

			Вкладка.ИдУзла = Узел.Код;
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			ОбновитьВкладки = Истина;
			Вкладка.ОбновитьУзел = Истина;
			Возврат Истина;

		ИначеЕсли Действие = Команда["ЗагрузитьДерево"] Тогда

			СтруктураЗагрузить = УзелСвойство(Запрос, "enc_value");
			Если СтруктураЗагрузить = Неопределено Тогда
				ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20) + " import", "struct", Узел.Код);
				ОбновитьСостояние(ТекущееОкно, Узел, "ЗагрузитьДерево", Истина);
			Иначе
				// Вызвать обработку импорта
				Данные.СоздатьСвойства(Узел, СтруктураЗагрузить);
				структЗадача.Вставить("Действие", Команда["ЗакрытьВкладку"]);
				Вкладка.ОбновитьУзел = Истина;
				Возврат "Продолжить";
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["ЗагрузитьHTML"] Тогда

			СтруктураHTML = УзелСвойство(Запрос, "enc_value");
			Если СтруктураHTML = Неопределено Тогда
				ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20) + " import", "struct", Узел.Код);
				ОбновитьСостояние(ТекущееОкно, Узел, "ЗагрузитьHTML", Истина);
			Иначе
				// Вызвать обработку импорта
				СтруктураHTML = СтрРазделить(СтруктураHTML, Символы.ПС);
				дУзел = Данные.НовыйДочерний(Узел, ИмяЗначение());
				Данные.ЗагрузитьHTML(дУзел, СтруктураHTML, 0);
				ОбновитьСостояние(Вкладка, Узел, "ЗагрузитьHTML", Ложь);
				ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
				ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);
				ОбновитьВкладки = Истина;
				Вкладка.ОбновитьУзел = Истина;
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["НайтиУзел"] Тогда

			НомерУзла = "" + УзелСвойство(Запрос, "nodenumber");
			ЗначениеУзла = "" + УзелСвойство(Запрос, "nodevalue");
			Если НомерУзла + ЗначениеУзла = "" Тогда
				ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " Найти узел", "struct", Узел.Код);
				ОбновитьСостояние(ТекущееОкно, Узел, "НайтиУзел", Истина);
			Иначе
				Если НЕ НомерУзла = "" Тогда
					Узел = Данные.НайтиПоКоду(НомерУзла, Данные.Корень);
				ИначеЕсли НЕ ЗначениеУзла = "" Тогда
					Узел = Данные.НайтиУзел(Данные.Корень, ЗначениеУзла);
				КонецЕсли;
				Если НЕ Узел = Неопределено Тогда
					Вкладка.ИдУзла = Узел.Код;
					ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
					ОбновитьВкладки = Истина;
					Вкладка.ОбновитьУзел = Истина;
				КонецЕсли;
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовоеИмяУзла"] Тогда
			// Если УзелСвойство(Запрос, "attr") = "1" Тогда
			// 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			// КонецЕсли;
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь);
			КонецЕсли;

		ИначеЕсли Действие = Команда["СохранитьУзел"] Тогда
			// Если УзелСвойство(Запрос, "attr") = "1" Тогда
			// 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			// КонецЕсли;
			ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.name);
			ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.value);
			структЗадача.Вставить("Действие", Команда["ЗакрытьВкладку"]);
			Возврат "Продолжить";

		ИначеЕсли Действие = Команда["НовыйАтрибут"] Тогда
			НовыйУзел = Данные.НовыйАтрибут(Узел, ИмяЗначение("", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["НовыйДочерний"] Тогда
			НовыйУзел = Данные.НовыйДочерний(Узел, ИмяЗначение("", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовыйСоседний"] Тогда
			НовыйУзел = Данные.НовыйСоседний(Узел, ИмяЗначение("", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовыйРодитель"] Тогда
			НовыйУзел = Данные.НовыйРодитель(Узел, ИмяЗначение("", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел, "УзелОткрыт", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["УдалитьУзел"] Тогда
			ДанныеРодительУзел = Узел.Родитель;
			Данные.УдалитьУзел(Узел);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["КопироватьУзел"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел;
			БуферДанные = Данные;
			Данные.КопироватьУзел(Узел, Буфер);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ВырезатьУзел"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел;
			БуферДанные = Данные;
			Данные.КопироватьУзел(Узел, Буфер);
			ДанныеРодительУзел = Узел.Родитель;
			Данные.УдалитьУзел(Узел, Ложь);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ВставитьАтрибут"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел, Истина, , Ложь);
				НовыйУзел.Вставить("ЭтоАтрибут", Истина);
				НовыйУзел.Вставить("Атрибут", Неопределено);
				//НовыйУзел.Вставить("Дочерний", Неопределено);
				УзелАтрибут = Узел.Атрибут;
				Узел.Вставить("Атрибут", НовыйУзел);
				Если НЕ УзелАтрибут = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелАтрибут);
					УзелАтрибут.Вставить("Старший", НовыйУзел);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["ВставитьДочерний"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел, , , Ложь);
				УзелДочерний = Узел.Дочерний;
				Узел.Вставить("Дочерний", НовыйУзел);
				Если НЕ УзелДочерний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелДочерний);
					УзелДочерний.Вставить("Старший", НовыйУзел);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина, Истина);

		ИначеЕсли Действие = Команда["ВставитьСоседний"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел.Родитель, , , Ложь);
				УзелСоседний = Узел.Соседний;
				Узел.Вставить("Соседний", НовыйУзел);
				Если НЕ УзелСоседний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелСоседний);
					УзелСоседний.Вставить("Старший", НовыйУзел);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["УдалитьАтрибуты"] Тогда
			Если НЕ Узел.Атрибут = Неопределено Тогда
				Данные.УдалитьУзел(Узел.Атрибут, Ложь);
				//Узел.Удалить("Атрибут");
				Узел.Атрибут = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["УдалитьРодителя"] Тогда
			Если НЕ УзелСвойство(Узел, "Родитель") = Неопределено Тогда
				Данные.УдалитьРодителя(Узел);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["СтруктураДанных"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "struct", Узел.Код);
			ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ЗначениеУзла"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Вкладка.Данные, "win", Вкладка.Данные.ИмяДанных + " Значение " + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "view", Узел.Код);
			Возврат Истина;

		// ИначеЕсли Действие = Команда["ЗначениеОбъекта"] Тогда
		//
		// 	Вкладка.Данные.ПолучитьОпределениеОбъекта(Узел);
		// 	ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
		// 	ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина);
		// 	Возврат Истина;

		КонецЕсли;
	// КонецЕсли;

	Возврат Ложь;

КонецФункции // ВыполнитьДействия()


Функция ПолучитьБиблиотеку(Знач ИмяБиблиотеки, Версия = "") Экспорт
	Если НЕ Версия = "" Тогда
		ИмяБиблиотеки = ОбъединитьПути(ИмяБиблиотеки, ИмяБиблиотеки + "-" + Версия);
	КонецЕсли;
	Библиотека = Библиотеки.Получить(ИмяБиблиотеки);
	Если Библиотека = Неопределено Тогда
		Библиотека = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "lib", ИмяБиблиотеки + ".os"));
		Библиотеки.Вставить(ИмяБиблиотеки, Библиотека);
		Если Библиотека = Неопределено Тогда
			ВызватьИсключение "Библиотека " + ИмяБиблиотеки + " не найдена";
		КонецЕсли;
	КонецЕсли;
	Возврат Библиотека;
КонецФункции // ПолучитьБиблиотеку()


Функция ИзменитьАдрес() Экспорт
	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьИзменитьАдрес", Новый Структура("ПараметрПуть", "/procid/" + procid));
КонецФункции // ИзменитьАдрес()


Функция ПередатьДанныеД(стрДанные) Экспорт
	Возврат ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрДанные);
КонецФункции // ПередатьДанныеД()


Функция ПередатьДанные(Хост, Порт, стрДанные) Экспорт
	стрДанные.Вставить("ИдПроцесса", procid);
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 5000;
		Соединение.ОтправитьДвоичныеДанныеАсинхронно(СтруктуруВДвоичныеДанные(стрДанные));
		//Соединение.Закрыть();
		СоединенияП.Вставить(Соединение, Истина);
		Возврат Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Если Соединение = Неопределено Тогда
			Сообщить("showdata: Хост недоступен: " + Хост + ":" + Порт);
		Иначе
			Соединение.Закрыть();
			Соединение = Неопределено;
		КонецЕсли;
	КонецПопытки;
	Возврат Соединение;
КонецФункции // ПередатьДанные()


Функция ЗаписатьСобытие(стрЗаголовок, стрСообщение, ТипСобытия = 0, ПараметрКоманда = "") Экспорт
	Сообщить(стрСообщение);
	ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("БазаДанных, Заголовок, Команда", "log", Новый Структура("Источник, Субъект, Тип, Сообщение", стрЗаголовок, Субъект, ТипСобытия, стрСообщение), "ЗаписатьЗаголовок"));

	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьУведомление",
		Новый Структура("ПараметрТекстУведомления, ПараметрЗаголовокУведомления, ПараметрТипУведомления, ПараметрКоманда",
			стрСообщение, стрЗаголовок, ТипСобытия,	ПараметрКоманда));
КонецФункции // ЗаписатьСобытие()


Функция НоваяЗадача(Запрос, Тип = "Запрос", ЗадачаВладелец = Неопределено) Экспорт
	Перем ИдЗадачи;
	Если Запрос.Свойство("ИдЗадачи", ИдЗадачи) Тогда
		Задача = Задачи.Получить(ИдЗадачи);
		Если НЕ Задача = Неопределено Тогда
			Если Запрос.Свойство("РезультатДанные") Тогда
				//Сообщить("РезультатДанные задача=" + Задача.ИдЗадачи + " " + УзелСвойство(Задача.Запрос, "cmd") + " время=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Задача.ВремяНачало));
				Задача.Этап = "ВыполнитьЗадачу";
				Задача.Запрос.Вставить("РезультатДанные", Запрос.РезультатДанные);
			ИначеЕсли Запрос.cmd = "taskend" Тогда
				Задача.Этап = "УдалитьЗадачу";
			КонецЕсли;
		Иначе
			Сообщить("Задача не найдена ИдЗадачи=" + ИдЗадачи);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Если НЕ Запрос.Свойство("taskid", ИдЗадачи) Тогда
			ИдЗадачи = "" + ПолучитьИД();
		КонецЕсли;
		структЗадача = Новый Структура("ИдЗадачи, Тип, Этап, Запрос, Действие, Результат, ВремяНачало, ЗадачаВладелец", ИдЗадачи, Тип, "ВыполнитьЗадачу", Запрос, Неопределено, "", ТекущаяУниверсальнаяДатаВМиллисекундах(), ЗадачаВладелец);
		структЗадача.Запрос.Свойство("cmd", структЗадача.Действие);
		Сообщить("Новая задача " + Тип + "=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd"));
		Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
	КонецЕсли;
	Возврат структЗадача;
КонецФункции


Процедура ОбработатьСоединения()

	Порт = АргументыКоманднойСтроки[0];

	Шаблон = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "template.os"));
	Шаблон.ЗагрузитьМакет(ОбъединитьПути(ТекущийКаталог(), "resource", "showdata.html"));

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

	procid = "0";

	ОбщийРезультат = "";
	Скрипты = "";

	Локальный = Ложь;

	Библиотеки = Новый Соответствие;
	ВсеДанные = Новый Соответствие;

	Соединения = Новый Соответствие;
	СоединенияП = Новый Соответствие;

	Таймаут = 10;

	TCPСервер = Новый TCPСервер(Порт);
	TCPСервер.ЗапуститьАсинхронно();
	Сообщить("Контроллер запущен на порту: " + Порт);

	ВкладкиСписок = Новый СписокЗначений;
	Вкладки = Новый Соответствие;
	ИдВкладки = 0;

	Буфер = Неопределено;

	Задачи = Новый Соответствие;

	ЗадачаОбновитьВыполнить = Ложь;
	ОстановитьСервер = Ложь;
	ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Пока Истина Цикл

		НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();

		Если НЕ Локальный Тогда
			Если НЕ procid = "0" Тогда // новый процесс не завершаем
				бВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало;
				Если бВремя > 1000 * 30 * 60 Тогда // бездействие 30 мин
					Сообщить("Контроллер procid=" + procid + " простаивает.");
					ОбщийРезультат = "<div id='tabs' /><div class='win' /><div id='data' class='my-4'><h3>сеанс завершен</h3></div><script>aupd=false</script>";
					ЗадачаОбновитьВыполнить = Истина;
					ОстановитьСервер = Истина;
				ИначеЕсли ЗадачаОбновить = Неопределено И Субъект = "" И бВремя > 1000 * 3 * 60 Тогда // бездействие 3 мин
					ОстановитьСервер = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// обработать данные
		мДанные = Новый Массив;
		Для каждого элДанные Из ВсеДанные Цикл
			Данные = элДанные.Значение;
			Если ТипЗнч(Данные) = Тип("pagedata") Тогда
				мДанные.Добавить(Данные);
			КонецЕсли;
		КонецЦикла;
		Для каждого Данные Из мДанные Цикл
			Данные.ОбновитьПредставление();
			Если НЕ Данные.Представление = "" Тогда
				ЗадачаОбновитьВыполнить = Истина;
			КонецЕсли;
		КонецЦикла;

		// обработать задачи
		Если Задачи.Количество() Тогда
			ПереченьЗадач = Новый СписокЗначений;
			Для каждого элЗадача Из Задачи Цикл
				ПереченьЗадач.Добавить(ЭлЗадача.Значение, элЗадача.Ключ);
			КонецЦикла;
			ПереченьЗадач.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
			АктивныеЗадачи = 0;
			Для каждого элПеречень Из ПереченьЗадач Цикл
				структЗадача = элПеречень.Значение;
				Если структЗадача.Этап = "УдалитьЗадачу" Тогда
					Если структЗадача = ЗадачаОбновить Тогда
						ЗадачаОбновить = Неопределено;
					КонецЕсли;
					Сообщить("Завершил задачу=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd") + " время=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - структЗадача.ВремяНачало));
					Задачи.Удалить(структЗадача.ИдЗадачи);
					Продолжить;
				КонецЕсли;
				Если структЗадача.Этап = "Приостановить" Тогда
					АктивныеЗадачи = АктивныеЗадачи + 1;
					Продолжить;
				КонецЕсли;
				Если структЗадача.Действие = Команда["ОбновитьДанные"] Тогда
					Если ЗадачаОбновить = Неопределено Тогда
						// Если НЕ ЗадачаОбновитьВремя = Неопределено Тогда
						// 	Сообщить("Время отклика: " + (ПолучитьИД() - ЗадачаОбновитьВремя));
						// КонецЕсли;
						ЗадачаОбновить = структЗадача;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Попытка
					ЗапросВыполнитьЗадачу(структЗадача);
				Исключение
					Сообщить(ОписаниеОшибки());
					структЗадача.Этап = "УдалитьЗадачу";
				КонецПопытки;
				ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
				Если ВремяЦикла > 100 ИЛИ АктивныеЗадачи > 10 Тогда // если много задач прервемся для обмена
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЗадачаОбновить = Неопределено И ЗадачаОбновитьВыполнить Тогда
				ЗадачаОбновитьВыполнить = Ложь;
				Попытка
					ЗапросВыполнитьЗадачу(ЗадачаОбновить);
				Исключение
					Сообщить(ОписаниеОшибки());
					ЗадачаОбновить.Этап = "УдалитьЗадачу";
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

		Если ОстановитьСервер Тогда
			Прервать;
		КонецЕсли;

		Соединение = TCPСервер.ПолучитьСоединение(Таймаут);

		Если НЕ Соединение = Неопределено Тогда

			//Соединение.ТаймаутОтправки = 5000;
			Соединение.ТаймаутЧтения = 5000;

			Соединение.ПрочитатьДвоичныеДанныеАсинхронно();
			Соединения.Вставить(Соединение, Новый Массив);

		КонецЕсли;

		Для каждого зСоединение Из Соединения Цикл
			Соединение = зСоединение.Ключ;
			мДанные = зСоединение.Значение;
			Если Соединение.Статус = "Успех" Тогда

				Попытка
					Запрос = Неопределено;
					дд = Соединение.ПолучитьДвоичныеДанные();
					Если НЕ дд.Размер() = 0 Тогда
						мДанные.Добавить(дд);
						Запрос = ДвоичныеДанныеВСтруктуру(СоединитьДвоичныеДанные(мДанные));
					КонецЕсли;
				Исключение
					Сообщить("showdata: " + ОписаниеОшибки());
				КонецПопытки;

				Если Запрос = Неопределено Тогда
					//Соединения.Вставить(Соединение, мДанные);
					//Сообщить("не полный ответ");
					Продолжить;
				КонецЕсли;

				ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				НоваяЗадача(Запрос);

				Соединение.Закрыть();
				Соединения.Удалить(Соединение);
				Прервать;

			ИначеЕсли Соединение.Статус = "Ошибка" Тогда

				Соединения.Удалить(Соединение);
				Прервать;

			Иначе

				//ПустойЦикл = ПустойЦикл + 1;

			КонецЕсли;

		КонецЦикла;

		Для каждого зСоединение Из СоединенияП Цикл
			Соединение = зСоединение.Ключ;
			Если НЕ Соединение.Статус = "Занят" Тогда
				Соединение.Закрыть();
				СоединенияП.Удалить(Соединение);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
		Если ВремяЦикла > 100 Тогда
			Сообщить("!showdata ВремяЦикла=" + ВремяЦикла);
		КонецЕсли;
		Таймаут = ?(ВремяЦикла > 10, 0, 10);

	КонецЦикла;

	TCPСервер.Остановить();
	// оповещение о завершении
	Если НЕ Параметры = Неопределено Тогда
		ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Новый Структура("procid, cmd", procid, "termproc"));
		ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("procid, cmd", procid, "termproc"));
		ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый Структура("procid, cmd", procid, "termproc"));
	КонецЕсли;
	Приостановить(150);
	Сообщить("Процесс procid=" + procid + " завершен.");

КонецПроцедуры


МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();

Команда = Новый Соответствие;

Команда.Вставить("ОбновитьСтраницу", "refresh");
Команда.Вставить("ОткрытьУзел", "nodeopen");
Команда.Вставить("ЗакрытьУзел", "nodeclose");
Команда.Вставить("ОбновитьУзел", "nodereload");
Команда.Вставить("ИзменитьНачальныйУзел", "changenode");
Команда.Вставить("НоваяВкладка", "newtab");
Команда.Вставить("НоваяБаза", "newdb");
Команда.Вставить("ВыбратьВкладку", "tabselect");
Команда.Вставить("ЗакрытьВкладку", "tabclose");
Команда.Вставить("РедактироватьЗначение", "valuedit");
Команда.Вставить("ЗначениеУзла", "showvalue");
// Команда.Вставить("ЗначениеОбъекта", "showenv");
Команда.Вставить("НовоеЗначениеУзла", "submitvalue");
Команда.Вставить("НовоеИмяУзла", "submitname");
Команда.Вставить("РедактироватьИмя", "namedit");
Команда.Вставить("РедактироватьУзел", "editnode");
Команда.Вставить("СвойстваУзла", "nodeprop");
Команда.Вставить("ЗагрузитьHTML", "importhtml");
Команда.Вставить("ЗагрузитьДерево", "importtree");
Команда.Вставить("НайтиУзел", "findnode");
Команда.Вставить("СохранитьУзел", "savenode");
Команда.Вставить("НовыйРодитель", "paradd");
Команда.Вставить("НовыйАтрибут", "attradd");
Команда.Вставить("НовыйДочерний", "childadd");
Команда.Вставить("СтруктураДанных", "structwin");
Команда.Вставить("СохранитьДанные", "savedata");
Команда.Вставить("РежимРедактор", "designmode");
Команда.Вставить("РежимПросмотр", "viewmode");
Команда.Вставить("ОбновитьДанные", "upddata");
Команда.Вставить("ПриИзменении", "onchange");
Команда.Вставить("ПриНажатии", "onclick");
Команда.Вставить("ПриОтправке", "onsubmit");
Команда.Вставить("МенюРедактора", "designmenu");
Команда.Вставить("НовыйСоседний", "nextadd");
Команда.Вставить("УдалитьУзел", "noderemove");
Команда.Вставить("КопироватьУзел", "nodecopy");
Команда.Вставить("ВырезатьУзел", "nodecut");
Команда.Вставить("ВставитьАтрибут", "nodepasteattr");
Команда.Вставить("ВставитьДочерний", "nodepastechild");
Команда.Вставить("ВставитьСоседний", "nodepastenext");
Команда.Вставить("УдалитьАтрибуты", "attremove");
Команда.Вставить("УдалитьРодителя", "parremove");
Команда.Вставить("ЗавершитьПроцесс", "termproc");
Команда.Вставить("ОстановитьСервер", "stopserver");
Команда.Вставить("ПерезапуститьСервер", "restartserver");
Команда.Вставить("Авторизация", "auth");
Команда.Вставить("Регистрация", "reg");
Команда.Вставить("УстановитьПараметры", "init");
Команда.Вставить("Загрузка", "upload");

Если АргументыКоманднойСтроки.Количество() Тогда
	ОбработатьСоединения();
КонецЕсли;
