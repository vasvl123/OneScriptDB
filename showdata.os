// MIT License
// Copyright (c) 2019 Vladimir Vasiliev
// https://github.com/vasvl123/OneScriptDB


Перем procid Экспорт;
Перем Шаблон;
Перем Буфер, БуферДанные, БуферУзел;
Перем Параметры;
Перем Вкладки, ВкладкиСписок, ИдВкладки;
Перем ОбновитьВкладки;
Перем ТекущаяВкладка, ТекущиеДанные, ТекущееОкно;
Перем Задачи;
Перем ЗадачаОбновитьВыполнить Экспорт;
Перем ОбщийРезультат;
Перем Команда;
Перем ВсеДанные Экспорт;
Перем зИмяДанных;
Перем ОстановитьСервер;
Перем Субъект Экспорт;
Перем ПараметрХост;
Перем Локальный;
Перем МоментЗапуска;
Перем УдаленныйУзел Экспорт;


Функция ПолучитьИД()
	МоментЗапуска = МоментЗапуска - 1;
	Возврат Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска);
КонецФункции // ПолучитьИД()


Функция РазмерПоля(Знач Стр)
	Размер = Цел(СтрДлина(стр)/3);
	Если Размер < 3 Тогда
		Размер = 3;
	ИначеЕсли Размер > 12 Тогда
		Размер = 12;
	КонецЕсли;
	Возврат Строка(Размер);
КонецФункции


Функция СтрЭкранироватьРазметку(Знач Стр, огрДлины = 0)
	Стр = СтрЗаменить(Стр, "&", "&amp;");
	Стр = СтрЗаменить(Стр, """", "&quot;");
	Стр = СтрЗаменить(Стр, "'", "&#39;");
	Стр = СтрЗаменить(Стр, "<", "&lt;");
	Стр = СтрЗаменить(Стр, ">", "&gt;");
	Стр = СтрЗаменить(Стр, Символы.ПС, "<br/>");
	Если огрДлины > 0 Тогда
		длСтр = СтрДлина(Стр);
		Если длСтр > огрДлины Тогда
			Стр = Лев(Стр, огрДлины) + " ...";
		КонецЕсли;
	КонецЕсли;
	Возврат Стр;
КонецФункции


Функция СтруктуруВДвоичныеДанные(знСтруктура)
	Результат = Новый Массив;
	Если НЕ знСтруктура = Неопределено Тогда
		Для каждого Элемент Из знСтруктура Цикл
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
				Ключ = "#" + Ключ;
				дЗначение = Значение;
			Иначе
				дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
			КонецЕсли;
			дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
			рдКлюч = дКлюч.Размер();
			рдЗначение = дЗначение.Размер();
			бРезультат = Новый БуферДвоичныхДанных(6);
			бРезультат.ЗаписатьЦелое16(0, рдКлюч);
			бРезультат.ЗаписатьЦелое32(2, рдЗначение);
			Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
			Результат.Добавить(дКлюч);
			Результат.Добавить(дЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СоединитьДвоичныеДанные(Результат);
КонецФункции


Функция ДвоичныеДанныеВСтруктуру(Данные, Рекурсия = Истина)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		рдДанные = Данные.Размер();
		Если рдДанные = 0 Тогда
			Возврат "";
		КонецЕсли;
		бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("БуферДвоичныхДанных") Тогда
		рдДанные = Данные.Размер;
		бдДанные = Данные;
	Иначе
		Возврат Данные;
	КонецЕсли;
	Позиция = 0;
	знСтруктура = Новый Структура;
	Пока Позиция < рдДанные - 1 Цикл
		рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
		рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
		Если рдКлюч + рдЗначение > рдДанные Тогда // Это не структура
			Возврат ПолучитьСтрокуИзДвоичныхДанных(Данные);
		КонецЕсли;
		Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
		бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
		Позиция = Позиция + 6 + рдКлюч + рдЗначение;
		Л = Лев(Ключ, 1);
		Если Л = "*" Тогда
			Если НЕ Рекурсия Тогда
				Продолжить;
			КонецЕсли;
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение);
		ИначеЕсли Л = "#" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
		Иначе
			Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
		КонецЕсли;
		знСтруктура.Вставить(Ключ, Значение);
	КонецЦикла;
	Возврат знСтруктура;
КонецФункции


Функция ПоказатьВкладки()
	Текст = "";
	ПараметрыШаблона = Новый Структура;
	Для каждого элВкладка Из ВкладкиСписок Цикл
		Вкладка = элВкладка.Значение;
		ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрЗаголовок", Вкладка.Заголовок);
		ПараметрыШаблона.Вставить("ПараметрАктивный", ?(Вкладка.ИдВкладки = ТекущаяВкладка, "active", ""));
		ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
		ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
		ПараметрыШаблона.Вставить("ПараметрБазаДанных", Вкладка.Данные.БазаДанных + " / " + Вкладка.Данные.ИмяДанных + " / " + Вкладка.Данные.ПозицияДанных);
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьВкладка", ПараметрыШаблона);
	КонецЦикла;
	// ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
	// Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьНоваяВкладка", ПараметрыШаблона);
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВкладки", Текст);
	ПараметрыШаблона.Вставить("ПараметрЗаголовокСтраницы", "" + УзелСвойство(ТекущиеДанные, "Заголовок") + " - OneScriptDB");
	ПараметрыШаблона.Вставить("ПараметрРежим", УзелСвойство(Вкладки.Получить(ТекущаяВкладка), "Режим"));
	ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", "" + ТекущаяВкладка);
	Текст = Шаблон.ПолучитьОбласть("ОбластьВкладки", ПараметрыШаблона);
	Если ПараметрыШаблона.ПараметрРежим = "design" Тогда
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьРежимРедактор");
	ИначеЕсли ПараметрыШаблона.ПараметрРежим = "view" Тогда
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьРежимПросмотр");
	Иначе
		Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьРежимСтруктура");
	КонецЕсли;
	// Меню пользователя
	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрСубъект", Субъект);
	Текст = Текст + Шаблон.ПолучитьОбласть("ОбластьСубъект", ПараметрыШаблона);
	Возврат Текст;
КонецФункции // ПоказатьВкладки()


Функция НоваяСтруктураВкладка(Данные, ТипВкладки, Заголовок, Режим, УзелКод)

	НоваяВкладка = Новый Структура("ИдВкладки, ТипВкладки, Данные, Состояния, Заголовок, Режим, ИдУзла, ОбновитьУзел, Прокрутка",
		ИдВкладки, ТипВкладки, Данные, Новый Соответствие, Заголовок, Режим, УзелКод, Истина, "0");
	Если НЕ ТекущаяВкладка = Неопределено Тогда
		ВкладкиСписок.Вставить(ВкладкиСписок.Индекс(ВкладкиСписок.НайтиПоЗначению(Вкладки.Получить(ТекущаяВкладка))) + 1, НоваяВкладка);
	Иначе
		ВкладкиСписок.Добавить(НоваяВкладка);
	КонецЕсли;
	Вкладки.Вставить(ИдВкладки, НоваяВкладка);
	ТекущаяВкладка = ИдВкладки;
	ИдВкладки = ИдВкладки + 1;
	ОбщийРезультат = ОбщийРезультат + "<div id='insert'><script>newtab('" + НоваяВкладка.ИдВкладки + "','" + НоваяВкладка.ТипВкладки + "','" + НоваяВкладка.Данные.Фронт.Код + "');</script></div>";
	ОбновитьВкладки = Истина;

	Возврат НоваяВкладка;

КонецФункции // НоваяСтруктураВкладка()


Функция ПолучитьДанные(структЗадача)
	БазаДанных = "" + УзелСвойство(структЗадача.Запрос, "osdb");
	ИмяДанных = "" + УзелСвойство(структЗадача.Запрос, "data");
	ПозицияДанных = "" + УзелСвойство(структЗадача.Запрос, "dataposition");
	Если ИмяДанных = "" Тогда
		ИмяДанных = зИмяДанных;
	КонецЕсли;
	Если ИмяДанных = "" Тогда
		ИмяДанных = "expldb";
	КонецЕсли;
	ПутьДанные = БазаДанных + "/" + ИмяДанных + "/" + ПозицияДанных;
	Данные = ВсеДанные.Получить(ПутьДанные);
	Если Данные = "НетДанных" Тогда
		Возврат Неопределено;
	ИначеЕсли Данные = Неопределено Тогда
		ЗадачаПараметры = Новый Структура("БазаДанных, ИмяДанных, ПозицияДанных, cmd", БазаДанных, ИмяДанных, ПозицияДанных, "ПолучитьДанные");
		НоваяЗадача(ЗадачаПараметры, "Служебный", структЗадача);
		ВсеДанные.Вставить(ПутьДанные, "НетДанных");
		Если ПозицияДанных = "" И НЕ БазаДанных = "" Тогда // новые данные
			ЗадачаПараметры.Вставить("РезультатДанные", Новый Структура("Ответ", "Новые данные"));
		КонецЕсли;
	КонецЕсли;
	Возврат Данные;
КонецФункции


Функция НоваяВкладка(структЗадача) Экспорт
	Данные = ПолучитьДанные(структЗадача);
	Если Данные = Неопределено Тогда // пока нет данных
		Возврат Неопределено;
	КонецЕсли;
	Данные.Обновить = Истина;
	Режим = "" + УзелСвойство(структЗадача.Запрос, "mode");
	ТипВкладки = "data";
	Если Режим = "" Тогда
		Если НЕ Данные.Фронт = Данные.Корень Тогда
			Режим = "struct";
			ТипВкладки = "win";
		Иначе
			Режим = "view";
		КонецЕсли;
	КонецЕсли;
	ТекущиеДанные = НоваяСтруктураВкладка(Данные, ТипВкладки, Данные.ИмяДанных, Режим, Данные.Корень.Код);
	Возврат ТекущиеДанные;
КонецФункции


Функция НачальнаяСтраница()
	Текст = Шаблон.ПолучитьОбласть("ОбластьШапка", Новый Структура("ПараметрХост", ПараметрХост))
		+ Шаблон.ПолучитьОбласть("ОбластьПанельМенюОкно", Новый Структура("ПараметрХост", ПараметрХост))
		+ Шаблон.ПолучитьОбласть("ОбластьПодвал", Новый Структура("ПараметрИдПроцесса, ПараметрХост", procid, ПараметрХост));
	Возврат Текст;
КонецФункции


Функция ПоказатьМенюИнструменты(Вкладка, Узел, ЭтоАтрибут = Ложь)

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
	ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
	ПараметрыШаблона.Вставить("ПараметрВидимость", "");

	ПараметрМенюИнструменты = "";

	Если Вкладка.Режим = "design" Тогда

		ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюРедактировать", ПараметрыШаблона);

		// Если НЕ УзелСостояние(Вкладка, Узел, "Изменить") = Истина Тогда
		// 	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УзелСтруктура"]);
		// 	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура");
		// Иначе
		// 	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УзелПросмотр"]);
		// 	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Представление");
		// КонецЕсли;
		// ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьУзел"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Редактировать узел");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ЗначениеУзла"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение узла");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		// ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ЗначениеОбъекта"]);
		// ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение объекта");
		// ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		Если НЕ этоАтрибут = Истина Тогда
			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйРодитель"]);
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый родитель");
			ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйАтрибут"]);
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый атрибут");
			ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

			ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйДочерний"]);
			ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый дочерний");
			ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
		КонецЕсли;

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйСоседний"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый соседний");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВырезатьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вырезать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["КопироватьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Копировать узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьАтрибут"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить атрибут");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьДочерний"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить дочерний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьСоседний"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить соседний");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьАтрибуты"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все атрибуты");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьРодителя"]);
		ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить родителя");
		ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
	КонецЕсли;

	ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьУзел"]);
	ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить узел");
	ПараметрМенюИнструменты = ПараметрМенюИнструменты + Шаблон.ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрВидМеню", Команда["МенюРедактора"]);
	ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
	КнопкаИнструменты = Шаблон.ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

	Возврат КнопкаИнструменты;

КонецФункции // ПоказатьМенюИнструменты()


Функция ПоказатьСтруктуруУзла(Вкладка, Узел, ЭтоАтрибут = Ложь, Атрибуты = "", Дочерний = "") Экспорт

	Представление = "" ;

	УзелОткрыт = УзелСостояние(Вкладка, Узел, "УзелОткрыт");
	Если УзелОткрыт = Неопределено Тогда
		УзелОткрыт = Ложь;
	КонецЕсли;

	УзелИмя = Узел.Имя;

	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = Узел.Значение;
	КонецЕсли;

	РедактироватьЗначение = УзелСостояние(Вкладка, Узел, "РедактироватьЗначение");
	РедактироватьИмя = УзелСостояние(Вкладка, Узел, "РедактироватьИмя");

	Если этоАтрибут = Истина Тогда
		УзелИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		УзелИмя = СтрЗаменить(УзелИмя, "_", "-");
	КонецЕсли;

	КнопкаУзел = "";

	Если НЕ этоАтрибут = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", ?(УзелОткрыт, Команда["ЗакрытьУзел"], Команда["ОткрытьУзел"]));
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", ?(УзелОткрыт ИЛИ УзелСвойство(Узел, "Дочерний") = Неопределено, "⚪" , "⚫"));
		КнопкаУзел = Шаблон.ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);
	Иначе
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьУзел"]);
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", ?(УзелСвойство(Узел, "Дочерний") = Неопределено, "⚪" , "⚫"));
		КнопкаУзел = Шаблон.ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);
	КонецЕсли;

	Если РедактироватьИмя = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовоеИмяУзла"]);
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелИмя, СпособКодированияСтроки.КодировкаURL));
		//ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелИмя));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["МенюРедактора"]);
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелИмя, 50));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", ?(Лев(Узел.Код, 1) = "s", "-s", ""));
		ПараметрИмя = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	Если РедактироватьЗначение = Истина Тогда

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовоеЗначениеУзла"]);
		ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
		//ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелЗначение));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);

	Иначе

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьЗначение"]);
		ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелЗначение, 100));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", ?(Лев(Узел.Код, 1) = "s", "-s", ""));
		ПараметрЗначение = Шаблон.ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

	КонецЕсли;

	ПараметрыШаблона = Новый Структура;
	ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
	ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
	ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
	ПараметрИмяУзла = КнопкаУзел + Шаблон.ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

	Если НЕ ЭтоАтрибут Тогда

		ПараметрЗаголовокУзла = ПараметрИмяУзла + Атрибуты;

		ПараметрДочернийУзел = Дочерний;

		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЗаголовокУзла", ПараметрЗаголовокУзла);
		ПараметрыШаблона.Вставить("ПараметрДочернийУзел", ПараметрДочернийУзел);
		Представление = Шаблон.ПолучитьОбласть("ОбластьУзел", ПараметрыШаблона);

	Иначе

		Представление = ПараметрИмяУзла;

	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "РедактироватьУзел") = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрИмяУзла", СтрЭкранироватьРазметку(УзелИмя));
		ПараметрыШаблона.Вставить("ПараметрЗначениеУзла", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		Представление = Представление + Шаблон.ПолучитьОбласть("ОбластьРедактироватьУзел", ПараметрыШаблона);
	КонецЕсли;

	Если УзелСостояние(Вкладка, Узел, "ЗагрузитьHTML") = Истина Тогда
		ПараметрыШаблона = Новый Структура;
		ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
		ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
		ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
		ПараметрыШаблона.Вставить("ПараметрХост", ПараметрХост);
		Представление = Представление + Шаблон.ПолучитьОбласть("ОбластьЗагрузитьHTML", ПараметрыШаблона);
	КонецЕсли;

	Возврат Представление;

КонецФункции


Функция ОтобразитьDOM(Вкладка, Узел, Родитель = Неопределено, Знач Обновить = Ложь, Знач ТипУзла = "", Знач НачальныйУзел = Ложь)

	Данные = Вкладка.Данные;

	Представление = Неопределено;

	Если УзелСостояние(Вкладка, Узел, "НачальныйУзел") = Истина Тогда
		НачальныйУзел = Истина;
	КонецЕсли;
	Если УзелСостояние(Вкладка, Узел, "ОбновитьУзел") = Истина Тогда
		Обновить = Истина;
	Иначе
		Представление = УзелСостояние(Вкладка, Узел, "Представление");
		Если НЕ Представление = Неопределено И НЕ Обновить Тогда
			Представление = "";
		КонецЕсли;
	КонецЕсли;

	Если Представление = Неопределено Тогда
		Если Обновить Тогда
			Атрибуты = "";
			УзелАтрибут = Данные.Атрибут(Узел);
			Если НЕ УзелАтрибут = Неопределено Тогда
				Атрибуты = ОтобразитьDOM(Вкладка, УзелАтрибут, Узел, Обновить, "Атрибут");
			КонецЕсли;

			Дочерний = "";
			Если УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				УзелДочерний = Данные.Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					Дочерний = ОтобразитьDOM(Вкладка, УзелДочерний, Узел, Обновить, "Дочерний");
				КонецЕсли;
			КонецЕсли;

			Представление = ПоказатьСтруктуруУзла(Вкладка, Узел, (ТипУзла = "Атрибут"), Атрибуты, Дочерний);
			УзелСостояниеЗначение(Вкладка, Узел, "Представление", Представление);
			УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьУзел", Ложь);
			УзелСостояниеЗначение(Вкладка, Узел, "Родитель", Родитель);
		Иначе
			Если УзелСостояние(Вкладка, Узел, "УзелОткрыт") = Истина  Тогда
				УзелДочерний = Данные.Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					Представление = ОтобразитьDOM(Вкладка, УзелДочерний, Узел, Обновить, "Дочерний");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ НачальныйУзел Тогда
		УзелСоседний = Данные.Соседний(Узел);
		Если НЕ УзелСоседний = Неопределено Тогда
			Соседний = ОтобразитьDOM(Вкладка, УзелСоседний, Узел, Обновить, ТипУзла);
			Представление = "" + Представление + Соседний;
		КонецЕсли;
	КонецЕсли;

	Возврат "" + Представление;

КонецФункции // ОтобразитьDOM()


Функция СформироватьОтвет(парДанные = Неопределено)

	Команд = 0;
	ВремяНачало = ТекущаяДата();

	Если ОбновитьВкладки = Истина Тогда
		ОбщийРезультат = ОбщийРезультат + ПоказатьВкладки();
		ОбновитьВкладки = Ложь;
	КонецЕсли;

	Для каждого ЭлДанные Из ВсеДанные Цикл
		текДанные = ЭлДанные.Значение;
		Если текДанные = "НетДанных" Тогда
			Продолжить;
		ИначеЕсли НЕ парДанные = Неопределено Тогда
			Если НЕ парДанные = текДанные Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Команд = Команд - текДанные.К;
		текДанные.ОбновитьПредставление();
		Команд = Команд + текДанные.К;
	КонецЦикла;

	Для каждого элВкладка Из Вкладки Цикл
		Вкладка = элВкладка.Значение;
		Если НЕ парДанные = Неопределено Тогда
			Если НЕ парДанные = Вкладка.Данные Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Вкладка.Режим = "struct" Тогда
			Ответ = "" + ОтобразитьDOM(Вкладка, Вкладка.Данные.ПолучитьУзел(Вкладка.ИдУзла), , Вкладка.ОбновитьУзел, , Истина);
		Иначе
			Ответ = "" + СтрЗаменить(Вкладка.Данные.Представление, "id=""_", "id=""" + Вкладка.ИдВкладки + "_");
		КонецЕсли;
		Если Вкладка.ТипВкладки = "win" Тогда
			Если Вкладка.ОбновитьУзел = Истина Тогда
				ПараметрыШаблона = Новый Структура;
				ПараметрыШаблона.Вставить("ПараметрЗаголовокОкна", Вкладка.Заголовок);
				ПараметрыШаблона.Вставить("ПараметрСодержимоеОкна", Ответ);
				ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
				ПараметрыШаблона.Вставить("ПараметрИдУзла", Вкладка.ИдУзла);
				Ответ = Шаблон.ПолучитьОбласть("ОбластьПанель", ПараметрыШаблона);
			КонецЕсли;
		КонецЕсли;
		ОбщийРезультат = ОбщийРезультат + Ответ;
		//Если Вкладка.ИдВкладки = ТекущаяВкладка Тогда
		Если Вкладка.ОбновитьУзел И (Вкладка = ТекущиеДанные ИЛИ Вкладка = ТекущееОкно) Тогда
			ПараметрыШаблона = Новый Структура;
			ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
			ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
			ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
			ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
			ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", ТекущаяВкладка);
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьСкрипт", ПараметрыШаблона);
		КонецЕсли;
		Вкладка.ОбновитьУзел = Ложь;
	КонецЦикла;

	// Если Команд > 0 Тогда
	// 	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьСтатус", Новый Структура("ПараметрСтатусСообщение", "" + Цел(100*(ТекущаяДата() - ВремяНачало))/100 + " s " + Команд + " c"));
	// КонецЕсли;

КонецФункции


Функция УстановитьПараметры(знПараметры)
	Параметры = знПараметры;
	procid = Параметры.procid;
	зИмяДанных = "" + УзелСвойство(Параметры, "data");
	ПараметрХост = Параметры.ПараметрХост;
	УдаленныйУзел = Параметры.УдаленныйУзел;
	Локальный = Параметры.Локальный; // если не локальный то простаивающий процесс будет завершен
	ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Параметры); // регистрация на веб-сервере
	ПередатьДанные(Параметры.Хост, Параметры.ПортД, Параметры); // регистрация на дата-сервере
	Сообщить("procid = " + procid);
	Субъект = Параметры.Субъект;
КонецФункции // УстановитьПараметры()


Функция ЗапросВыполнитьЗадачу(структЗадача)

	//Сообщить(структЗадача.Этап + "=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd") + " время=" + (ТекущаяДата() - структЗадача.ВремяНачало));

	Если структЗадача.Этап = "ВыполнитьЗадачу" Тогда

		Если НЕ структЗадача.Действие = Неопределено Тогда
			СформироватьОтвет = ВыполнитьДействия(структЗадача);
			Если структЗадача.Тип = "Служебный" И ТипЗнч(СформироватьОтвет) = Тип("Булево") Тогда
				Если СформироватьОтвет = Истина Тогда
					ЗадачаОбновитьВыполнить = Истина;
				КонецЕсли;
				структЗадача.Этап = "УдалитьЗадачу";
			ИначеЕсли СформироватьОтвет = Истина Тогда
				структЗадача.Этап = "СформироватьОтвет";
			ИначеЕсли СформироватьОтвет = "Приостановить" Тогда
				структЗадача.Этап = "Приостановить";
			ИначеЕсли СформироватьОтвет = "УдалитьЗадачу" Тогда
				структЗадача.Этап = "УдалитьЗадачу";
			ИначеЕсли НЕ СформироватьОтвет = "ПродолжитьВыполнение" Тогда
				структЗадача.Этап = "ЕстьРезультат";
			КонецЕсли;
		Иначе
			структЗадача.Результат = НачальнаяСтраница();
			структЗадача.Этап = "ЕстьРезультат";
		КонецЕсли;
	КонецЕсли;

	Если структЗадача.Этап = "СформироватьОтвет" Тогда

		Если структЗадача.Действие = Команда["ОбновитьДанные"] ИЛИ структЗадача.Действие = Команда["ОбновитьСтраницу"] Тогда
			СформироватьОтвет();
		Иначе
			тВкладка = Вкладки.Получить(ТекущаяВкладка);
			Если НЕ тВкладка = Неопределено Тогда
				СформироватьОтвет(тВкладка.Данные); // сначала обновить данные текущей вкладки
			КонецЕсли;
			ЗадачаОбновитьВыполнить = Истина; // потом все остальные
		КонецЕсли;
		структЗадача.Результат = ОбщийРезультат;
		ОбщийРезультат = "";
		структЗадача.Этап = "ЕстьРезультат";

	КонецЕсли;

	Если структЗадача.Этап = "ЕстьРезультат" Тогда
		Если ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Новый Структура("procid, taskid, Результат", procid, структЗадача.Запрос.taskid, структЗадача.Результат)) Тогда
			структЗадача.Этап = "УдалитьЗадачу";
		КонецЕсли;
	КонецЕсли;

КонецФункции // ЗапросВыполнитьЗадачу()


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция УзелСвойствоЗначение(Узел, СвойствоИмя, СвойствоЗначение) Экспорт
	Если НЕ Узел = Неопределено Тогда
		Узел.Вставить(СвойствоИмя, СвойствоЗначение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСвойствоЗначение(Узел)


Функция УзелСостояние(Вкладка, Узел, СостояниеИмя) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если НЕ УзелСостояние = Неопределено Тогда
		УзелСостояние.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)


Функция УзелСостояниеЗначение(Вкладка, Узел, СостояниеИмя, СостояниеЗначение, Событие = Ложь) Экспорт
	УзелСостояние = Вкладка.Состояния.Получить(Узел.Код);
	Если УзелСостояние = Неопределено Тогда
		УзелСостояние = Новый Структура();
		Вкладка.Состояния.Вставить(Узел.Код, УзелСостояние);
	КонецЕсли;
	УзелСостояние.Вставить(СостояниеИмя, СостояниеЗначение);
	//Сообщить("" + Вкладка.ИдВкладки + "_" + Узел.Код + " " + СостояниеИмя + "=" + (Лев(СостояниеЗначение,30)));
	Если Событие Тогда
		Если СостояниеИмя = "ОбновитьУзел" И СостояниеЗначение = Истина Тогда
			Вкладка.Данные.ОбновитьПредставлениеУзла(Узел);
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // УзелСостояниеЗначение(Узел)


Функция ОбновитьСостояние(Вкладка, Узел, Состояние, Значение, Событие = Ложь, НачальныйУзел = Ложь) Экспорт

	Если Узел = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Данные = Вкладка.Данные;

	Результат = Истина;

	Если Состояние = "Изменить" Тогда
		// ОбновитьСостояние(Вкладка, Данные.Атрибут(Узел), "Изменить", Значение);
		// ОбновитьСостояние(Вкладка, Данные.Дочерний(Узел), "Изменить", Значение);
		// Если НЕ НачальныйУзел Тогда
		// 	ОбновитьСостояние(Вкладка, Данные.Соседний(Узел), "Изменить", Значение);
		// КонецЕсли;

	ИначеЕсли Состояние = "НовоеЗначениеУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь, Истина);
		УзелСвойствоЗначение(Узел, "Значение", Значение);

	ИначеЕсли Состояние = "НовоеИмяУзла" Тогда
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь, Истина);
		ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина, Истина);
		УзелСвойствоЗначение(Узел, "Имя", Значение);

	ИначеЕсли Состояние = "ОбновитьУзел" И Значение = Истина Тогда
		ОбновитьСостояние(Вкладка, Узел, "Представление", Неопределено, Ложь);

	ИначеЕсли Состояние = "Представление" И Значение = Неопределено Тогда
		Родитель = УзелСостояние(Вкладка, Узел, "Родитель");
		ОбновитьСостояние(Вкладка, Родитель, "Представление", Значение, Событие);

	КонецЕсли;

	Если НЕ Результат = Ложь Тогда
		УзелСостояниеЗначение(Вкладка, Узел, Состояние, Значение, Событие);
		Если НЕ Состояние = "ОбновитьУзел" И НЕ Состояние = "Представление" Тогда
			// Обновить все связанные вкладки
			Для каждого элВкладка Из Вкладки Цикл
				знВкладка = элВкладка.Значение;
				Если знВкладка.Данные = Вкладка.Данные Тогда
					знУзел = знВкладка.Данные.ПолучитьУзел(Узел.Код);
					Если НЕ знУзел = Неопределено Тогда
						ОбновитьСостояние(знВкладка, знУзел, "ОбновитьУзел", Истина, Событие);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОбновитьСостояние()


// // Получить значение внешнего узла
// Функция ВнешнийУзел(Знач Узел, Аргументы, Объект) Экспорт
// 	БазаДанных = "" + УзелСвойство(Аргументы, "БазаДанных");
// 	ИмяДанных = "" + УзелСвойство(Аргументы, "ИмяДанных");
// 	ПозицияДанных = "" + УзелСвойство(Аргументы, "ПозицияДанных");
// 	Данные = ПолучитьДанные(БазаДанных, ИмяДанных, ПозицияДанных);
// 	Возврат Данные.ВнешнийЗначение(Узел, Объект);
// КонецФункции


Функция ВыполнитьДействия(структЗадача)
	Перем Вкладка;

	Действие = УзелСвойство(структЗадача, "Действие");
	Если НЕ Действие = Неопределено Тогда

		Запрос = структЗадача.Запрос;

		Если Действие = "ПолучитьДанные" Тогда // загрузить данные с дата-сервера

			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				стрЗапрос = Новый Структура("БазаДанных, ИмяДанных, ПозицияДанных, Команда", Запрос.БазаДанных, Запрос.ИмяДанных, Запрос.ПозицияДанных, "ПолучитьДанные");
				стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
				Если ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрЗапрос) Тогда
					Запрос.Вставить("РезультатДанные", Неопределено); // теперь ждем ответа
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				Сообщить(Запрос.РезультатДанные.Ответ);
				Если Запрос.РезультатДанные.Ответ = "Успешно" Тогда
					Текст = ПолучитьСтрокуИзДвоичныхДанных(Запрос.РезультатДанные.Результат);
				Иначе
					Текст = ""; // создаем новый файл
				КонецЕсли;
				Данные = Новый pagedata(ЭтотОбъект, Текст, Запрос.БазаДанных, Запрос.ИмяДанных, Запрос.ПозицияДанных);
				ПутьДанные = Запрос.БазаДанных + "/" + Запрос.ИмяДанных + "/" + Запрос.ПозицияДанных;
				ВсеДанные.Вставить(ПутьДанные, Данные);
				Запрос.Удалить("РезультатДанные"); // данные загружены
				Возврат Истина;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = "ВыполнитьФункцию" Тогда
			Результат = Запрос.Данные.ВызватьФункцию(Запрос.Узел, Запрос.ИмяФункции, структЗадача);
			Если Результат = Истина Тогда
				Запрос.Данные.ОбновитьУзел(Запрос.Узел);
			КонецЕсли;
			Возврат Результат;

		ИначеЕсли Действие = Команда["ЗавершитьПроцесс"] Тогда
			Сообщить("Получена команда на завершение.");
			ОстановитьСервер = Истина;
			Возврат Ложь;

		ИначеЕсли Действие = Команда["ОстановитьСервер"] Тогда
			ОбщийРезультат = "<div id='data' class='my-4'><h3>завершение ...</h3></div>";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьПеренаправить", Новый Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", "/", 1000, ""));
			ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый Структура("cmd, procid", "stopserver", procid));
			Возврат Истина;

		ИначеЕсли Действие = Команда["ПерезапуститьСервер"] Тогда
			ОбщийРезультат = "<div id='data' class='my-4'><h3>перезапуск ...</h3></div>";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьПеренаправить", Новый Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", "/", 1500, ""));
			ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый Структура("cmd, procid", "restartserver", procid));
			Возврат Истина;

		ИначеЕсли Действие = Команда["ОбновитьДанные"] Тогда
			Возврат Истина;

		ИначеЕсли Действие = Команда["ОбновитьСтраницу"] Тогда
			Если НЕ Вкладки.Количество() Тогда
				Если НоваяВкладка(структЗадача) = Неопределено Тогда
					Возврат "ПродолжитьВыполнение";
				КонецЕсли;
			КонецЕсли;
			Скрипт = "";
			Для каждого элВкладка Из Вкладки Цикл
				Вкладка = элВкладка.Значение;
				Вкладка.ОбновитьУзел = Истина;
				Вкладка.Данные.Обновить = Истина;
				Скрипт = Скрипт + "newtab('" + Вкладка.ИдВкладки + "','" + Вкладка.ТипВкладки + "','" + Вкладка.Данные.Фронт.Код + "');";
			КонецЦикла;
			ОбщийРезультат = "<div id='insert'><script>" + Скрипт + "</script></div>";
			ОбновитьВкладки = Истина;
			Возврат Истина;

		ИначеЕсли Действие = Команда["СохранитьДанные"] Тогда
			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				Вкладка = Вкладки.Получить(ТекущаяВкладка);
				Если НЕ Вкладка = Неопределено Тогда
					Запрос.Вставить("ТекущаяВкладка", ТекущаяВкладка);
					ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("БазаДанных, Заголовок, Команда, дДанные, ОбратныйЗапрос", Вкладка.Данные.БазаДанных, Новый Структура("ИмяДанных, ТипДанных", Вкладка.Данные.ИмяДанных, 3), "ЗаписатьДанные", ПолучитьДвоичныеДанныеИзСтроки(Вкладка.Данные.СохранитьДанные()), Запрос));
					Запрос.Вставить("РезультатДанные", Неопределено);
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				стрСообщение = "Неизвестно";
				Вкладка = Вкладки.Получить(Число(Запрос.ТекущаяВкладка));
				Если НЕ Вкладка = Неопределено Тогда
					Ответ = Запрос.РезультатДанные.Ответ;
					Если Ответ = "Успешно" Тогда
						Вкладка.Данные.ПозицияДанных = Запрос.РезультатДанные.Результат;
						ЗаписатьСобытие(Вкладка.Данные.БазаДанных + "/" + Вкладка.Данные.ИмяДанных + "/" + Вкладка.Данные.ПозицияДанных, "Данные сохранены", 1);
					КонецЕсли;
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = Команда["УстановитьПараметры"] Тогда
			УстановитьПараметры(структЗадача.Запрос);
			Возврат "УдалитьЗадачу";

		ИначеЕсли Действие = "НоваяБаза" Тогда
			стрСообщение = "";
			Если НЕ "" + Запрос.БазаДанных = "" Тогда
				Если НЕ Запрос.Свойство("РезультатДанные") Тогда // отправить запрос к дата-серверу
					ОбратныйЗапрос = Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи);
					ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("БазаДанных, ОбратныйЗапрос, Команда", Запрос.БазаДанных, ОбратныйЗапрос, "ПолучитьДанные"));
					Запрос.Вставить("РезультатДанные", Неопределено);
				ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
					Если Запрос.РезультатДанные.Ответ = "Успешно" Тогда
						стрСообщение = "Создана новая база данных " + Запрос.БазаДанных;
						ЗаписатьСобытие(Запрос.БазаДанных, стрСообщение, 1);
					Иначе
						// Сообщить об ошибке
					КонецЕсли;
					Возврат Истина;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			Возврат "Приостановить";

		КонецЕсли;

		datascrolled = "" + УзелСвойство(Запрос, "datascrolled");
		Если НЕ datascrolled = "" И НЕ datascrolled = "undefined" Тогда
			Если НЕ ТекущиеДанные = Неопределено Тогда
				ТекущиеДанные.Вставить("Прокрутка", datascrolled);
			КонецЕсли;
		КонецЕсли;

		winscrolled = "" + УзелСвойство(Запрос, "winscrolled");
		Если НЕ winscrolled = "" И НЕ winscrolled = "undefined" Тогда
			Если НЕ ТекущееОкно = Неопределено Тогда
				ТекущееОкно.Вставить("Прокрутка", winscrolled);
			КонецЕсли;
		КонецЕсли;

		Если Действие = Команда["НоваяВкладка"] Тогда
			Если НоваяВкладка(структЗадача) = Неопределено Тогда
				Возврат "ПродолжитьВыполнение";
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;

		Если Действие = Команда["РежимРедактор"] Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "design";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимРедактор");
			ОбновитьВкладки = Истина;
			Возврат Истина;
		КонецЕсли;

		Если Действие = Команда["РежимПросмотр"] Тогда
			Если ТекущиеДанные = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекущиеДанные.Режим = "view";
			ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьРежимПросмотр");
			ОбновитьВкладки = Истина;
			Возврат Истина;
		КонецЕсли;

		tab = "" + УзелСвойство(Запрос, "tab");
		Если НЕ tab = "" И НЕ tab = "undefined" Тогда
			tab = Число(tab);
			Вкладка = Вкладки.Получить(tab);
			Если Вкладка = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;

			Если Действие = Команда["ЗакрытьВкладку"] Тогда
				ОбщийРезультат = ОбщийРезультат + "<div id='" + tab + "_0'/>";
				Если Вкладка = ТекущиеДанные Тогда
					ТекущиеДанные = Неопределено;
				ИначеЕсли Вкладка = ТекущееОкно Тогда
					ТекущееОкно = Неопределено;
				КонецЕсли;

				Вкладки.Удалить(tab);
				удВкладка = Вкладка;

				Если tab = ТекущаяВкладка Тогда
					// Если ТекущиеДанные = Неопределено Тогда
						ТекущаяВкладка = Неопределено;
						Для каждого элВкладка Из ВкладкиСписок Цикл
							знВкладка = элВкладка.Значение;
							Если знВкладка = удВкладка Тогда
								tab = Неопределено;
								Продолжить;
							КонецЕсли;
							Если tab = Неопределено И НЕ ТекущаяВкладка = Неопределено Тогда
								Прервать;
							КонецЕсли;
							ТекущаяВкладка = знВкладка.ИдВкладки;
							знВкладка.ОбновитьУзел = Истина;
							Если знВкладка.ТипВкладки = "data" Тогда
								ТекущиеДанные = знВкладка;
							ИначеЕсли Вкладка.ТипВкладки = "win" Тогда
								ТекущееОкно = знВкладка;
							КонецЕсли;
						КонецЦикла;
					// Иначе
					// 	ТекущаяВкладка = ТекущиеДанные.ИдВкладки;
					// КонецЕсли;
				КонецЕсли;

				ВкладкиСписок.Удалить(ВкладкиСписок.НайтиПоЗначению(удВкладка));

				ОбновитьВкладки = Истина;
				Возврат Истина;
			КонецЕсли;

			Если Действие = Команда["ВыбратьВкладку"] Тогда
				ТекущаяВкладка = tab;
				Если Вкладка.ТипВкладки = "data" Тогда
					ТекущиеДанные = Вкладка;
					ТекущееОкно = Неопределено;
				КонецЕсли;
				Если Вкладка.ТипВкладки = "win" Тогда
					ТекущееОкно = Вкладка;
				КонецЕсли;
				//Вкладка.ОбновитьУзел = Истина;
				ОбновитьВкладки = Истина;
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;

		ИдУзла = УзелСвойство(структЗадача.Запрос, "nodeid");

		Если ИдУзла = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		НайтиИдУзла = Найти(ИдУзла, "_");
		Если НайтиИдУзла Тогда
			НайтиИдВкладки = Число(Лев(ИдУзла, НайтиИдУзла - 1));
			Вкладка = Вкладки.Получить(НайтиИдВкладки);
			ИдУзла = Сред(ИдУзла, НайтиИдУзла + 1);
		Иначе
			//Возврат Ложь;
		КонецЕсли;

		Если Вкладка = Неопределено Тогда
			Если НЕ ТекущаяВкладка = Неопределено Тогда
				Вкладка = Вкладки.Получить(ТекущаяВкладка);
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Данные = Вкладка.Данные;
		Если Данные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Узел = Данные.ПолучитьУзел(ИдУзла);

		Если Узел = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		Если Действие = Команда["Авторизация"] ИЛИ Действие = Команда["Регистрация"] Тогда
			Если НЕ Запрос.Свойство("РезультатДанные") Тогда
				стрЗапрос = Новый Структура("ЗапросДанные, Команда", Запрос, Действие);
				стрЗапрос.Вставить("ОбратныйЗапрос", Новый Структура("ИдЗадачи", структЗадача.ИдЗадачи));
				Если ПередатьДанныеД(стрЗапрос) Тогда
					Запрос.Вставить("РезультатДанные", Неопределено);
				КонецЕсли;
			ИначеЕсли НЕ Запрос.РезультатДанные = Неопределено Тогда // получен ответ дата-сервера
				РезультатДанные = Запрос.РезультатДанные;
				ЗапросДанные = РезультатДанные.Результат;
				Если РезультатДанные.Ответ = "ОшибкаПотокаДанных" Тогда
					// сообщить об ошибке
					Возврат "УдалитьЗадачу";
				КонецЕсли;
				// прежний дочерний нужно удалять
				ДочернийУзел = Данные.Дочерний(Узел);
				Если НЕ ДочернийУзел = Неопределено Тогда
					Данные.УдалитьУзел(ДочернийУзел);
				КонецЕсли;
				дУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "Узел", "ЗапросДанные"), Истина);
				кУзел = Неопределено;
				Для каждого Параметр Из ЗапросДанные Цикл
					стрУзел = Новый Структура("Имя, Значение", "Узел", Параметр.Ключ);
					Если кУзел = Неопределено Тогда
						кУзел = Данные.НовыйДочерний(дУзел, стрУзел, Истина);
					Иначе
						кУзел = Данные.НовыйСоседний(кУзел, стрУзел, Истина);
					КонецЕсли;
					Данные.НовыйДочерний(кУзел, Новый Структура("Имя, Значение", "Строка", Параметр.Значение), Истина);
				КонецЦикла;
				Если ЗапросДанные.ПрошелАвторизацию Тогда
					Субъект = ЗапросДанные.unm;
					НоваяЗадача(Новый Структура("data, cmd", "expldb", "newtab"), "Служебный");
					ИзменитьАдрес();
				КонецЕсли;
				Данные.ОбновитьУзел(Узел);
				Возврат Истина;
			КонецЕсли;
			Возврат "Приостановить";

		ИначеЕсли Действие = Команда["ПриИзменении"] Тогда
			ЗначениеПоля = УзелСвойство(Запрос, "value");
			Если НЕ ЗначениеПоля = Неопределено Тогда
				АтрибутЗначение = Данные.НайтиАтрибут(Узел, "А", "Значение");
				Если АтрибутЗначение = Неопределено Тогда
					АтрибутЗначение = Данные.НайтиАтрибут(Узел, "value");
				КонецЕсли;
				Если НЕ АтрибутЗначение = Неопределено Тогда
					УзелЗначение = Данные.Дочерний(АтрибутЗначение);
					Если НЕ УзелЗначение = Неопределено Тогда
						Определение = Данные.ОпределениеУзла(УзелЗначение, УзелЗначение.Значение, Ложь);  // объявление узла
						Если НЕ Определение = Неопределено Тогда
							Данные.УзелУстановитьЗначение(Определение, ЗначениеПоля);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["ПриНажатии"] Тогда
			АтрибутПриНажатии = Данные.НайтиАтрибут(Узел, "А", "ПриНажатии");
			Если НЕ АтрибутПриНажатии = Неопределено Тогда
				УзелСценарий = Данные.Дочерний(АтрибутПриНажатии);
				Если НЕ УзелСценарий = Неопределено Тогда
					Вкладка.Данные.ОбновитьПредставлениеУзла(УзелСценарий);
				КонецЕсли;
			КонецЕсли;

			Возврат Истина;

		ИначеЕсли Действие = Команда["ПриОтправке"] Тогда
			АтрибутПриОтправке = Данные.НайтиАтрибут(Узел, "А", "ПриОтправке");
			Если НЕ АтрибутПриОтправке = Неопределено Тогда
				УзелСценарий = Данные.Дочерний(АтрибутПриОтправке);
				Если НЕ УзелСценарий = Неопределено Тогда
					Вкладка.Данные.ОбновитьПредставлениеУзла(УзелСценарий);
				КонецЕсли;
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["МенюРедактора"] Тогда
			ОбщийРезультат = ОбщийРезультат + ПоказатьМенюИнструменты(Вкладка, Узел, УзелСвойство(Запрос, "attr") = "1");
			Возврат Истина;

		ИначеЕсли Действие = Команда["ОткрытьУзел"] Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

		ИначеЕсли Действие = Команда["ЗакрытьУзел"] Тогда
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Ложь);

		ИначеЕсли Действие = Команда["РедактироватьЗначение"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина);

		ИначеЕсли Действие = Команда["НовоеЗначениеУзла"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			КонецЕсли;
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь);
			КонецЕсли;

		ИначеЕсли Действие = Команда["РедактироватьИмя"] Тогда

			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Истина);

		ИначеЕсли Действие = Команда["РедактироватьУзел"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + "  " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "struct", Узел.Код);
			ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
			Возврат ОбновитьСостояние(ТекущееОкно, Узел, "РедактироватьУзел", Истина);

		ИначеЕсли Действие = Команда["ЗагрузитьHTML"] Тогда

			СтруктураHTML = УзелСвойство(Запрос, "enc_value");
			Если СтруктураHTML = Неопределено Тогда
				ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20) + " import", "struct", Узел.Код);
				ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
				ОбновитьСостояние(ТекущееОкно, Узел, "ЗагрузитьHTML", Истина);
			Иначе
				// Вызвать обработку импорта
				СтруктураHTML = СтрРазделить(СтруктураHTML, Символы.ПС);
				дУзел = Данные.НовыйДочерний(Узел, Новый Структура());
				Данные.ЗагрузитьHTML(дУзел, СтруктураHTML, 0);
				ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);
			КонецЕсли;
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовоеИмяУзла"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			КонецЕсли;
			Если Запрос.Свойство("valuedit") Тогда
				Возврат ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.valuedit);
			Иначе
				Возврат ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь);
			КонецЕсли;

		ИначеЕсли Действие = Команда["СохранитьУзел"] Тогда
			Если УзелСвойство(Запрос, "attr") = "1" Тогда
				ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.name);
			ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.value);
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовыйАтрибут"] Тогда
			НовыйУзел = Данные.НовыйАтрибут(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["НовыйДочерний"] Тогда
			НовыйУзел = Данные.НовыйДочерний(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовыйСоседний"] Тогда
			НовыйУзел = Данные.НовыйСоседний(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			//ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["НовыйРодитель"] Тогда
			НовыйУзел = Данные.НовыйРодитель(Узел, Новый Структура("Имя, Значение", "", ""));
			ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел, "УзелОткрыт", Истина);
			ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["УдалитьУзел"] Тогда
			ДанныеРодительУзел = Узел.Родитель;
			Данные.УдалитьУзел(Узел);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["КопироватьУзел"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел;
			БуферДанные = Данные;
			Данные.КопироватьУзел(Узел, Буфер);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ВырезатьУзел"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				ОсвободитьОбъект(Буфер);
			КонецЕсли;
			Буфер = Новый Соответствие;
			БуферУзел = Узел;
			БуферДанные = Данные;
			Данные.КопироватьУзел(Узел, Буфер);
			ДанныеРодительУзел = Узел.Родитель;
			Данные.УдалитьУзел(Узел, Ложь);
			ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ВставитьАтрибут"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел, Истина, , Ложь);
				НовыйУзел.Вставить("Атрибут", Неопределено);
				//НовыйУзел.Вставить("Дочерний", Неопределено);
				УзелАтрибут = Данные.Атрибут(Узел);
				Узел.Вставить("Атрибут", НовыйУзел.Код);
				Если НЕ УзелАтрибут = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелАтрибут.Код);
					УзелАтрибут.Вставить("Старший", НовыйУзел);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["ВставитьДочерний"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел, , , Ложь);
				УзелДочерний = Данные.Дочерний(Узел);
				Узел.Вставить("Дочерний", НовыйУзел.Код);
				Если НЕ УзелДочерний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелДочерний.Код);
					УзелДочерний.Вставить("Старший", НовыйУзел);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина, Истина);

		ИначеЕсли Действие = Команда["ВставитьСоседний"] Тогда
			Если НЕ Буфер = Неопределено Тогда
				НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел.Родитель, , , Ложь);
				УзелСоседний = Данные.Соседний(Узел);
				Узел.Вставить("Соседний", НовыйУзел.Код);
				Если НЕ УзелСоседний = Неопределено Тогда
					НовыйУзел.Вставить("Соседний", УзелСоседний.Код);
					УзелСоседний.Вставить("Старший", НовыйУзел);
				КонецЕсли;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["УдалитьАтрибуты"] Тогда
			Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
				Данные.УдалитьУзел(Данные.Атрибут(Узел), Ложь);
				//Узел.Удалить("Атрибут");
				Узел.Атрибут = Неопределено;
			КонецЕсли;
			Возврат ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

		ИначеЕсли Действие = Команда["УдалитьРодителя"] Тогда
			Если НЕ УзелСвойство(Узел, "Родитель") = Неопределено Тогда
				Данные.УдалитьРодителя(Узел);
			КонецЕсли;
			ОбновитьСостояние(Вкладка, Узел.Родитель.Родитель, "ОбновитьУзел", Истина, Истина);
			Возврат Истина;

		// ИначеЕсли Действие = Команда["УзелСтруктура"] Тогда
		// 	Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Истина, , Истина);
		//
		// ИначеЕсли Действие = Команда["УзелПросмотр"] Тогда
		// 	Возврат ОбновитьСостояние(Вкладка, Узел, "Изменить", Ложь, , Истина);

		ИначеЕсли Действие = Команда["СтруктураДанных"] Тогда

			ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "struct", Вкладка.ИдУзла);
			ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
			Возврат Истина;

		ИначеЕсли Действие = Команда["ЗначениеУзла"] Тогда

			Если Узел.Имя = "Узел" ИЛИ Узел.Имя = "У" Тогда
				УзелЗначение = Данные.Интерпретировать(Данные.Дочерний(Узел), , Ложь);
			Иначе
				УзелЗначение = Данные.Интерпретировать(Узел);
			КонецЕсли;

			Если ТипЗнч(УзелЗначение) = Тип("Структура") Тогда
				ТипУзла = "struct";
				ДанныеВкладки = Данные;
				УзелКод = УзелЗначение.Код;
			Иначе
				ТипУзла = "value";
				ДанныеВкладки = Новый Структура("Представление, Фронт, БазаДанных, ИмяДанных, ПозицияДанных", УзелЗначение, Узел, "", "", "");
				УзелКод = Узел.Код;
			КонецЕсли;
			ТекущееОкно = НоваяСтруктураВкладка(ДанныеВкладки, "win", Вкладка.Данные.ИмяДанных + " Значение " + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), ТипУзла, УзелКод);
			Возврат Истина;

		// ИначеЕсли Действие = Команда["ЗначениеОбъекта"] Тогда
		//
		// 	Вкладка.Данные.ПолучитьОпределениеОбъекта(Узел);
		// 	ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
		// 	ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина);
		// 	Возврат Истина;

		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции // ВыполнитьДействия()


Функция ИзменитьАдрес() Экспорт
	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьИзменитьАдрес", Новый Структура("ПараметрПуть", "/procid/" + procid));
КонецФункции // ИзменитьАдрес()


Функция ПередатьДанныеД(стрДанные) Экспорт
	Возврат ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрДанные);
КонецФункции // ПередатьДанныеД()


Функция ПередатьДанные(Хост, Порт, стрДанные) Экспорт
	КоличествоПопыток = 0;
	стрДанные.Вставить("ИдПроцесса", procid);
	Пока КоличествоПопыток < 10 Цикл
		Попытка
			Приостановить(КоличествоПопыток);
			Соединение = Новый TCPСоединение(Хост, Порт);
			Соединение.ТаймаутОтправки = 50;
			Соединение.ОтправитьДвоичныеДанные(СтруктуруВДвоичныеДанные(стрДанные));
			Соединение.Закрыть();
			Возврат Истина;
		Исключение
			КоличествоПопыток = КоличествоПопыток + 1;
			Если НЕ Соединение = Неопределено Тогда
				Соединение.Закрыть();
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	Если КоличествоПопыток = 10 Тогда
		Сообщить("Ошибка отправки: " + Хост + ":" + Порт);
	КонецЕсли;
	Возврат Ложь;
КонецФункции // ПередатьДанные()


Функция ЗаписатьСобытие(стрЗаголовок, стрСообщение, ТипСобытия = 0, ПараметрКоманда = "") Экспорт
	Сообщить(стрСообщение);
	ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("БазаДанных, Заголовок, Команда", "log", Новый Структура("Источник, Субъект, Тип, Сообщение", стрЗаголовок, Субъект, ТипСобытия, стрСообщение), "ЗаписатьЗаголовок"));

	ОбщийРезультат = ОбщийРезультат + Шаблон.ПолучитьОбласть("ОбластьУведомление",
		Новый Структура("ПараметрТекстУведомления, ПараметрЗаголовокУведомления, ПараметрТипУведомления, ПараметрКоманда",
			стрСообщение, стрЗаголовок, ТипСобытия,	ПараметрКоманда));
КонецФункции // ЗаписатьСобытие()


Функция НоваяЗадача(Запрос, Тип = "Запрос", ЗадачаВладелец = Неопределено) Экспорт
	Перем ИдЗадачи;
	Если Запрос.Свойство("ИдЗадачи", ИдЗадачи) Тогда
		Задача = Задачи.Получить(ИдЗадачи);
		Если НЕ Задача = Неопределено Тогда
			Если Запрос.Свойство("РезультатДанные") Тогда
				//Сообщить("РезультатДанные задача=" + Задача.ИдЗадачи + " " + УзелСвойство(Задача.Запрос, "cmd") + " время=" + (ТекущаяДата() - Задача.ВремяНачало));
				Задача.Этап = "ВыполнитьЗадачу";
				Задача.Запрос.Вставить("РезультатДанные", Запрос.РезультатДанные);
			КонецЕсли;
		Иначе
			Сообщить("Задача не найдена ИдЗадачи=" + ИдЗадачи);
		КонецЕсли;
	Иначе
		Если НЕ Запрос.Свойство("taskid", ИдЗадачи) Тогда
			ИдЗадачи = "" + ПолучитьИД();
		КонецЕсли;
		структЗадача = Новый Структура("ИдЗадачи, Тип, Этап, Запрос, Действие, Результат, ВремяНачало, ЗадачаВладелец", ИдЗадачи, Тип, "ВыполнитьЗадачу", Запрос, Неопределено, "", ТекущаяДата(), ЗадачаВладелец);
		структЗадача.Запрос.Свойство("cmd", структЗадача.Действие);
		Сообщить("Новая задача " + Тип + "=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd"));
		Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
	КонецЕсли;
КонецФункции


Процедура ОбработатьСоединения()

	Порт = АргументыКоманднойСтроки[0];

	Шаблон = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "template.os"));
	Шаблон.ЗагрузитьМакет(ОбъединитьПути(ТекущийКаталог(), "resource", "showdata.html"));

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

	ОбщийРезультат = "";

	Локальный = Ложь;

	ВсеДанные = Новый Соответствие;

	TCPСервер = Новый TCPСервер(Порт);
	TCPСервер.Запустить();
	Сообщить("Контроллер запущен на порту: " + Порт);

	ВкладкиСписок = Новый СписокЗначений;
	Вкладки = Новый Соответствие;
	ИдВкладки = 0;

	Буфер = Неопределено;

	Задачи = Новый Соответствие;

	ЗадачаОбновитьВыполнить = Ложь;
	ОстановитьСервер = Ложь;
	ВремяНачало = ТекущаяДата();
	НачалоЦикла = ТекущаяДата();

	Пока Истина Цикл

		ВремяЦикла = ТекущаяДата() - НачалоЦикла;
		Если ВремяЦикла > 0.1 Тогда
			Сообщить("! ВремяЦикла=" + ВремяЦикла);
		КонецЕсли;
		НачалоЦикла = ТекущаяДата();

		Если НЕ Локальный Тогда
			Если НЕ procid = "0" Тогда // основной процесс не завершаем
				Если ТекущаяДата() - ВремяНачало > 30 * 60 Тогда
					Сообщить("Контроллер procid=" + procid + " простаивает.");
					ОбщийРезультат = "<div id='data' class='my-4'><h3>сеанс завершен</h3></div>";
					ЗадачаОбновитьВыполнить = Истина;
					ОстановитьСервер = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Задачи.Количество() Тогда
			ПереченьЗадач = Новый СписокЗначений;
			Для каждого элЗадача Из Задачи Цикл
				ПереченьЗадач.Добавить(ЭлЗадача.Значение, элЗадача.Ключ);
			КонецЦикла;
			ПереченьЗадач.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
			ЗадачаОбновить = Неопределено;
			Для каждого элПеречень Из ПереченьЗадач Цикл
				структЗадача = элПеречень.Значение;
				Если структЗадача.Этап = "УдалитьЗадачу" Тогда
					Сообщить("Завершил задачу=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd") + " время=" + (ТекущаяДата() - структЗадача.ВремяНачало));
					Задачи.Удалить(структЗадача.ИдЗадачи);
					Продолжить;
				КонецЕсли;
				Если структЗадача.Этап = "Приостановить" Тогда
					Продолжить;
				КонецЕсли;
				Если структЗадача.Действие = Команда["ОбновитьДанные"] Тогда
					Если ЗадачаОбновить = Неопределено Тогда
						ЗадачаОбновить = структЗадача;
						Продолжить;
					Иначе // устранить дублирование
						ЗадачаОбновить.Этап = "ЕстьРезультат";
						структЗадача.Этап = "ЕстьРезультат";
					КонецЕсли;
				КонецЕсли;
				Попытка
					ЗапросВыполнитьЗадачу(структЗадача);
				Исключение
					Сообщить(ОписаниеОшибки());
					структЗадача.Этап = "УдалитьЗадачу";
				КонецПопытки;
			КонецЦикла;
			Если ЗадачаОбновитьВыполнить И НЕ ЗадачаОбновить = Неопределено Тогда
				ЗадачаОбновитьВыполнить = Ложь;
				Попытка
					ЗапросВыполнитьЗадачу(ЗадачаОбновить);
				Исключение
					Сообщить(ОписаниеОшибки());
					ЗадачаОбновить.Этап = "УдалитьЗадачу";
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

		Если ОстановитьСервер Тогда
			Прервать;
		КонецЕсли;

		Соединение = Неопределено;
		ПустойЦикл = 0;
		Таймаут = 10;

		// Если НЕ Задачи.Количество() Тогда
		// 	Таймаут = 0;
		// КонецЕсли;

		Соединение = TCPСервер.ОжидатьСоединения(Таймаут);

		Если НЕ Соединение = Неопределено Тогда

			Соединение.ТаймаутОтправки = 50;
			Соединение.ТаймаутЧтения = 50;

			Попытка
				Запрос = ДвоичныеДанныеВСтруктуру(Соединение.ПрочитатьДвоичныеДанные());
				Соединение.Закрыть();
			Исключение
				Сообщить(ОписаниеОшибки());
				Запрос = "";
			КонецПопытки;

			Если НЕ Соединение = Неопределено Тогда
				Соединение.Закрыть();
			КонецЕсли;

			Если НЕ Запрос = "" Тогда
				ВремяНачало = ТекущаяДата();
				НоваяЗадача(Запрос);
			КонецЕсли;

		Иначе
			ПустойЦикл = ПустойЦикл + 1;
		КонецЕсли;

	КонецЦикла;

	TCPСервер.Остановить();
	// оповещение о завершении
	ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Новый Структура("procid, cmd", procid, "termproc"));
	ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый Структура("procid, cmd", procid, "termproc"));
	ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый Структура("procid, cmd", procid, "termproc"));
	Сообщить("Процесс procid=" + procid + " завершен.");

КонецПроцедуры


МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();

Команда = Новый Соответствие;

Команда.Вставить("ОбновитьСтраницу", "refresh");
Команда.Вставить("ОткрытьУзел", "nodeopen");
Команда.Вставить("ЗакрытьУзел", "nodeclose");
// Команда.Вставить("УзелСтруктура", "struct");
// Команда.Вставить("УзелПросмотр", "view");
Команда.Вставить("ОбновитьУзел", "nodereload");
Команда.Вставить("НоваяВкладка", "newtab");
Команда.Вставить("ВыбратьВкладку", "tabselect");
Команда.Вставить("ЗакрытьВкладку", "tabclose");
Команда.Вставить("РедактироватьЗначение", "valuedit");
Команда.Вставить("ЗначениеУзла", "showvalue");
// Команда.Вставить("ЗначениеОбъекта", "showenv");
Команда.Вставить("НовоеЗначениеУзла", "submitvalue");
Команда.Вставить("НовоеИмяУзла", "submitname");
Команда.Вставить("РедактироватьИмя", "namedit");
Команда.Вставить("РедактироватьУзел", "editnode");
Команда.Вставить("ЗагрузитьHTML", "importhtml");
Команда.Вставить("СохранитьУзел", "savenode");
Команда.Вставить("НовыйРодитель", "paradd");
Команда.Вставить("НовыйАтрибут", "attradd");
Команда.Вставить("НовыйДочерний", "childadd");
Команда.Вставить("СтруктураДанных", "structwin");
Команда.Вставить("СохранитьДанные", "savedata");
Команда.Вставить("РежимРедактор", "designmode");
Команда.Вставить("РежимПросмотр", "viewmode");
Команда.Вставить("ОбновитьДанные", "upddata");
Команда.Вставить("ПриИзменении", "onchange");
Команда.Вставить("ПриНажатии", "onclick");
Команда.Вставить("ПриОтправке", "onsubmit");
Команда.Вставить("МенюРедактора", "designmenu");
Команда.Вставить("НовыйСоседний", "nextadd");
Команда.Вставить("УдалитьУзел", "noderemove");
Команда.Вставить("КопироватьУзел", "nodecopy");
Команда.Вставить("ВырезатьУзел", "nodecut");
Команда.Вставить("ВставитьАтрибут", "nodepasteattr");
Команда.Вставить("ВставитьДочерний", "nodepastechild");
Команда.Вставить("ВставитьСоседний", "nodepastenext");
Команда.Вставить("УдалитьАтрибуты", "attremove");
Команда.Вставить("УдалитьРодителя", "parremove");
Команда.Вставить("ЗавершитьПроцесс", "termproc");
Команда.Вставить("ОстановитьСервер", "stopserver");
Команда.Вставить("ПерезапуститьСервер", "restartserver");
Команда.Вставить("Авторизация", "auth");
Команда.Вставить("Регистрация", "reg");
Команда.Вставить("УстановитьПараметры", "init");

Если АргументыКоманднойСтроки.Количество() Тогда
	ОбработатьСоединения();
КонецЕсли;
