Перем Связи;
Перем Запись;


Функция ОткрытьПоток(парЗапись)

	Если Запись = парЗапись Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запись = парЗапись;

	Если НЕ Связи = Неопределено Тогда
		Связи.Закрыть();
	КонецЕсли;

	Если Запись = 1 Тогда
		Связи =	ФайловыеПотоки.ОткрытьДляЗаписи(ОбъединитьПути(ТекущийКаталог(), "morph", "Связи1.dat"));
	Иначе
		Связи =	ФайловыеПотоки.ОткрытьДляЧтения(ОбъединитьПути(ТекущийКаталог(), "morph", "Связи1.dat"));
	КонецЕсли;

КонецФункции // ОткрытьПоток()


Функция СтрокуВМассив(стр, в = Неопределено);

	м = Новый Массив();
	Если НЕ в = Неопределено Тогда
		м.Добавить(в);
	КонецЕсли;
	дстр = СтрДлина(стр);
	Для н = 1 По дстр Цикл
		м.Добавить(КодСимвола(Сред(стр, н, 1)));
	КонецЦикла;

	Возврат м;

КонецФункции // СтрокуВМассив()


Функция ДобавитьЗначение(Знач гр)

	// пройти по дереву
	ОткрытьПоток(0);
	буф = Новый БуферДвоичныхДанных(16);

	н = 0;
	к = 1;
	рн = 0;

	сгр = гр.Количество();

	Если НЕ Связи.Размер() = 0 Тогда

		Пока Истина Цикл
			ф = гр.Получить(к - 1);
			Пока Истина Цикл
				Связи.Перейти(н, ПозицияВПотоке.Начало);
				Связи.Прочитать(буф, 0, 16);
				ф1 = буф.ПрочитатьЦелое32(0);
				нн = буф.ПрочитатьЦелое32(4); // позиция следующего
				Если ф1 = ф Тогда  // найден элемент
					рн = н;
					к = к + 1;
					Если НЕ к > сгр Тогда
						нн = буф.ПрочитатьЦелое32(8); // позиция вложенного
						Если нн = 0 Тогда // создать ссылку на вложенный
							ОткрытьПоток(1);
							кн = Связи.Размер();
							буф.ЗаписатьЦелое32(8, кн); // вложенный в конец
							Связи.Перейти(н, ПозицияВПотоке.Начало);
							Связи.Записать(буф, 0, 14);
							//Связи.СброситьБуферы();
						КонецЕсли;
					КонецЕсли;
					Прервать;
				КонецЕсли;
				нн = буф.ПрочитатьЦелое32(4); // позиция следующего
				Если нн = 0 Тогда // это последний
					ОткрытьПоток(1);
					кн = Связи.Размер();
					буф.ЗаписатьЦелое32(4, кн); // соседний в конец
					Связи.Перейти(н, ПозицияВПотоке.Начало);
					Связи.Записать(буф, 0, 16);
					//Связи.СброситьБуферы();
					Прервать;
				КонецЕсли;
				н = нн;
			КонецЦикла;
			Если нн = 0 ИЛИ к > сгр Тогда
				Прервать;
			КонецЕсли;
			н = нн;
		КонецЦикла;

	КонецЕсли;

	Если НЕ к > сгр Тогда

		// создать новые элементы
		ОткрытьПоток(1);

		Для к = к по сгр Цикл
			ф = гр.Получить(к - 1);
			Связи.Перейти(0, ПозицияВПотоке.Конец);
			н = Связи.ТекущаяПозиция();
			Если НЕ к = сгр Тогда
				кн = н + 16;
			Иначе
				кн = 0;
			КонецЕсли;
			буф.ЗаписатьЦелое32(0, ф); // код символа
			буф.ЗаписатьЦелое32(4, 0); // нет соседнего
			буф.ЗаписатьЦелое32(8, кн); // вложенный в конец
			буф.ЗаписатьЦелое32(12, рн); // родитель
			Связи.Записать(буф, 0, 16);
			рн = н;
		КонецЦикла;

		Связи.СброситьБуферы();

	КонецЕсли;

	Возврат н;

КонецФункции // ДобавитьЗначение()

Словарь = Новый ТекстовыйДокумент;
Словарь.Прочитать("morph/dict.opcorpora.txt");
Сообщить("Прочитал словарь");

Номер = Неопределено;
нФорма = Неопределено;
нЛемма = Неопределено;

м = Новый Массив;
м.Добавить(0);

ДобавитьЗначение(м);

Сообщить(Словарь.КоличествоСтрок());

лем = Новый Соответствие;

Для нн = 1 по Словарь.КоличествоСтрок() Цикл

	Если нн%1000 = 0 Тогда
		Сообщить(нн);
	КонецЕсли;

	стр = Словарь.ПолучитьСтроку(нн);

	Если стр = "" Тогда
		Номер = Неопределено;
		нФорма = Неопределено;
	ИначеЕсли Номер = Неопределено Тогда
		Номер = стр;
	Иначе
		мс = стрРазделить(стр, Символы.Таб);
		Если нФорма = Неопределено Тогда
			нЛемма = лем.Получить(мс[1]);
			Если нЛемма = Неопределено Тогда
				нЛемма = ДобавитьЗначение(СтрокуВМассив(СтрЗаменить(СокрЛП(мс[1]), ",", " "), 2));
				лем.Вставить(мс[1], нЛемма);
			КонецЕсли;
			нФорма = ДобавитьЗначение(СтрокуВМассив(СокрЛП(мс[0]), 1));

			м = СтрокуВМассив(СокрЛП(мс[0]), 1);
			м.Добавить(1);
			м.Добавить(нЛемма);
			м.Добавить(нФорма);
			м.Добавить(нЛемма);
			ДобавитьЗначение(м);
		Иначе
			сЛемма = лем.Получить(мс[1]);
			Если сЛемма = Неопределено Тогда
				сЛемма = ДобавитьЗначение(СтрокуВМассив(СтрЗаменить(СокрЛП(мс[1]), ",", " "), 2));
				лем.Вставить(мс[1], сЛемма);
			КонецЕсли;

			м = СтрокуВМассив(СокрЛП(мс[0]), 1);
			м.Добавить(1);
			м.Добавить(сЛемма);
			м.Добавить(нФорма);
			м.Добавить(нЛемма);
			ДобавитьЗначение(м);

		КонецЕсли;
	КонецЕсли;

КонецЦикла;

Если НЕ Связи = Неопределено Тогда
	Связи.Закрыть();
КонецЕсли;

Сообщить("Записал Связи");
