Перем Связи;
Перем Запись;


Функция ОткрытьПоток(парЗапись)

	Если Запись = парЗапись Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запись = парЗапись;

	Если НЕ Связи = Неопределено Тогда
		Связи.Закрыть();
	КонецЕсли;

	Если Запись = 1 Тогда
		Связи =	ФайловыеПотоки.ОткрытьДляЗаписи(ОбъединитьПути(ТекущийКаталог(), "morph", "Связи.dat"));
	Иначе
		Связи =	ФайловыеПотоки.ОткрытьДляЧтения(ОбъединитьПути(ТекущийКаталог(), "morph", "Связи.dat"));
	КонецЕсли;

КонецФункции // ОткрытьПоток()


Функция ДобавитьЗначение(в, Знач гр)

	// пройти по дереву
	ОткрытьПоток(0);
	буф = Новый БуферДвоичныхДанных(14);

	н = 0;
	к = 1;
	рн = 0;

	гр = Символ(в) + гр;

	сгр = СтрДлина(гр);

	Если НЕ Связи.Размер() = 0 Тогда

		Пока Истина Цикл
			ф = КодСимвола(Сред(гр, к, 1));
			Пока Истина Цикл
				Связи.Перейти(н, ПозицияВПотоке.Начало);
				Связи.Прочитать(буф, 0, 14);
				ф1 = буф.ПрочитатьЦелое16(0);
				нн = буф.ПрочитатьЦелое32(2); // позиция следующего
				Если ф1 = ф Тогда  // найден элемент
					рн = н;
					к = к + 1;
					Если НЕ к > сгр Тогда
						нн = буф.ПрочитатьЦелое32(6); // позиция вложенного
						Если нн = 0 Тогда // создать ссылку на вложенный
							ОткрытьПоток(1);
							кн = Связи.Размер();
							буф.ЗаписатьЦелое32(6, кн); // вложенный в конец
							Связи.Перейти(н, ПозицияВПотоке.Начало);
							Связи.Записать(буф, 0, 14);
							//Связи.СброситьБуферы();
						КонецЕсли;
					КонецЕсли;
					Прервать;
				КонецЕсли;
				нн = буф.ПрочитатьЦелое32(2); // позиция следующего
				Если нн = 0 Тогда // это последний
					ОткрытьПоток(1);
					кн = Связи.Размер();
					буф.ЗаписатьЦелое32(2, кн); // соседний в конец
					Связи.Перейти(н, ПозицияВПотоке.Начало);
					Связи.Записать(буф, 0, 14);
					//Связи.СброситьБуферы();
					Прервать;
				КонецЕсли;
				н = нн;
			КонецЦикла;
			Если нн = 0 ИЛИ к > сгр Тогда
				Прервать;
			КонецЕсли;
			н = нн;
		КонецЦикла;

	КонецЕсли;

	Если НЕ к > сгр Тогда

		// создать новые элементы
		ОткрытьПоток(1);

		Для к = к по сгр Цикл
			ф = КодСимвола(Сред(гр, к, 1));
			Связи.Перейти(0, ПозицияВПотоке.Конец);
			н = Связи.ТекущаяПозиция();
			Если НЕ к = сгр Тогда
				кн = н + 14;
			Иначе
				кн = 0;
			КонецЕсли;
			буф.ЗаписатьЦелое16(0, ф); // код символа
			буф.ЗаписатьЦелое32(2, 0); // нет соседнего
			буф.ЗаписатьЦелое32(6, кн); // вложенный в конец
			буф.ЗаписатьЦелое32(10, рн); // родитель
			Связи.Записать(буф, 0, 14);
			рн = н;
		КонецЦикла;

		Связи.СброситьБуферы();

	КонецЕсли;

	Возврат н;

КонецФункции // ДобавитьЗначение()


Функция ПолучитьЗначения(Знач н, Знач ф, мф = Неопределено, Все = Ложь, Первый = Истина)
	рез = Неопределено;
	буф = Новый БуферДвоичныхДанных(14);
	Пока Истина Цикл
		Связи.Перейти(н, ПозицияВПотоке.Начало);
		Связи.Прочитать(буф, 0, 14);
		ф1 = буф.ПрочитатьЦелое16(0);
		Если НЕ ф1 = 0 Тогда
			вн = буф.ПрочитатьЦелое32(6); // позиция вложенного
			Если НЕ вн = 0 И НЕ (ф1 = 9 И НЕ Все) Тогда // есть вложение
				рез = ПолучитьЗначения(вн, ф + Символ(ф1), мф, Все, Ложь);
			Иначе
				рез = ф + Символ(ф1);
				Если НЕ мф = Неопределено Тогда
					мф.Добавить(рез);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		н = буф.ПрочитатьЦелое32(2); // позиция следующего
		Если н = 0 ИЛИ Первый Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат рез;
КонецФункции // ПолучитьЗначения()


Функция ПолучитьЗначение(н)

	гр = "";

	буф = Новый БуферДвоичныхДанных(14);

	ОткрытьПоток(0);

	Пока Истина Цикл
		Связи.Перейти(н, ПозицияВПотоке.Начало);
		Связи.Прочитать(буф, 0, 14);
		ф = буф.ПрочитатьЦелое16(0);
		н = буф.ПрочитатьЦелое32(10); // позиция родителя
		Если н = 0 Тогда // это первый
			Прервать;
		КонецЕсли;
		гр = Символ(ф) + гр;
	КонецЦикла;

	Возврат гр;

КонецФункции // ПолучитьЗначение()


Функция НайтиЗначение(в, Знач нгр)

	нгр = Символ(в) + нгр;
	сгр = СтрДлина(нгр);

	// пройти по дереву

	буф = Новый БуферДвоичныхДанных(14);

	ОткрытьПоток(0);

	н = 0;
	к = 1;

	Пока Истина Цикл
		ф = КодСимвола(Сред(нгр, к, 1));
		Пока Истина Цикл
			Связи.Перейти(н, ПозицияВПотоке.Начало);
			Связи.Прочитать(буф, 0, 14);
			ф1 = буф.ПрочитатьЦелое16(0);
			Если ф1 = ф ИЛИ ф = 42 Тогда  // найден элемент
				Если ф = 42 Тогда // *
					Если ф1 = КодСимвола(Сред(нгр, к + 1, 1)) Тогда
						к = к + 1;
					КонецЕсли;
				Иначе
					к = к + 1;
				КонецЕсли;
				Если НЕ к > сгр Тогда
					н = буф.ПрочитатьЦелое32(6); // позиция вложенного
				КонецЕсли;
				Прервать;
			КонецЕсли;
			н = буф.ПрочитатьЦелое32(2); // позиция следующего
			Если н = 0 ИЛИ к > сгр Тогда // это последний
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если н = 0 ИЛИ к > сгр Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат н;

КонецФункции // НайтиЗначение()


Словарь = Новый ТекстовыйДокумент;
Словарь.Прочитать("morph/dict.opcorpora.txt");
Сообщить("Прочитал словарь");

Номер = Неопределено;
нФорма = Неопределено;
нЛемма = Неопределено;

ДобавитьЗначение(0, Символ(0));


Сообщить(Словарь.КоличествоСтрок());

лем = Новый Соответствие;

Для нн = 1 по 5000 Цикл //Словарь.КоличествоСтрок() Цикл

	Если нн%1000 = 0 Тогда
		Сообщить(нн);
	КонецЕсли;

	стр = Словарь.ПолучитьСтроку(нн);

	Если стр = "" Тогда
		Номер = Неопределено;
		нФорма = Неопределено;
	ИначеЕсли Номер = Неопределено Тогда
		Номер = стр;
	Иначе
		мс = стрРазделить(стр, Символы.Таб);
		Если нФорма = Неопределено Тогда
			нФорма = ДобавитьЗначение(1, СокрЛП(мс[0]));
			нЛемма = лем.Получить(мс[1]);
			Если нЛемма = Неопределено Тогда
				нЛемма = ДобавитьЗначение(2, СтрЗаменить(СокрЛП(мс[1]), ",", " "));
				лем.Вставить(мс[1], нЛемма);
			КонецЕсли;
			ДобавитьЗначение(3, "" + нФорма + Символы.Таб + нЛемма + Символы.Таб + нФорма + Символы.Таб + нЛемма);
			//Приостановить(50);
		Иначе
			сФорма = ДобавитьЗначение(1, СокрЛП(мс[0]));
			сЛемма = лем.Получить(мс[1]);
			Если сЛемма = Неопределено Тогда
				сЛемма = ДобавитьЗначение(2, СтрЗаменить(СокрЛП(мс[1]), ",", " "));
				лем.Вставить(мс[1], сЛемма);
			КонецЕсли;

			//Сообщить(СокрЛП(мс[0]) + " " + сФорма + Символы.Таб + сЛемма + Символы.Таб + нФорма + Символы.Таб + нЛемма);
			ДобавитьЗначение(3, "" + сФорма + Символы.Таб + сЛемма + Символы.Таб + нФорма + Символы.Таб + нЛемма);

		КонецЕсли;
	КонецЕсли;

КонецЦикла;

Если НЕ Связи = Неопределено Тогда
	Связи.Закрыть();
КонецЕсли;

Сообщить("Записал Связи");
