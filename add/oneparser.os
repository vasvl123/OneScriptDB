//
// Включает программный код https://github.com/khorevaa/OneShell


#Область Константы

Перем Дескрипторы;                  // Перечисление
Перем Лексемы;                    // Перечисление
Перем ВидыОбъектов;               // Перечисление
Перем ВидыРазделителей;             // Перечисление
Перем УнарныеОперации;           // массив (один из Лексемы)
Перем ПростойЛитерал;             // массив (один из Лексемы)
Перем ОператорыСравнения;       // массив (один из Лексемы)
Перем ИгнорируемыеЛексемы;             // массив (один из Лексемы)
Перем НачальныеЛексемыВыражений; // массив (один из Лексемы)
Перем Операторы;                 // Структура
Перем ПустойМассив;                // массив
Перем Подробно;

#КонецОбласти // Константы

#Область Инициализация

Процедура Инициализация()

	СоздатьПеречисления();

	УнарныеОперации = Новый Массив;
	УнарныеОперации.Добавить(Лексемы.Добавить);
	УнарныеОперации.Добавить(Лексемы.Вычесть);
	УнарныеОперации.Добавить(Лексемы.НЕ);

	ПростойЛитерал = Новый Массив;
	ПростойЛитерал.Добавить(Лексемы.Число);
	ПростойЛитерал.Добавить(Лексемы.Строка);
	ПростойЛитерал.Добавить(Лексемы.ДатаВремя);
	ПростойЛитерал.Добавить(Лексемы.Истина);
	ПростойЛитерал.Добавить(Лексемы.Ложь);
	ПростойЛитерал.Добавить(Лексемы.Неопределено);

	ОператорыСравнения = Новый Массив;
	ОператорыСравнения.Добавить(Лексемы.Равно);
	ОператорыСравнения.Добавить(Лексемы.НеРавно);
	ОператорыСравнения.Добавить(Лексемы.Меньше);
	ОператорыСравнения.Добавить(Лексемы.Больше);
	ОператорыСравнения.Добавить(Лексемы.МеньшеИлиРавно);
	ОператорыСравнения.Добавить(Лексемы.БольшеИлиРавно);

	ИгнорируемыеЛексемы = Новый Массив;
	ИгнорируемыеЛексемы.Добавить(Лексемы.Комментарий);
	ИгнорируемыеЛексемы.Добавить(Лексемы.Препроцессор);
	ИгнорируемыеЛексемы.Добавить(Лексемы.Директива);

	НачальныеЛексемыВыражений = Новый Массив;
	НачальныеЛексемыВыражений.Добавить(Лексемы.Добавить);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Вычесть);
	НачальныеЛексемыВыражений.Добавить(Лексемы.НЕ);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Идентификатор);
	НачальныеЛексемыВыражений.Добавить(Лексемы.ОткрСкобкаОбычная);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Число);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Строка);
	НачальныеЛексемыВыражений.Добавить(Лексемы.ДатаВремя);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Вопрос);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Новый);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Истина);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Ложь);
	НачальныеЛексемыВыражений.Добавить(Лексемы.Неопределено);

	Операторы = Новый Структура(
		"Равно, НеРавно, Меньше, Больше, МеньшеИлиРавно, БольшеИлиРавно, Добавить, Вычесть, Умножить, Разделить, Остаток, ИЛИ, И, НЕ",
		"=", "<>", "<", ">", "<=", ">=", "+", "-", "*", "/", "%", "ИЛИ", "И", "НЕ"
	);

	ПустойМассив = Новый Массив;

КонецПроцедуры // Инициализация()

Процедура СоздатьПеречисления()
	Дескрипторы = Дескрипторы();
	Лексемы = Лексемы(Дескрипторы);
	ВидыОбъектов = ВидыОбъектов();
КонецПроцедуры // СоздатьПеречисления()

#КонецОбласти // Инициализация

#Область Перечисления

Функция Дескрипторы() Экспорт
	Перем Дескрипторы;

	Дескрипторы = Перечисление(Новый Структура,
		"Если.If, Тогда.Then, ИначеЕсли.ElsIf, Иначе.Else, КонецЕсли.EndIf,
		|Для.For, Каждого.Each, Из.In, По.To, Пока.While, Цикл.Do, КонецЦикла.EndDo,
		|Процедура.Procedure, КонецПроцедуры.EndProcedure, Функция.Function, КонецФункции.EndFunction,
		|Перем.Var, Знач.Val, Возврат.Return, Продолжить.Continue, Прервать.Break,
		|И.And, ИЛИ.Or, НЕ.Not,
		|Попытка.Try, Исключение.Except, ВызватьИсключение.Raise, КонецПопытки.EndTry,
		|Новый.Новый, Выполнить.Execute, Экспорт.Export,
		|Истина.True, Ложь.False, Неопределено.Undefined,
		|Выбор.Case, Когда.When, КонецВыбора.EndCase" // Новый Дескрипторы
	);

	Возврат Дескрипторы;

КонецФункции // Дескрипторы()

Функция Лексемы(Дескрипторы = Неопределено) Экспорт
	Перем Лексемы;

	Если Дескрипторы = Неопределено Тогда
		Дескрипторы = Дескрипторы();
	КонецЕсли;

	Лексемы = Перечисление(Дескрипторы(),

		// Литералы

		"Идентификатор, Число, Строка, ДатаВремя,
		// части строки
		|НачалоСтроки, СодержимоеСтроки, КонецСтроки,

		// Операторы

		// =   <>    <    >   <=   >=    +    -    *    /    %
		|Равно, НеРавно, Меньше, Больше, МеньшеИлиРавно, БольшеИлиРавно, Добавить, Вычесть, Умножить, Разделить, Остаток,
		//    (       )       [       ]       {       }
		|ОткрСкобкаОбычная, ЗакрСкобкаОбычная, ОткрСкобкаКвадратная, ЗакрСкобкаКвадратная, ОткрСкобкаФигурная, ЗакрСкобкаФигурная,
		//     ?      ,       .      :          ;
		|Вопрос, Запятая, Точка, Двоеточие, ТочкаСЗапятой,

		// Новый Предложения

		//      +=
		|Увеличить,

		// Другие

		//         //             #          &
		|КонецФайла, Комментарий, Препроцессор, Директива"

	);

	Возврат Лексемы;

КонецФункции // Лексемы()

Функция ВидыОбъектов() Экспорт
	Перем ВидыОбъектов;

	ВидыОбъектов = Перечисление(Новый Структура,
		"Переменная,"
		"Параметр,"
		"Процедура,"
		"Функция,"
		"Конструктор,"
		"Неизвестный,"
	);

	Возврат ВидыОбъектов;

КонецФункции // ВидыОбъектов()

Функция ВидыРазделителей() Экспорт
	Перем ВидыРазделителей;

	ВидыРазделителей = Перечисление(Новый Структура,
		"Идентификатор,"
		"Индекс,"
		"Вызов,"
	);

	Возврат ВидыРазделителей;

КонецФункции // ВидыРазделителей()

Функция Перечисление(Структура, Ключи)
	Перем СписокЭлементов, Значение;

	Для Каждого Элементы Из СтрРазделить(Ключи, ",", Ложь) Цикл
		СписокЭлементов = СтрРазделить(Элементы, ".", Ложь);
		Значение = СокрЛП(СписокЭлементов[0]);
		Для Каждого Элемент Из СписокЭлементов Цикл
			Структура.Вставить(СокрЛП(Элемент), Значение);
		КонецЦикла;
	КонецЦикла;

	Возврат Структура;

КонецФункции // Перечисление()

#КонецОбласти // Перечисления

#Область Разбор

Функция Разбор(Источник) Экспорт
	Перем Разбор;

	Разбор = Новый Структура(
		"Источник," // Строка
		"Длина,"    // Число
		"Позиция,"    // Число
		"Элемент,"    // Строка (один из Лексемы)
		"Литерал,"    // Строка
		"Символ,"   // Строка
		"Строка,"   // Число
		"Столбец" // Число
	);

	Разбор.Источник = Источник;
	Разбор.Длина = СтрДлина(Источник);
	Разбор.Строка = 1;
	Разбор.Столбец = 0;
	Разбор.Позиция = 0;
	Разбор.Литерал = "";

	Инициализация();

	Возврат Разбор;

КонецФункции // Разбор()

Функция Разобрать(Разбор) Экспорт
	Перем Символ, Элемент, Литерал;
	ПропуститьПустоту(Разбор);
	Символ = Разбор.Символ;
	Если ЭтоБуква(Символ) Тогда
		Литерал = РазобратьИдентификатор(Разбор);
		Элемент = Проверить(Литерал);
	ИначеЕсли ЭтоЦифра(Символ) Тогда
		Литерал = РазобратьЧисло(Разбор);
		Элемент = Лексемы.Число;
	ИначеЕсли Символ = """" ИЛИ Символ = "|" Тогда
		Литерал = РазобратьСтроку(Разбор);
		Элемент = ЭлементСтроки(Литерал);
	ИначеЕсли Символ = "'" Тогда
		Литерал = РазобратьДатуВремя(Разбор);
		Элемент = Лексемы.ДатаВремя;
	ИначеЕсли Символ = "=" Тогда
		Элемент = Лексемы.Равно;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "<" Тогда
		Если СледСимвол(Разбор) = "=" Тогда
			Литерал = "<=";
			Элемент = Лексемы.МеньшеИлиРавно;
			СледСимвол(Разбор);
		ИначеЕсли Разбор.Символ = ">" Тогда
			Литерал = "<>";
			Элемент = Лексемы.НеРавно;
			СледСимвол(Разбор);
		Иначе
			Элемент = Лексемы.Меньше;
		КонецЕсли;
	ИначеЕсли Символ = ">" Тогда
		Если СледСимвол(Разбор) = "=" Тогда
			Литерал = ">=";
			Элемент = Лексемы.БольшеИлиРавно;
			СледСимвол(Разбор);
		Иначе
			Элемент = Лексемы.Больше;
		КонецЕсли;
	ИначеЕсли Символ = "+" Тогда
		Если СледСимвол(Разбор) = "=" Тогда
			Литерал = "+=";
			Элемент = Лексемы.Увеличить;
			СледСимвол(Разбор);
		Иначе
			Элемент = Лексемы.Добавить;
		КонецЕсли;
	ИначеЕсли Символ = "-" Тогда
		Элемент = Лексемы.Вычесть;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "*" Тогда
		Элемент = Лексемы.Умножить;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "/" Тогда
		Если СледСимвол(Разбор) = "/" Тогда
			Литерал = РазобратьКомментарий(Разбор);
			Элемент = Лексемы.Комментарий;
		Иначе
			Элемент = Лексемы.Разделить;
		КонецЕсли;
	ИначеЕсли Символ = "%" Тогда
		Элемент = Лексемы.Остаток;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "(" Тогда
		Элемент = Лексемы.ОткрСкобкаОбычная;
		СледСимвол(Разбор);
	ИначеЕсли Символ = ")" Тогда
		Элемент = Лексемы.ЗакрСкобкаОбычная;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "[" Тогда
		Элемент = Лексемы.ОткрСкобкаКвадратная;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "]" Тогда
		Элемент = Лексемы.ЗакрСкобкаКвадратная;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "?" Тогда
		Элемент = Лексемы.Вопрос;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "," Тогда
		Элемент = Лексемы.Запятая;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "." Тогда
		Элемент = Лексемы.Точка;
		СледСимвол(Разбор);
	ИначеЕсли Символ = ":" Тогда
		Элемент = Лексемы.Двоеточие;
		СледСимвол(Разбор);
	ИначеЕсли Символ = ";" Тогда
		Элемент = Лексемы.ТочкаСЗапятой;
		СледСимвол(Разбор);
	ИначеЕсли Символ = "" Тогда
		Элемент = Лексемы.КонецФайла;
	ИначеЕсли Символ = "&" Тогда
		Литерал = РазобратьКомментарий(Разбор);
		Элемент = Лексемы.Директива;
	ИначеЕсли Символ = "#" Тогда
		Литерал = РазобратьКомментарий(Разбор);
		Элемент = Лексемы.Препроцессор;
	Иначе
		Ошибка(Разбор, "Неизвестный Символ");
	КонецЕсли;
	Если ЗначениеЗаполнено(Литерал) Тогда
		Разбор.Литерал = Литерал;
	Иначе
		Разбор.Литерал = Символ;
	КонецЕсли;
	Разбор.Элемент = Элемент;
	Возврат Элемент;
КонецФункции // Разобрать()

Функция СледСимвол(Разбор)
	Если Разбор.Символ <> "" Тогда
		Разбор.Позиция = Разбор.Позиция + 1;
		Разбор.Столбец = Разбор.Столбец + 1;
		Разбор.Символ = Сред(Разбор.Источник, Разбор.Позиция, 1);
	КонецЕсли;
	Возврат Разбор.Символ;
КонецФункции // СледСимвол()

Функция ПропуститьПустоту(Разбор)
	Перем Символ;
	Символ = Разбор.Символ;
	Пока ПустаяСтрока(Символ) И Символ <> "" Цикл
		Если Символ = Символы.ПС Тогда
			Разбор.Строка = Разбор.Строка + 1;
			Разбор.Столбец = 0;
		КонецЕсли;
		Символ = СледСимвол(Разбор);
	КонецЦикла;
КонецФункции // ПропуститьПустоту()

Функция РазобратьКомментарий(Разбор)
	Перем Длина, Символ;
	Длина = 0;
	Символ = СледСимвол(Разбор);
	Пока Символ <> Символы.ПС И Символ <> "" Цикл
		Длина = Длина + 1;
		Символ = СледСимвол(Разбор);
	КонецЦикла;
	Возврат Сред(Разбор.Источник, Разбор.Позиция - Длина, Длина);
КонецФункции // РазобратьКомментарий()

Функция РазобратьИдентификатор(Разбор)
	Перем Длина, Символ;
	Длина = 1;
	Символ = СледСимвол(Разбор);
	Пока ЭтоБуква(Символ) ИЛИ ЭтоЦифра(Символ) Цикл
		Длина = Длина + 1;
		Символ = СледСимвол(Разбор);
	КонецЦикла;
	Возврат Сред(Разбор.Источник, Разбор.Позиция - Длина, Длина);
КонецФункции // РазобратьИдентификатор()

Функция РазобратьЧисло(Разбор)
	Перем Длина;
	Длина = РазобратьЧислоДлин(Разбор); // Длина >= 1
	Если Разбор.Символ = "." Тогда
		Длина = Длина + РазобратьЧислоДлин(Разбор);
	КонецЕсли;
	Возврат Сред(Разбор.Источник, Разбор.Позиция - Длина, Длина);
КонецФункции // РазобратьЧисло()

Функция РазобратьЧислоДлин(Разбор)
	Перем Длина;
	Длина = 1;
	Пока ЭтоЦифра(СледСимвол(Разбор)) Цикл
		Длина = Длина + 1;
	КонецЦикла;
	Возврат Длина;
КонецФункции // РазобратьЧислоДлин()

Функция РазобратьСтроку(Разбор)
	Перем Длина;
	Длина = РазобратьСтрокуДлин(Разбор);
	Пока СледСимвол(Разбор) = """" Цикл
		Длина = Длина + РазобратьСтрокуДлин(Разбор);
	КонецЦикла;
	Возврат Сред(Разбор.Источник, Разбор.Позиция - Длина, Длина);
КонецФункции // РазобратьСтроку()

Функция РазобратьСтрокуДлин(Разбор)
	Перем Длина, Символ;
	Длина = 1;
	Символ = СледСимвол(Разбор);
	Пока Символ <> """" И Символ <> Символы.ПС И Символ <> "" Цикл
		Длина = Длина + 1;
		Символ = СледСимвол(Разбор);
	КонецЦикла;
	Если Символ = Символы.ПС Тогда
		Разбор.Строка = Разбор.Строка + 1;
	КонецЕсли;
	Возврат Длина + ?(Символ <> "", 1, 0);
КонецФункции // РазобратьСтрокуДлин()

Функция РазобратьДатуВремя(Разбор)
	Перем Длина, Символ;
	Длина = 1;
	Символ = СледСимвол(Разбор);
	Пока Символ <> "'" И Символ <> "" Цикл
		Длина = Длина + 1;
		Символ = СледСимвол(Разбор);
	КонецЦикла;
	Если Символ = "'" Тогда
		Длина = Длина + 1;
		СледСимвол(Разбор);
	Иначе
		Ошибка(Разбор, "Ожидается `'`");
	КонецЕсли;
	Возврат Сред(Разбор.Источник, Разбор.Позиция - Длина, Длина);
КонецФункции // РазобратьДатуВремя()

#КонецОбласти // Разбор

#Область Дерево

Функция Модуль(Объявления, Предложения)
	Перем Модуль;

	Модуль = Новый Структура(
		"Объявления,"      // массив (один из Объявления)
		"Предложения" // массив (один из Предложения)
	,
	Объявления, Предложения);

	Возврат Модуль;

КонецФункции // Модуль()

#Область Окружение

Функция Окружение(Внешний)
	Перем Окружение;

	Окружение = Новый Структура(
		"Внешний,"   // Структура (Окружение)
		"Объекты" // Структура as map[Строка](Объект)
	);

	Окружение.Внешний = Внешний;
	Окружение.Объекты = Новый Структура;

	Возврат Окружение;

КонецФункции // Окружение()

Функция Объект(Вид, Имя, ТипОбъекта = Неопределено)
	Перем Объект;

	Объект = Новый Структура(
		"Вид," // Строка (один из ВидыОбъектов)
		"Имя" // Строка
	,
	Вид, Имя);

	Если ТипОбъекта <> Неопределено Тогда
		Объект.Вставить("ТипОбъекта", ТипОбъекта); // Структура
	КонецЕсли;

	Возврат Объект;

КонецФункции // Объект()

#КонецОбласти // Окружение

#Область Объявления

Функция ОбъявлениеПеременной(Объект, Инициализация = Ложь, Значение = Неопределено)
	Перем ОбъявлениеПеременной;

	ОбъявлениеПеременной = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Объект"   // Структура (Объект)
	,
	"ОбъявлениеПеременной", Объект);

	Если Инициализация Тогда
		ОбъявлениеПеременной.Вставить("Значение", Значение); // Структура (один из Выражения)
	КонецЕсли;

	Возврат ОбъявлениеПеременной;

КонецФункции // ОбъявлениеПеременной()

Функция ОбъявлениеСпискаПеременных(СписокПеременных)
	Перем ОбъявлениеСпискаПеременных;

	ОбъявлениеСпискаПеременных = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"СписокПеременных"  // массив (ОбъявлениеПеременной)
	,
	"ОбъявлениеСпискаПеременных", СписокПеременных);

	Возврат ОбъявлениеСпискаПеременных;

КонецФункции // ОбъявлениеСпискаПеременных()

Функция ОбъявлениеПроцедуры(Объект, Объявления, Предложения)
	Перем ОбъявлениеПроцедуры;

	ОбъявлениеПроцедуры = Новый Структура(
		"ТипУзла,"   // Строка (ТипОбъекта из этого Структура)
		"Объект,"     // Структура (Объект)
		"Объявления,"      // массив (один из Объявления)
		"Предложения" // массив (один из Предложения)
	,
	"ОбъявлениеПроцедуры", Объект, Объявления, Предложения);

	Возврат ОбъявлениеПроцедуры;

КонецФункции // ОбъявлениеПроцедуры()

Функция ОбъявлениеФункции(Объект, Объявления, Предложения)
	Перем ОбъявлениеФункции;

	ОбъявлениеФункции = Новый Структура(
		"ТипУзла,"   // Строка (ТипОбъекта из этого Структура)
		"Объект,"     // Структура (Объект)
		"Объявления,"      // массив (один из Объявления)
		"Предложения" // массив (один из Предложения)
	,
	"ОбъявлениеФункции", Объект, Объявления, Предложения);

	Возврат ОбъявлениеФункции;

КонецФункции // ОбъявлениеФункции()

Функция ОбъявлениеПараметров(Объект, Инициализация = Ложь, Значение = Неопределено)
	Перем ОбъявлениеПараметров;

	ОбъявлениеПараметров = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Объект"   // Структура (Объект)
	,
	"ОбъявлениеПараметров", Объект);

	Если Инициализация Тогда
		ОбъявлениеПараметров.Вставить("Значение", Значение); // Структура (один из Выражения)
	КонецЕсли;

	Возврат ОбъявлениеПараметров;

КонецФункции // ОбъявлениеПараметров()

#КонецОбласти // Объявления

#Область Выражения

Функция ПростойЛитерал(Вид, Значение)
	Перем ПростойЛитерал;

	ПростойЛитерал = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Вид,"     // Строка (один из Лексемы)
		"Значение"    // один из простых типов
	,
	"ПростойЛитерал", Вид, Значение);

	Возврат ПростойЛитерал;

КонецФункции // ПростойЛитерал()

Функция Разделитель(Вид, Значение)
	Перем Разделитель;

	Разделитель = Новый Структура(
		"Вид,"  // Строка (один из ВидыРазделителей)
		"Значение" // Строка ИЛИ массив (один из Выражения)
	,
	Вид, Значение);

	Возврат Разделитель;

КонецФункции // Разделитель()

Функция Указатель(Объект, Разделители, Вызов)
	Перем Указатель;

	Указатель = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Объект,"   // Структура (Объект)
		"Вызов"     // булево
	,
	"Указатель", Объект, Вызов);

	Если Разделители.Количество() > 0 Тогда
		Указатель.Вставить("Разделители", Разделители); // массив (Разделитель)
	КонецЕсли;

	Возврат Указатель;

КонецФункции // Указатель()

Функция УнарноеВыражение(Оператор, Операнд)
	Перем УнарноеВыражение;

	УнарноеВыражение = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Оператор," // Строка (один из Лексемы)
		"Операнд"  // один из Выражения
	,
	"УнарноеВыражение", Оператор, Операнд);

	Возврат УнарноеВыражение;

КонецФункции // УнарноеВыражение()

Функция БинарноеВыражение(Лев, Оператор, Прав)
	Перем БинарноеВыражение;

	БинарноеВыражение = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Лев,"     // один из Выражения
		"Оператор," // Строка (один из Лексемы)
		"Прав"    // один из Выражения
	,
	"БинарноеВыражение", Лев, Оператор, Прав);

	Возврат БинарноеВыражение;

КонецФункции // БинарноеВыражение()

Функция ВыражениеСравнение(Лев, Прав)
	Перем ВыражениеСравнение;

	ВыражениеСравнение = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Лев,"     // один из Выражения
		"Прав"    // один из Выражения
	,
	"ВыражениеСравнение", Лев, Прав);

	Возврат ВыражениеСравнение;

КонецФункции // ВыражениеСравнение()

Функция ВыражениеНовый(Конструктор)
	Перем ВыражениеНовый;

	ВыражениеНовый = Новый Структура(
		"ТипУзла,"    // Строка (ТипОбъекта из этого Структура)
		"Конструктор" // Структура (Указатель) ИЛИ массив (один из Выражения)
	,
	"ВыражениеНовый", Конструктор);

	Возврат ВыражениеНовый;

КонецФункции // ВыражениеНовый()

Функция ТернарноеВыражение(Условие, ЧастьТогда, ЧастьИначе)
	Перем ТернарноеВыражение;

	ТернарноеВыражение = Новый Структура(
		"ТипУзла,"  // Строка (ТипОбъекта из этого Структура)
		"Условие," // Структура (один из Выражения)
		"ЧастьТогда,"  // Структура (один из Выражения)
		"ЧастьИначе"   // Структура (один из Выражения)
	,
	"ТернарноеВыражение", Условие, ЧастьТогда, ЧастьИначе);

	Возврат ТернарноеВыражение;

КонецФункции // ТернарноеВыражение()

Функция СкобочноеВыражение(Выражение)
	Перем СкобочноеВыражение;

	СкобочноеВыражение = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Выражение"     // один из Выражения
	,
	"СкобочноеВыражение", Выражение);

	Возврат СкобочноеВыражение;

КонецФункции // СкобочноеВыражение()

#КонецОбласти // Выражения

#Область Предложения

Функция ПредлПрисваивание(Лев, Прав)
	Перем ПредлПрисваивание;

	ПредлПрисваивание = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Лев,"     // массив (Указатель)
		"Прав"    // массив (один из Выражения)
	,
	"ПредлПрисваивание", Лев, Прав);

	Возврат ПредлПрисваивание;

КонецФункции // ПредлПрисваивание()

Функция ПредлУвеличение(Лев, Прав)
	Перем ПредлУвеличение;

	ПредлУвеличение = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Лев,"     // массив (Указатель)
		"Прав"    // массив (один из Выражения)
	,
	"ПредлУвеличение", Лев, Прав);

	Возврат ПредлУвеличение;

КонецФункции // ПредлУвеличение()

Функция ПредлВозврат(СписокВыражений)
	Перем ПредлВозврат;

	ПредлВозврат = Новый Структура(
		"ТипУзла" // Строка (ТипОбъекта из этого Структура)
	,
	"ПредлВозврат");

	Если СписокВыражений <> Неопределено Тогда
		ПредлВозврат.Вставить("СписокВыражений", СписокВыражений); // массив (один из Выражения)
	КонецЕсли;

	Возврат ПредлВозврат;

КонецФункции // ПредлВозврат()

Функция ПредлПрервать()
	Перем ПредлПрервать;

	ПредлПрервать = Новый Структура(
		"ТипУзла" // Строка (ТипОбъекта из этого Структура)
	,
	"ПредлПрервать");

	Возврат ПредлПрервать;

КонецФункции // ПредлПрервать()

Функция ПредлПродолжить()
	Перем ПредлПродолжить;

	ПредлПродолжить = Новый Структура(
		"ТипУзла" // Строка (ТипОбъекта из этого Структура)
	,
	"ПредлПродолжить");

	Возврат ПредлПродолжить;

КонецФункции // ПредлПродолжить()

Функция ПредлВызватьИсключение(Выражение = Неопределено)
	Перем ПредлВызватьИсключение;

	ПредлВызватьИсключение = Новый Структура(
		"ТипУзла" // Строка (ТипОбъекта из этого Структура)
	,
	"ПредлВызватьИсключение");

	Если Выражение <> Неопределено Тогда
		ПредлВызватьИсключение.Вставить("Выражение", Выражение); // Структура (один из Выражения)
	КонецЕсли;

	Возврат ПредлВызватьИсключение;

КонецФункции // ПредлВызватьИсключение()

Функция ПредлВыполнить(Выражение)
	Перем ПредлВыполнить;

	ПредлВыполнить = Новый Структура(
		"ТипУзла," // Строка (ТипОбъекта из этого Структура)
		"Выражение"     // Структура (один из Выражения)
	,
	"ПредлВыполнить", Выражение);

	Возврат ПредлВыполнить;

КонецФункции // ПредлВыполнить()

Функция ПредлВызов(Указатель)
	Перем ПредлВызов;

	ПредлВызов = Новый Структура(
		"ТипУзла,"       // Строка (ТипОбъекта из этого Структура)
		"Указатель" // Структура (Указатель)
	,
	"ПредлВызов", Указатель);

	Возврат ПредлВызов;

КонецФункции // ПредлВызов()

Функция ПредлЕсли(Условие, ЧастьТогда, ЧастьИначеЕсли = Неопределено, ЧастьИначе = Неопределено)
	Перем ПредлЕсли;

	ПредлЕсли = Новый Структура(
		"ТипУзла,"  // Строка (ТипОбъекта из этого Структура)
		"Условие," // Структура (один из Выражения)
		"ЧастьТогда"  // массив (один из Предложения)
	,
	"ПредлЕсли", Условие, ЧастьТогда);

	Если ЧастьИначеЕсли <> Неопределено Тогда
		ПредлЕсли.Вставить("ЧастьИначеЕсли", ЧастьИначеЕсли); // массив (ПредлЕсли)
	КонецЕсли;

	Если ЧастьИначе <> Неопределено Тогда
		ПредлЕсли.Вставить("ЧастьИначе", ЧастьИначе); // массив (один из Предложения)
	КонецЕсли;

	Возврат ПредлЕсли;

КонецФункции // ПредлЕсли()

Функция ПредлПока(Условие, Предложения)
	Перем ПредлПока;

	ПредлПока = Новый Структура(
		"ТипУзла,"   // Строка (ТипОбъекта из этого Структура)
		"Условие,"  // Структура (один из Выражения)
		"Предложения" // массив (один из Предложения)
	,
	"ПредлПока", Условие, Предложения);

	Возврат ПредлПока;

КонецФункции // ПредлПока()

Функция ПредлДля(Указатель, Коллекция, Предложения)
	Перем ПредлДля;

	ПредлДля = Новый Структура(
		"ТипУзла,"       // Строка (ТипОбъекта из этого Структура)
		"Указатель," // Структура (Указатель)
		"Коллекция,"     // Структура (один из Выражения)
		"Предложения"     // массив (один из Предложения)
	,
	"ПредлДля", Указатель, Коллекция, Предложения);

	Возврат ПредлДля;

КонецФункции // ПредлДля()

Функция ПредлВыбор(Указатель, ЧастьКогда, ЧастьИначе = Неопределено)
	Перем ПредлВыбор;

	ПредлВыбор = Новый Структура(
		"ТипУзла,"       // Строка (ТипОбъекта из этого Структура)
		"Указатель," // Структура (один из Выражения)
		"ЧастьКогда"       // массив (ПредлЕсли)
	,
	"ПредлВыбор", Указатель, ЧастьКогда);

	Если ЧастьИначе <> Неопределено Тогда
		ПредлВыбор.Вставить("ЧастьИначе", ЧастьИначе); // массив (один из Предложения)
	КонецЕсли;

	Возврат ПредлВыбор;

КонецФункции // ПредлВыбор()

Функция ПредлПопытка(ЧастьПопытка, ЧастьИсключение)
	Перем ПредлПопытка;

	ПредлПопытка = Новый Структура(
		"ТипУзла,"   // Строка (ТипОбъекта из этого Структура)
		"ЧастьПопытка,"    // массив (один из Предложения)
		"ЧастьИсключение" // массив (один из Предложения)
	,
	"ПредлПопытка", ЧастьПопытка, ЧастьИсключение);

	Возврат ПредлПопытка;

КонецФункции // ПредлПопытка()

#КонецОбласти // Предложения

#Область ТипыОбъектов

Функция Подпись(СписокПараметров)
	Перем Подпись;

	Подпись = Новый Структура(
		"ТипУзла,"  // Строка (ТипОбъекта из этого Структура)
		"СписокПараметров" // массив (булево)
	,
	"Подпись", СписокПараметров);

	Возврат Подпись;
КонецФункции // Подпись()

#КонецОбласти // ТипыОбъектов

#КонецОбласти // Дерево

#Область Парсер

Функция Парсер(Источник) Экспорт
	Перем Парсер;

	Парсер = Новый Структура(
		"Разбор," // Структура (Разбор)
		"Элемент,"     // Строка (один из Лексемы)
		"Литерал,"     // Строка
		"Знач,"     // Число, Строка, Дата, Истина, Ложь, Неопределено
		"Окружение,"   // Структура (Окружение)
		"Импорт," // Структура
		"Модуль,"  // Структура (Модуль)
		"Неизвестный," // Структура as map[Строка](Объект)
		"ЭтоФункция"  // булево
	);

	Парсер.Разбор = Разбор(Источник);
	Парсер.Окружение = Окружение(Неопределено);
	Парсер.Импорт = Новый Структура;
	Парсер.Неизвестный = Новый Структура;
	Парсер.ЭтоФункция = Ложь;

	Парсер.Окружение.Объекты.Вставить("Структура", Объект("Конструктор", "Структура"));

	Возврат Парсер;

КонецФункции // Парсер()

Функция Дальше(Парсер)
	Перем Элемент, Литерал;
	Элемент = Разобрать(Парсер.Разбор);
	Пока ИгнорируемыеЛексемы.Найти(Элемент) <> Неопределено Цикл
		Элемент = Разобрать(Парсер.Разбор);
	КонецЦикла;
	Если Элемент = Лексемы.НачалоСтроки Тогда
		Литерал = ПарситьСтроку(Парсер);
		Элемент = Лексемы.Строка;
	Иначе
		Литерал = Парсер.Разбор.Литерал;
	КонецЕсли;
	Парсер.Элемент = Элемент;
	Парсер.Литерал = Литерал;
	Парсер.Знач = Значение(Элемент, Литерал);
	Возврат Парсер.Элемент;
КонецФункции // Дальше()

Функция ПропуститьИгнорируемыеЛексемы(Парсер)
	Перем Элемент;
	Элемент = Парсер.Элемент;
	Если ИгнорируемыеЛексемы.Найти(Элемент) <> Неопределено Тогда
		Элемент = Дальше(Парсер);
	КонецЕсли;
	Возврат Элемент;
КонецФункции // ПропуститьИгнорируемыеЛексемы()

Функция НайтиОбъект(Парсер, Имя)
	Перем Окружение, Объект;
	Окружение = Парсер.Окружение;
	Окружение.Объекты.Свойство(Имя, Объект);
	Пока Объект = Неопределено И Окружение.Внешний <> Неопределено Цикл
		Окружение = Окружение.Внешний;
		Окружение.Объекты.Свойство(Имя, Объект);
	КонецЦикла;
	Возврат Объект;
КонецФункции // НайтиОбъект()

Функция ОткрытьОкружение(Парсер)
	Перем Окружение;
	Окружение = Окружение(Парсер.Окружение);
	Парсер.Окружение = Окружение;
	Возврат Окружение;
КонецФункции // ОткрытьОкружение()

Функция ЗакрытьОкружение(Парсер)
	Перем Окружение;
	Окружение = Парсер.Окружение.Внешний;
	Парсер.Окружение = Окружение;
	Возврат Окружение;
КонецФункции // ЗакрытьОкружение()

Функция ПарситьСтроку(Парсер)
	Перем Разбор, Элемент, Список;
	Разбор = Парсер.Разбор;
	Список = Новый Массив;
	Список.Добавить(Разбор.Литерал);
	Элемент = Разобрать(Разбор);
	Пока Элемент = Лексемы.Комментарий Цикл
		Элемент = Разобрать(Разбор);
	КонецЦикла;
	Пока Элемент = Лексемы.СодержимоеСтроки Цикл
		Список.Добавить(Сред(Разбор.Литерал, 2));
		Элемент = Разобрать(Разбор);
		Пока Элемент = Лексемы.Комментарий Цикл
			Элемент = Разобрать(Разбор);
		КонецЦикла;
	КонецЦикла;
	Сверить(Разбор, Лексемы.КонецСтроки);
	Список.Добавить(Сред(Разбор.Литерал, 2));
	Возврат СтрСоединить(Список);
КонецФункции // ПарситьСтроку()

Функция ПарситьУнарноеВыражение(Парсер)
	Перем Оператор;
	Оператор = Парсер.Элемент;
	Если УнарныеОперации.Найти(Парсер.Элемент) <> Неопределено Тогда
		Дальше(Парсер);
		Возврат УнарноеВыражение(Оператор, ПарситьОперанд(Парсер));
	ИначеЕсли Парсер.Элемент = Лексемы.КонецФайла Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ПарситьОперанд(Парсер);
КонецФункции // ПарситьУнарноеВыражение()

Функция ПарситьОперанд(Парсер)
	Перем Элемент, СписокСтр, Операнд;
	Элемент = Парсер.Элемент;
	Если ПростойЛитерал.Найти(Элемент) <> Неопределено Тогда
		Если Элемент = Лексемы.Строка Тогда
			СписокСтр = Новый Массив;
			СписокСтр.Добавить(Парсер.Знач);
			Пока Дальше(Парсер) = Лексемы.Строка Цикл
				СписокСтр.Добавить(Парсер.Знач);
			КонецЦикла;
			Операнд = ПростойЛитерал(Элемент, СтрСоединить(СписокСтр, Символы.ПС));
		Иначе
			Операнд = ПростойЛитерал(Элемент, Парсер.Знач);
			Дальше(Парсер);
		КонецЕсли;
	ИначеЕсли Элемент = Лексемы.Идентификатор Тогда
		Операнд = ПарситьУказатель(Парсер);
	ИначеЕсли Элемент = Лексемы.ОткрСкобкаОбычная Тогда
		Дальше(Парсер);
		Операнд = СкобочноеВыражение(ПарситьВыражение(Парсер));
		Сверить(Парсер, Лексемы.ЗакрСкобкаОбычная);
		Дальше(Парсер);
	ИначеЕсли Элемент = Лексемы.Новый Тогда
		Операнд = ПарситьВыражениеНовый(Парсер);
	ИначеЕсли Элемент = Лексемы.Вопрос Тогда
		Операнд = ПарситьТернарноеВыражение(Парсер);
	Иначе
		ВызватьИсключение "Ожидается операнд";
	КонецЕсли;
	Возврат Операнд;
КонецФункции // ПарситьОперанд()

Функция ПарситьВыражениеНовый(Парсер)
	Перем Элемент, Конструктор;
	Элемент = Дальше(Парсер);
	Если Элемент = Лексемы.ОткрСкобкаОбычная Тогда
		Элемент = Дальше(Парсер);
		Если Элемент = Лексемы.ЗакрСкобкаОбычная Тогда
			Конструктор = ПустойМассив;
		Иначе
			Конструктор = ПарситьСписокВыражений(Парсер, Истина);
		КонецЕсли;
		Сверить(Парсер, Лексемы.ЗакрСкобкаОбычная);
		Дальше(Парсер);
	Иначе
		Конструктор = ПарситьУказатель(Парсер);
	КонецЕсли;
	Возврат ВыражениеНовый(Конструктор);
КонецФункции // ПарситьВыражениеНовый()

Функция ПарситьУказатель(Парсер, НоваяПеременная = Ложь)
	Перем Объект, Разделитель, Список, Вызов, Имя, Столбец;
	Объект = ПарситьКвалидатор(Парсер);
	Если Объект = Неопределено Тогда
		Столбец = Парсер.Разбор.Столбец - СтрДлина(Парсер.Литерал);
	КонецЕсли;
	Имя = Парсер.Литерал;
	Список = Новый Массив;
	Вызов = Ложь;
	Разделитель = ПарситьРазделитель(Парсер);
	Пока Разделитель <> Неопределено Цикл
		Список.Добавить(Разделитель);
		Вызов = (Разделитель.Вид = "Вызов");
		Разделитель = ПарситьРазделитель(Парсер);
	КонецЦикла;
	Если Объект = Неопределено Тогда
		Если Вызов Тогда
			Если НЕ Парсер.Неизвестный.Свойство(Имя, Объект) Тогда
				Объект = Объект("Неизвестный", Имя);
				Парсер.Неизвестный.Вставить(Имя, Объект);
			КонецЕсли;
		Иначе
			Если НоваяПеременная Тогда
				Объект = Объект(ВидыОбъектов.Переменная, Имя);
				Парсер.Окружение.Объекты.Вставить(Имя, Объект);
			Иначе
				Объект = Объект("Неизвестный", Имя);
				Если Подробно Тогда
					Ошибка(Парсер.Разбор, СтрШаблон("Необъявленный идентификатор `%1`", Имя), Столбец);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Указатель(Объект, Список, Вызов);
КонецФункции // ПарситьУказатель()

Функция ПарситьСписокУказателей(Парсер, НоваяПеременная = Ложь)
	Перем Список;
	Список = Новый Массив;
	Список.Добавить(ПарситьУказатель(Парсер, НоваяПеременная));
	Пока Парсер.Элемент = Лексемы.Запятая Цикл
		Дальше(Парсер);
		Список.Добавить(ПарситьУказатель(Парсер, НоваяПеременная));
	КонецЦикла;
	Возврат Список;
КонецФункции // ПарситьСписокУказателей()

Функция ПарситьКвалидатор(Парсер)
	Перем Модуль, Объект;
	Парсер.Импорт.Свойство(Парсер.Литерал, Модуль);
	Если Модуль <> Неопределено Тогда
		Дальше(Парсер);
		Сверить(Парсер, Лексемы.Точка);
		Дальше(Парсер);
		Сверить(Парсер, Лексемы.Идентификатор);
		Модуль.Объекты.Свойство(Парсер.Литерал, Объект);
	Иначе
		Объект = НайтиОбъект(Парсер, Парсер.Литерал);
	КонецЕсли;
	Возврат Объект;
КонецФункции // ПарситьКвалидатор()

Функция ПарситьРазделитель(Парсер)
	Перем Элемент, Значение;
	Элемент = Дальше(Парсер);
	Если Элемент = Лексемы.Точка Тогда
		Дальше(Парсер);
		Если НЕ Дескрипторы.Свойство(Парсер.Литерал) Тогда
			Сверить(Парсер, Лексемы.Идентификатор);
		КонецЕсли;
		Значение = Парсер.Литерал;
		Возврат Разделитель("Идентификатор", Значение);
	ИначеЕсли Элемент = Лексемы.ОткрСкобкаКвадратная Тогда
		Элемент = Дальше(Парсер);
		Если Элемент = Лексемы.ЗакрСкобкаКвадратная Тогда
			Ошибка(Парсер.Разбор, "Ожидается выражение",, Истина);
		КонецЕсли;
		Значение = ПарситьСписокВыражений(Парсер);
		Сверить(Парсер, Лексемы.ЗакрСкобкаКвадратная);
		Возврат Разделитель("Индекс", Значение);
	ИначеЕсли Элемент = Лексемы.ОткрСкобкаОбычная Тогда
		Элемент = Дальше(Парсер);
		Если Элемент = Лексемы.ЗакрСкобкаОбычная Тогда
			Значение = ПустойМассив;
		Иначе
			Значение = ПарситьСписокВыражений(Парсер, Истина);
		КонецЕсли;
		Сверить(Парсер, Лексемы.ЗакрСкобкаОбычная);
		Возврат Разделитель("Вызов", Значение);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПарситьРазделитель()

Функция ПарситьВыражение(Парсер)
	Перем Выражение, Оператор;
	Выражение = ПарситьВыражениеИ(Парсер);
	Пока Парсер.Элемент = "ИЛИ" Цикл
		Оператор = Парсер.Элемент;
		Дальше(Парсер);
		Выражение = БинарноеВыражение(Выражение, Оператор, ПарситьВыражениеИ(Парсер));
	КонецЦикла;
	Возврат Выражение;
КонецФункции // ПарситьВыражение()

Функция ПарситьВыражениеИ(Парсер)
	Перем Выражение, Оператор;
	Выражение = ПарситьВыражениеСравнение(Парсер);
	Пока Парсер.Элемент = "И" Цикл
		Оператор = Парсер.Элемент;
		Дальше(Парсер);
		Выражение = БинарноеВыражение(Выражение, Оператор, ПарситьВыражениеСравнение(Парсер));
	КонецЦикла;
	Возврат Выражение;
КонецФункции // ПарситьВыражениеИ()

Функция ПарситьВыражениеСравнение(Парсер)
	Перем Выражение, Оператор;
	Выражение = ПарситьВыражениеДобавить(Парсер);
	Пока ОператорыСравнения.Найти(Парсер.Элемент) <> Неопределено Цикл
		Оператор = Парсер.Элемент;
		Дальше(Парсер);
		Выражение = БинарноеВыражение(Выражение, Оператор, ПарситьВыражениеДобавить(Парсер));
	КонецЦикла;
	Возврат Выражение;
КонецФункции // ПарситьВыражениеСравнение()

Функция ПарситьВыражениеДобавить(Парсер)
	Перем Выражение, Оператор;
	Выражение = ПарситьВыражениеУмножить(Парсер);
	Пока Парсер.Элемент = Лексемы.Добавить ИЛИ Парсер.Элемент = Лексемы.Вычесть Цикл
		Оператор = Парсер.Элемент;
		Дальше(Парсер);
		Выражение = БинарноеВыражение(Выражение, Оператор, ПарситьВыражениеУмножить(Парсер));
	КонецЦикла;
	Возврат Выражение;
КонецФункции // ПарситьВыражениеДобавить()

Функция ПарситьВыражениеУмножить(Парсер)
	Перем Выражение, Оператор;
	Выражение = ПарситьУнарноеВыражение(Парсер);
	Пока Парсер.Элемент = Лексемы.Умножить ИЛИ Парсер.Элемент = Лексемы.Разделить ИЛИ Парсер.Элемент = Лексемы.Остаток Цикл
		Оператор = Парсер.Элемент;
		Дальше(Парсер);
		Выражение = БинарноеВыражение(Выражение, Оператор, ПарситьУнарноеВыражение(Парсер));
	КонецЦикла;
	Возврат Выражение;
КонецФункции // ПарситьВыражениеУмножить()

Функция ПарситьСписокВыражений(Парсер, ЭтоАргументы = Ложь)
	Перем СписокВыражений, ВыражениеСверить;
	СписокВыражений = Новый Массив;
	Если ЭтоАргументы Тогда
		ВыражениеСверить = Истина;
		Пока ВыражениеСверить Цикл
			Если НачальныеЛексемыВыражений.Найти(Парсер.Элемент) <> Неопределено Тогда
				СписокВыражений.Добавить(ПарситьВыражение(Парсер));
			Иначе
				СписокВыражений.Добавить(ПростойЛитерал(Лексемы.Неопределено, Неопределено));
			КонецЕсли;
			Если Парсер.Элемент = Лексемы.Запятая Тогда
				Дальше(Парсер);
			Иначе
				ВыражениеСверить = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Парсер.Элемент = Лексемы.Запятая Тогда
			СписокВыражений.Добавить(Неопределено);
		Иначе
			СписокВыражений.Добавить(ПарситьВыражение(Парсер));
		КонецЕсли;
		Пока Парсер.Элемент = Лексемы.Запятая Цикл
			Дальше(Парсер);
			Пока Парсер.Элемент = Лексемы.Запятая Цикл
				СписокВыражений.Добавить(Неопределено);
				Дальше(Парсер);
			КонецЦикла;
			СписокВыражений.Добавить(ПарситьВыражение(Парсер));
		КонецЦикла;
	КонецЕсли;
	Возврат СписокВыражений;
КонецФункции // ПарситьСписокВыражений()

Функция ПарситьТернарноеВыражение(Парсер)
	Перем Условие, ЧастьТогда, ЧастьИначе;
	Дальше(Парсер);
	Сверить(Парсер, Лексемы.ОткрСкобкаОбычная);
	Дальше(Парсер);
	Условие = ПарситьВыражение(Парсер);
	Сверить(Парсер, Лексемы.Запятая);
	Дальше(Парсер);
	ЧастьТогда = ПарситьВыражение(Парсер);
	Сверить(Парсер, Лексемы.Запятая);
	Дальше(Парсер);
	ЧастьИначе = ПарситьВыражение(Парсер);
	Сверить(Парсер, Лексемы.ЗакрСкобкаОбычная);
	Дальше(Парсер);
	Возврат ТернарноеВыражение(Условие, ЧастьТогда, ЧастьИначе);
КонецФункции // ПарситьТернарноеВыражение()

Функция ПарситьОбъявлениеФункции(Парсер)
	Перем Окружение, Объект, Имя, Объявления;
	Дальше(Парсер);
	Сверить(Парсер, Лексемы.Идентификатор);
	ОбъектыОкружения = Парсер.Окружение.Объекты;
	ОткрытьОкружение(Парсер);
	Имя = Парсер.Литерал;
	Дальше(Парсер);
	Если Парсер.Неизвестный.Свойство(Имя, Объект) Тогда
		Объект.Вид = ВидыОбъектов.Функция;
		Объект.Вставить("ТипОбъекта", ПарситьПодпись(Парсер));
		Парсер.Неизвестный.Удалить(Имя);
	Иначе
		Объект = Объект(ВидыОбъектов.Функция, Имя, ПарситьПодпись(Парсер));
	КонецЕсли;
	ОбъектыОкружения.Вставить(Имя, Объект);
	Объявления = ПарситьОбъявленияПеременных(Парсер);
	Парсер.ЭтоФункция = Истина;
	Предложения = ПарситьПредложения(Парсер);
	Парсер.ЭтоФункция = Ложь;
	Сверить(Парсер, Лексемы.КонецФункции);
	ЗакрытьОкружение(Парсер);
	Дальше(Парсер);
	Возврат ОбъявлениеФункции(Объект, Объявления, Предложения);
КонецФункции // ПарситьОбъявлениеФункции()

Функция ПарситьПодпись(Парсер)
	Перем СписокПараметров;
	Сверить(Парсер, Лексемы.ОткрСкобкаОбычная);
	Дальше(Парсер);
	Если Парсер.Элемент = Лексемы.ЗакрСкобкаОбычная Тогда
		СписокПараметров = ПустойМассив;
	Иначе
		СписокПараметров = ПарситьСписокПараметров(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.ЗакрСкобкаОбычная);
	Дальше(Парсер);
	Если Парсер.Элемент = Лексемы.Экспорт Тогда
		Если Подробно Тогда
			Ошибка(Парсер.Разбор, "Ключевое слово `Экспорт` пропущено");
		КонецЕсли;
		Дальше(Парсер);
	КонецЕсли;
	Возврат Подпись(СписокПараметров);
КонецФункции // ПарситьПодпись()

Функция ПарситьОбъявлениеПроцедуры(Парсер)
	Перем Окружение, Объект, Имя, Объявления;
	Дальше(Парсер);
	Сверить(Парсер, Лексемы.Идентификатор);
	ОбъектыОкружения = Парсер.Окружение.Объекты;
	ОткрытьОкружение(Парсер);
	Имя = Парсер.Литерал;
	Дальше(Парсер);
	Если Парсер.Неизвестный.Свойство(Имя, Объект) Тогда
		Объект.Вид = ВидыОбъектов.Процедура;
		Объект.Вставить("ТипОбъекта", ПарситьПодпись(Парсер));
		Парсер.Неизвестный.Удалить(Имя);
	Иначе
		Объект = Объект(ВидыОбъектов.Процедура, Имя, ПарситьПодпись(Парсер));
	КонецЕсли;
	ОбъектыОкружения.Вставить(Имя, Объект);
	Объявления = ПарситьОбъявленияПеременных(Парсер);
	Предложения = ПарситьПредложения(Парсер);
	Сверить(Парсер, Лексемы.КонецПроцедуры);
	ЗакрытьОкружение(Парсер);
	Дальше(Парсер);
	Возврат ОбъявлениеПроцедуры(Объект, Объявления, Предложения);
КонецФункции // ПарситьОбъявлениеПроцедуры()

Функция ПарситьПредлВозврат(Парсер)
	Перем СписокВыражений;
	Дальше(Парсер);
	Если Парсер.ЭтоФункция Тогда
		СписокВыражений = ПарситьСписокВыражений(Парсер);
	КонецЕсли;
	Возврат ПредлВозврат(СписокВыражений);
КонецФункции // ПарситьПредлВозврат()

Функция ПарситьСписокПеременных(Парсер)
	Перем СписокПеременных;
	СписокПеременных = Новый Массив;
	СписокПеременных.Добавить(ПарситьОбъявлениеПеременной(Парсер));
	Пока Парсер.Элемент = Лексемы.Запятая Цикл
		Дальше(Парсер);
		СписокПеременных.Добавить(ПарситьОбъявлениеПеременной(Парсер));
	КонецЦикла;
	Если Парсер.Элемент = Лексемы.Экспорт Тогда
		Если Подробно Тогда
			Ошибка(Парсер.Разбор, "Ключевое слово `Экспорт` пропущено");
		КонецЕсли;
		Дальше(Парсер);
	КонецЕсли;
	Возврат ОбъявлениеСпискаПеременных(СписокПеременных);
КонецФункции // ПарситьСписокПеременных()

Функция ПарситьОбъявлениеПеременной(Парсер)
	Перем Элемент, Имя, Объект, ОбъявленияПеременной;
	Сверить(Парсер, Лексемы.Идентификатор);
	Имя = Парсер.Литерал;
	Элемент = Дальше(Парсер);
	Если Элемент = Лексемы.Равно Тогда
		Элемент = Дальше(Парсер);
		Если ПростойЛитерал.Найти(Элемент) = Неопределено Тогда
			Ошибка(Парсер.Разбор, "Ожидается простой литерал");
		КонецЕсли;
		Объект = Объект(ВидыОбъектов.Переменная, Имя, Элемент);
		ОбъявлениеПеременной = ОбъявлениеПеременной(Объект, Истина, ПарситьОперанд(Парсер));
	Иначе
		Объект = Объект(ВидыОбъектов.Переменная, Имя, Неопределено);
		ОбъявлениеПеременной = ОбъявлениеПеременной(Объект);
	КонецЕсли;
	Парсер.Окружение.Объекты.Вставить(Имя, Объект);
	Возврат ОбъявлениеПеременной;
КонецФункции // ПарситьОбъявлениеПеременной()

Функция ПарситьСписокПараметров(Парсер)
	Перем СписокПараметров;
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить(ПарситьОбъявлениеПараметров(Парсер));
	Пока Парсер.Элемент = Лексемы.Запятая Цикл
		Дальше(Парсер);
		СписокПараметров.Добавить(ПарситьОбъявлениеПараметров(Парсер));
	КонецЦикла;
	Возврат СписокПараметров;
КонецФункции // ПарситьСписокПараметров()

Функция ПарситьОбъявлениеПараметров(Парсер)
	Перем Элемент, Имя, Объект, ОбъявлениеПараметров;
	Если Парсер.Элемент = Лексемы.Знач Тогда
		Если Подробно Тогда
			Ошибка(Парсер.Разбор, "Ключевое слово `Знач` пропущено");
		КонецЕсли;
		Дальше(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.Идентификатор);
	Имя = Парсер.Литерал;
	Элемент = Дальше(Парсер);
	Если Элемент = Лексемы.Равно Тогда
		Элемент = Дальше(Парсер);
		Если ПростойЛитерал.Найти(Элемент) = Неопределено Тогда
			Ошибка(Парсер.Разбор, "Ожидается простой литерал");
		КонецЕсли;
		Объект = Объект(ВидыОбъектов.Параметр, Имя, Элемент);
		ОбъявлениеПараметров = ОбъявлениеПараметров(Объект, Истина, ПарситьОперанд(Парсер));
	Иначе
		Объект = Объект(ВидыОбъектов.Параметр, Имя, Неопределено);
		ОбъявлениеПараметров = ОбъявлениеПараметров(Объект);
	КонецЕсли;
	Парсер.Окружение.Объекты.Вставить(Имя, Объект);
	Возврат ОбъявлениеПараметров;
КонецФункции // ПарситьОбъявлениеПараметров()

Функция ПарситьПредложения(Парсер)
	Перем Предложения, Предл;
	Предложения = Новый Массив;
	Предл = ПарситьПредложение(Парсер);
	Пока Предл <> Неопределено Цикл
		Предложения.Добавить(Предл);
		Предл = ПарситьПредложение(Парсер);
	КонецЦикла;
	Возврат Предложения;
КонецФункции // ПарситьПредложения()

Функция ПарситьПредложение(Парсер)
	Перем Элемент;
	Элемент = ПропуститьИгнорируемыеЛексемы(Парсер);
	Пока Элемент = Лексемы.ТочкаСЗапятой Цикл
		Дальше(Парсер);
		Элемент = ПропуститьИгнорируемыеЛексемы(Парсер);
	КонецЦикла;
	Если Элемент = Лексемы.Идентификатор Тогда
		Возврат ПарситьПредлУвеличение(Парсер);
	ИначеЕсли Элемент = Лексемы.Если Тогда
		Возврат ПарситьПредлЕсли(Парсер);
	ИначеЕсли Элемент = Лексемы.Попытка Тогда
		Возврат ПарситьПредлПопытка(Парсер);
	ИначеЕсли Элемент = Лексемы.Пока Тогда
		Возврат ПарситьПредлПока(Парсер);
	ИначеЕсли Элемент = Лексемы.Для Тогда
		Возврат ПарситьПредлДля(Парсер);
	ИначеЕсли Элемент = Лексемы.Выбор Тогда
		Возврат ПарситьПредлВыбор(Парсер);
	ИначеЕсли Элемент = Лексемы.Возврат Тогда
		Возврат ПарситьПредлВозврат(Парсер);
	ИначеЕсли Элемент = Лексемы.Прервать Тогда
		Дальше(Парсер);
		Возврат ПредлПрервать();
	ИначеЕсли Элемент = Лексемы.Продолжить Тогда
		Дальше(Парсер);
		Возврат ПредлПродолжить();
	ИначеЕсли Элемент = Лексемы.ВызватьИсключение Тогда
		Возврат ПарситьПредлВызватьИсключение(Парсер);
	ИначеЕсли Элемент = Лексемы.Выполнить Тогда
		Возврат ПарситьПредлВыполнить(Парсер);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // ПарситьПредложение()

Функция ПарситьПредлВызватьИсключение(Парсер)
	Перем Элемент, Выражение;
	Дальше(Парсер);
	Если НачальныеЛексемыВыражений.Найти(Парсер.Элемент) <> Неопределено Тогда
		Выражение = ПарситьВыражение(Парсер);
	КонецЕсли;
	Возврат ПредлВызватьИсключение(Выражение);
КонецФункции // ПарситьПредлВызватьИсключение()

Функция ПарситьПредлВыполнить(Парсер)
	Перем Элемент, Выражение;
	Дальше(Парсер);
	Сверить(Парсер, Лексемы.ОткрСкобкаОбычная);
	Элемент = Дальше(Парсер);
	Если Элемент = Лексемы.ЗакрСкобкаОбычная Тогда
		Выражение = ПустойМассив;
	Иначе
		Выражение = ПарситьВыражение(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.ЗакрСкобкаОбычная);
	Дальше(Парсер);
	Возврат ПредлВыполнить(Выражение);
КонецФункции // ПарситьПредлВыполнить()

Функция ПарситьПредлУвеличение(Парсер)
	Перем Элемент, Лев, Прав;
	Лев = ПарситьСписокУказателей(Парсер, Истина);
	Если Лев.Количество() = 1 И Лев[0].Вызов Тогда
		Возврат ПредлВызов(Лев);
	КонецЕсли;
	Элемент = Парсер.Элемент;
	Если Элемент = Лексемы.Равно Тогда
		Дальше(Парсер);
		Прав = ПарситьСписокВыражений(Парсер);
		Возврат ПредлПрисваивание(Лев, Прав);
	ИначеЕсли Элемент = Лексемы.Увеличить Тогда
		Дальше(Парсер);
		Прав = ПарситьСписокВыражений(Парсер);
		Возврат ПредлУвеличение(Лев, Прав);
	КонецЕсли;
	Сверить(Парсер, Лексемы.Равно);
КонецФункции // ПарситьПредлУвеличение()

Функция ПарситьПредлЕсли(Парсер)
	Перем Элемент, Условие, ЧастьТогда, ЧастьИначе;
	Перем ЧастьИначеЕсли, УсловиеИначеЕсли, ПредлИначеЕсли;
	Дальше(Парсер);
	Условие = ПарситьВыражение(Парсер);
	Сверить(Парсер, Лексемы.Тогда);
	Дальше(Парсер);
	ЧастьТогда = ПарситьПредложения(Парсер);
	Элемент = Парсер.Элемент;
	Если Элемент = Лексемы.ИначеЕсли Тогда
		ЧастьИначеЕсли = Новый Массив;
		Пока Элемент = Лексемы.ИначеЕсли Цикл
			Дальше(Парсер);
			УсловиеИначеЕсли = ПарситьВыражение(Парсер);
			Сверить(Парсер, Лексемы.Тогда);
			Дальше(Парсер);
			ПредлИначеЕсли = ПарситьПредложения(Парсер);
			ЧастьИначеЕсли.Добавить(ПредлЕсли(УсловиеИначеЕсли, ПредлИначеЕсли));
			Элемент = Парсер.Элемент;
		КонецЦикла;
	КонецЕсли;
	Если Элемент = Лексемы.Иначе Тогда
		Дальше(Парсер);
		ЧастьИначе = ПарситьПредложения(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.КонецЕсли);
	Дальше(Парсер);
	Возврат ПредлЕсли(Условие, ЧастьТогда, ЧастьИначеЕсли, ЧастьИначе);
КонецФункции // ПарситьПредлЕсли()

Функция ПарситьПредлПопытка(Парсер)
	Перем ЧастьПопытка, ЧастьИсключение;
	Дальше(Парсер);
	ЧастьПопытка = ПарситьПредложения(Парсер);
	Сверить(Парсер, Лексемы.Исключение);
	Дальше(Парсер);
	ЧастьИсключение = ПарситьПредложения(Парсер);
	Сверить(Парсер, Лексемы.КонецПопытки);
	Дальше(Парсер);
	Возврат ПредлПопытка(ЧастьПопытка, ЧастьИсключение);
КонецФункции // ПарситьПредлПопытка()

Функция ПарситьПредлВыбор(Парсер)
	Перем Элемент, Указатель, ЧастьИначе;
	Перем ЧастьКогда, УсловиеКогда, ПредлТогда;
	Дальше(Парсер);
	Указатель = ПарситьУказатель(Парсер);
	Элемент = Парсер.Элемент;
	ЧастьКогда = Новый Массив;
	Пока Элемент = Лексемы.Когда Цикл
		Дальше(Парсер);
		УсловиеКогда = ПарситьВыражение(Парсер);
		Сверить(Парсер, Лексемы.Тогда);
		Дальше(Парсер);
		ПредлТогда = ПарситьПредложения(Парсер);
		ЧастьКогда.Добавить(ПредлЕсли(УсловиеКогда, ПредлТогда));
		Элемент = Парсер.Элемент;
	КонецЦикла;
	Если Элемент = Лексемы.Иначе Тогда
		Дальше(Парсер);
		ЧастьИначе = ПарситьПредложения(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.КонецВыбора);
	Дальше(Парсер);
	Возврат ПредлВыбор(Указатель, ЧастьКогда, ЧастьИначе);
КонецФункции // ПарситьПредлВыбор()

Функция ПарситьПредлПока(Парсер)
	Перем Условие, Предложения;
	Дальше(Парсер);
	Условие = ПарситьВыражение(Парсер);
	Сверить(Парсер, Лексемы.Цикл);
	Дальше(Парсер);
	Предложения = ПарситьПредложения(Парсер);
	Сверить(Парсер, Лексемы.КонецЦикла);
	Дальше(Парсер);
	Возврат ПредлПока(Условие, Предложения)
КонецФункции // ПарситьПредлПока()

Функция ПарситьПредлДля(Парсер)
	Перем Указатель, Лев, Прав, Коллекция, Предложения;
	Дальше(Парсер);
	Если Парсер.Элемент = Лексемы.Каждого Тогда
		Дальше(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.Идентификатор);
	Указатель = ПарситьУказатель(Парсер, Истина);
	Если Указатель.Вызов Тогда
		Ошибка(Парсер.Разбор, "Ожидается переменная",, Истина);
	КонецЕсли;
	Если Парсер.Элемент = Лексемы.Равно Тогда
		Дальше(Парсер);
		Лев = ПарситьВыражение(Парсер);
		Сверить(Парсер, Лексемы.По);
		Дальше(Парсер);
		Прав = ПарситьВыражение(Парсер);
		Коллекция = ВыражениеСравнение(Лев, Прав);
	ИначеЕсли Парсер.Элемент = Лексемы.Из Тогда
		Дальше(Парсер);
		Коллекция = ПарситьВыражение(Парсер);
	КонецЕсли;
	Сверить(Парсер, Лексемы.Цикл);
	Дальше(Парсер);
	Предложения = ПарситьПредложения(Парсер);
	Сверить(Парсер, Лексемы.КонецЦикла);
	Дальше(Парсер);
	Возврат ПредлДля(Указатель, Коллекция, Предложения);
КонецФункции // ПарситьПредлДля()

Функция ПарситьОбъявленияПеременных(Парсер)
	Перем Элемент, Объявления;
	Объявления = Новый Массив;
	Элемент = Парсер.Элемент;
	Пока Элемент = Лексемы.Перем Цикл
		Дальше(Парсер);
		Объявления.Добавить(ПарситьСписокПеременных(Парсер));
		Если Парсер.Элемент = Лексемы.ТочкаСЗапятой Тогда
			Дальше(Парсер);
		КонецЕсли;
		Элемент = Парсер.Элемент;
	КонецЦикла;
	Возврат Объявления;
КонецФункции // ПарситьОбъявленияПеременных()

Функция ПарситьОбъявления(Парсер)
	Перем Элемент, Объявления;
	Объявления = Новый Массив;
	Элемент = Парсер.Элемент;
	Пока Элемент <> Лексемы.КонецФайла Цикл
		Если Элемент = Лексемы.Перем Тогда
			Дальше(Парсер);
			Объявления.Добавить(ПарситьСписокПеременных(Парсер));
			Если Парсер.Элемент = Лексемы.ТочкаСЗапятой Тогда
				Дальше(Парсер);
			КонецЕсли;
		ИначеЕсли Элемент = Лексемы.Функция Тогда
			Объявления.Добавить(ПарситьОбъявлениеФункции(Парсер));
		ИначеЕсли Элемент = Лексемы.Процедура Тогда
			Объявления.Добавить(ПарситьОбъявлениеПроцедуры(Парсер));
		Иначе
			Возврат Объявления;
		КонецЕсли;
		Элемент = Парсер.Элемент;
	КонецЦикла;
	Возврат Объявления;
КонецФункции // ПарситьОбъявления()

Функция ПарситьМодуль(Парсер) Экспорт
	Дальше(Парсер);
	Парсер.Модуль = Модуль(ПарситьОбъявления(Парсер), ПарситьПредложения(Парсер));
	Если Подробно Тогда
		Для Каждого Элемент Из Парсер.Неизвестный Цикл
			Сообщить(СтрШаблон("Необъявленный идентификатор `%1`", Элемент.Ключ));
		КонецЦикла;
	КонецЕсли;
	Сверить(Парсер, Лексемы.КонецФайла);
КонецФункции // ПарситьМодуль()

#КонецОбласти // Парсер

#Область Auxiliary

Функция Значение(Элемент, Литерал)
	Если Элемент = Лексемы.Число Тогда
		Возврат Число(Литерал);
	ИначеЕсли Элемент = Лексемы.ДатаВремя Тогда
		Возврат КакДата(Литерал);
	ИначеЕсли Элемент = Лексемы.Строка Тогда
		Возврат Сред(Литерал, 2, СтрДлина(Литерал) - 2);
	ИначеЕсли Элемент = Лексемы.Истина Тогда
		Возврат Истина;
	ИначеЕсли Элемент = Лексемы.Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции // Значение()

Функция КакДата(знДата)
	Перем Список, Символ;
	Список = Новый Массив;
	Для Чис = 1 По СтрДлина(знДата) Цикл
		Символ = Сред(знДата, Чис, 1);
		Если ЭтоЦифра(Символ) Тогда
			Список.Добавить(Символ);
		КонецЕсли;
	КонецЦикла;
	Возврат Дата(СтрСоединить(Список));
КонецФункции // КакДата()

Процедура Сверить(Парсер, Элемент)
	Если Парсер.Элемент <> Элемент Тогда
		Ошибка(Парсер.Разбор, "Ожидается " + Элемент,, Истина);
	КонецЕсли;
КонецПроцедуры // Сверить()

Функция ЭлементСтроки(Литерал)
	Если Лев(Литерал, 1) = """" Тогда
		Если Прав(Литерал, 1) = """" Тогда
			Возврат Лексемы.Строка;
		Иначе
			Возврат Лексемы.НачалоСтроки;
		КонецЕсли;
	Иначе // |
		Если Прав(Литерал, 1) = """" Тогда
			Возврат Лексемы.КонецСтроки;
		Иначе
			Возврат Лексемы.СодержимоеСтроки;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ЭлементСтроки()

Функция Проверить(Литерал)
	Перем Элемент;
	Если НЕ Дескрипторы.Свойство(Литерал, Элемент) Тогда
		Элемент = Лексемы.Идентификатор;
	КонецЕсли;
	Возврат Элемент;
КонецФункции // Проверить()

Функция ЭтоБуква(Символ)
	Возврат Символ <> "" И СтрНайти("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", Символ) > 0;
КонецФункции // ЭтоБуква()

Функция ЭтоЦифра(Символ)
	Возврат "0" <= Символ И Символ <= "9";
КонецФункции // ЭтоЦифра()

Процедура Ошибка(Разбор, Сообщение, Столбец = Неопределено, Остановить = Ложь)
	Перем ТекстОшибки;
	ТекстОшибки = СтрШаблон("[ Ln: %1; Col: %2 ] %3",
		Разбор.Строка,
		?(Столбец = Неопределено, Разбор.Столбец - СтрДлина(Разбор.Литерал), Столбец),
		Сообщение
	);
	Если Остановить Тогда
		ВызватьИсключение ТекстОшибки;
	Иначе
		Сообщить(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры // Ошибка()

#КонецОбласти // Auxiliary

#Область Backends

Функция Данные() Экспорт
	Перем Данные;

	Данные = Новый Структура(
		"Результат," // массив (Строка)
		"Отступ" // Число
	,
	Новый Массив, -1);

	Возврат Данные;

КонецФункции // Данные()

Процедура Отступ(Данные)
	Перем Результат;
	Результат = Данные.Результат;
	Для Индекс = 1 По Данные.Отступ Цикл
		Результат.Добавить(Символы.Таб);
	КонецЦикла;
КонецПроцедуры // Отступ()

#Область BSL

Процедура ПостроитьМодуль(Данные, Модуль) Экспорт
	ПостроитьОбъявления(Данные, Модуль.Объявления);
	ПостроитьПредложения(Данные, Модуль.Предложения);
КонецПроцедуры // ПостроитьМодуль()

Процедура ПостроитьОбъявления(Данные, Объявления)
	Данные.Отступ = Данные.Отступ + 1;
	Для Каждого Объявление Из Объявления Цикл
		ПостроитьОбъявление(Данные, Объявление);
	КонецЦикла;
	Данные.Отступ = Данные.Отступ - 1;
КонецПроцедуры // ПостроитьОбъявления()

Процедура ПостроитьПредложения(Данные, Предложения)
	Данные.Отступ = Данные.Отступ + 1;
	Для Каждого Предл Из Предложения Цикл
		ПостроитьПредл(Данные, Предл);
	КонецЦикла;
	Данные.Отступ = Данные.Отступ - 1;
	Отступ(Данные);
КонецПроцедуры // ПостроитьПредложения()

Процедура ПостроитьОбъявление(Данные, Объявление)
	Перем Результат, ТипУзла;
	Результат = Данные.Результат;
	ТипУзла = Объявление.ТипУзла;
	Если ТипУзла = "ОбъявлениеСпискаПеременных" Тогда
		Отступ(Данные);
		Результат.Добавить("Перем ");
		ПостроитьОбъявлениеПеременных(Данные, Объявление.СписокПеременных);
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ОбъявлениеФункции" ИЛИ ТипУзла = "ОбъявлениеПроцедуры" Тогда
		Результат.Добавить(Символы.ПС);
		Данные.Отступ = Данные.Отступ + 1;
		Если ТипУзла = "ОбъявлениеФункции" Тогда
			Результат.Добавить("Функция ");
		Иначе
			Результат.Добавить("Процедура ");
		КонецЕсли;
		Результат.Добавить(Объявление.Объект.Имя);
		Результат.Добавить("(");
		ПостроитьОбъявлениеПеременных(Данные, Объявление.Объект.ТипОбъекта.СписокПараметров);
		Результат.Добавить(")");
		Результат.Добавить(Символы.ПС);
		Для Каждого Предл Из Объявление.Объявления Цикл
			ПостроитьОбъявление(Данные, Предл);
		КонецЦикла;
		Для Каждого Предл Из Объявление.Предложения Цикл
			ПостроитьПредл(Данные, Предл);
		КонецЦикла;
		Если ТипУзла = "ОбъявлениеФункции" Тогда
			Результат.Добавить(СтрШаблон("КонецФункции // %1()", Объявление.Объект.Имя));
		Иначе
			Результат.Добавить(СтрШаблон("КонецПроцедуры // %1()", Объявление.Объект.Имя));
		КонецЕсли;
		Результат.Добавить(Символы.ПС);
		Данные.Отступ = Данные.Отступ - 1;
	КонецЕсли;
КонецПроцедуры // ПостроитьОбъявление()

Процедура ПостроитьОбъявлениеПеременных(Данные, ОбъявлениеСпискаПеременных)
	Перем Результат, Буфер;
	Если ОбъявлениеСпискаПеременных <> Неопределено Тогда
		Результат = Данные.Результат;
		Буфер = Новый Массив;
		Для Каждого ОбъявлениеПеременной Из ОбъявлениеСпискаПеременных Цикл
			Буфер.Добавить(ОбъявлениеПеременной.Объект.Имя + ?(ОбъявлениеПеременной.Свойство("Значение"), " = " + ПостроитьВыражения(ОбъявлениеПеременной.Значение), ""));
		КонецЦикла;
		Если Буфер.Количество() > 0 Тогда
			Результат.Добавить(СтрСоединить(Буфер, ", "));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПостроитьОбъявлениеПеременных()

Процедура ПостроитьПредл(Данные, Предл)
	Перем Результат, ТипУзла;
	Результат = Данные.Результат;
	ТипУзла = Предл.ТипУзла;
	Отступ(Данные);
	Если ТипУзла = "ПредлПрисваивание" Тогда
		Результат.Добавить(ПостроитьУказатель(Предл.Лев[0]));
		Результат.Добавить(" = ");
		Результат.Добавить(ПостроитьСписокВыражений(Предл.Прав));
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлУвеличение" Тогда
		Результат.Добавить(ПостроитьУказатель(Предл.Лев[0]));
		Результат.Добавить(" = ");
		Результат.Добавить(ПостроитьУказатель(Предл.Лев[0]));
		Результат.Добавить(" + ");
		Результат.Добавить(ПостроитьСписокВыражений(Предл.Прав));
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлВозврат" Тогда
		Результат.Добавить("Возврат ");
		Если Предл.Свойство("СписокВыражений") Тогда
			Результат.Добавить(ПостроитьСписокВыражений(Предл.СписокВыражений));
		КонецЕсли;
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлПрервать" Тогда
		Результат.Добавить("Прервать;");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлПродолжить" Тогда
		Результат.Добавить("Продолжить;");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлВызватьИсключение" Тогда
		Результат.Добавить("ВызватьИсключение ");
		Если Предл.Свойство("Выражение") Тогда
			Результат.Добавить(ПостроитьВыражения(Предл.Выражение));
		КонецЕсли;
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлВыполнить" Тогда
		Результат.Добавить("Выполнить(");
		Результат.Добавить(ПостроитьВыражения(Предл.Выражение));
		Результат.Добавить(");");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлВызов" Тогда
		Результат.Добавить(ПостроитьУказатель(Предл.Указатель[0]));
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлЕсли" Тогда
		Результат.Добавить("Если ");
		ПостроитьПредлЕсли(Данные, Предл);
		Если Предл.Свойство("ЧастьИначе") Тогда
			Результат.Добавить("Иначе");
			Результат.Добавить(Символы.ПС);
			ПостроитьПредложения(Данные, Предл.ЧастьИначе);
		КонецЕсли;
		Результат.Добавить("КонецЕсли");
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлПока" Тогда
		Результат.Добавить("Пока ");
		Результат.Добавить(ПостроитьВыражения(Предл.Условие));
		Результат.Добавить(" Цикл");
		Результат.Добавить(Символы.ПС);
		ПостроитьПредложения(Данные, Предл.Предложения);
		Результат.Добавить("КонецЦикла");
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлДля" Тогда
		Результат.Добавить("Для ");
		Если Предл.Коллекция.ТипУзла = "ВыражениеСравнение" Тогда
			Результат.Добавить(ПостроитьУказатель(Предл.Указатель));
			Результат.Добавить(" = ");
			Результат.Добавить(ПостроитьВыражения(Предл.Коллекция));
		Иначе
			Результат.Добавить("Каждого ");
			Результат.Добавить(ПостроитьУказатель(Предл.Указатель));
			Результат.Добавить(" Из ");
			Результат.Добавить(ПостроитьВыражения(Предл.Коллекция));
		КонецЕсли;
		Результат.Добавить(" Цикл");
		Результат.Добавить(Символы.ПС);
		ПостроитьПредложения(Данные, Предл.Предложения);
		Результат.Добавить("КонецЦикла");
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	ИначеЕсли ТипУзла = "ПредлВыбор" Тогда
		Если Предл.ЧастьКогда.Количество() > 0 Тогда
			Результат.Добавить("Если ");
			Результат.Добавить(ПостроитьУказатель(Предл.Указатель));
			Результат.Добавить(" = ");
			ПредлЕсли = Предл.ЧастьКогда[0];
			ПостроитьПредлЕсли(Данные, ПредлЕсли);
			Для Индекс = 1 По Предл.ЧастьКогда.Количество() - 1 Цикл
				ПредлЕсли = Предл.ЧастьКогда[Индекс];
				Результат.Добавить("ИначеЕсли ");
				Результат.Добавить(ПостроитьУказатель(Предл.Указатель));
				Результат.Добавить(" = ");
				ПостроитьПредлЕсли(Данные, ПредлЕсли);
			КонецЦикла;
			Если Предл.Свойство("ЧастьИначе") Тогда
				Результат.Добавить("Иначе");
				Результат.Добавить(Символы.ПС);
				ПостроитьПредложения(Данные, Предл.ЧастьИначе);
			КонецЕсли;
			Результат.Добавить("КонецЕсли");
			Результат.Добавить(";");
			Результат.Добавить(Символы.ПС);
		Иначе
			Результат.Добавить(Символы.ПС);
			Данные.Отступ = Данные.Отступ - 1;
			Если Предл.Свойство("ЧастьИначе") Тогда
				ПостроитьПредложения(Данные, Предл.ЧастьИначе);
			КонецЕсли;
			Данные.Отступ = Данные.Отступ + 1;
			Результат.Добавить(Символы.ПС);
		КонецЕсли;
	ИначеЕсли ТипУзла = "ПредлПопытка" Тогда
		Результат.Добавить("Попытка");
		Результат.Добавить(Символы.ПС);
		ПостроитьПредложения(Данные, Предл.ЧастьПопытка);
		Результат.Добавить("Исключение");
		Результат.Добавить(Символы.ПС);
		ПостроитьПредложения(Данные, Предл.ЧастьИсключение);
		Результат.Добавить("КонецПопытки");
		Результат.Добавить(";");
		Результат.Добавить(Символы.ПС);
	КонецЕсли;
КонецПроцедуры // ПостроитьПредл()

Процедура ПостроитьПредлЕсли(Данные, ПредлЕсли)
	Перем Результат;
	Результат = Данные.Результат;
	Результат.Добавить(ПостроитьВыражения(ПредлЕсли.Условие));
	Результат.Добавить(" Тогда");
	Результат.Добавить(Символы.ПС);
	ПостроитьПредложения(Данные, ПредлЕсли.ЧастьТогда);
	Если ПредлЕсли.Свойство("ЧастьИначеЕсли") Тогда
		Для Каждого Элемент Из ПредлЕсли.ЧастьИначеЕсли Цикл
			Результат.Добавить("ИначеЕсли ");
			ПостроитьПредлЕсли(Данные, Элемент);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ПостроитьПредлЕсли()

Функция ПостроитьСписокВыражений(СписокВыражений)
	Перем Буфер;
	Если СписокВыражений <> Неопределено Тогда
		Буфер = Новый Массив;
		Для Каждого Выражение Из СписокВыражений Цикл
			Если Выражение = Неопределено Тогда
				Буфер.Добавить("");
			Иначе
				Буфер.Добавить(ПостроитьВыражения(Выражение));
			КонецЕсли;
		КонецЦикла;
		Возврат СтрСоединить(Буфер, ", ");
	КонецЕсли;
КонецФункции // ПостроитьСписокВыражений()

Функция ПостроитьВыражения(Выражение)
	Перем ТипУзла, ТипЛитерала;
	ТипУзла = Выражение.ТипУзла;
	Если ТипУзла = "ПростойЛитерал" Тогда
		ТипЛитерала = Выражение.Вид;
		Если ТипЛитерала = Лексемы.Строка Тогда
			Возврат СтрШаблон("""%1""", СтрЗаменить(Выражение.Значение, Символы.ПС, """ """));
		ИначеЕсли ТипЛитерала = Лексемы.Число Тогда
			Возврат Формат(Выражение.Значение, "NZ=0; NG=");
		ИначеЕсли ТипЛитерала = Лексемы.ДатаВремя Тогда
			Возврат Формат(Выражение.Значение, "DF='""''yyyyMMdd'''");
		ИначеЕсли ТипЛитерала = Лексемы.Истина ИЛИ ТипЛитерала = Лексемы.Ложь Тогда
			Возврат Формат(Выражение.Значение, "BF=Ложь; BT=Истина");
		ИначеЕсли ТипЛитерала = Лексемы.Неопределено Тогда
			Возврат "Неопределено";
		Иначе
			ВызватьИсключение "Неизвестный простой литерал";
		КонецЕсли;
	ИначеЕсли ТипУзла = "Указатель" Тогда
		Возврат ПостроитьУказатель(Выражение);
	ИначеЕсли ТипУзла = "УнарноеВыражение" Тогда
		Возврат СтрШаблон("%1 %2", Операторы[Выражение.Оператор], ПостроитьВыражения(Выражение.Операнд));
	ИначеЕсли ТипУзла = "БинарноеВыражение" Тогда
		Возврат СтрШаблон("%1 %2 %3", ПостроитьВыражения(Выражение.Лев), Операторы[Выражение.Оператор], ПостроитьВыражения(Выражение.Прав));
	ИначеЕсли ТипУзла = "ВыражениеСравнение" Тогда
		Возврат СтрШаблон("%1 По %2", ПостроитьВыражения(Выражение.Лев), ПостроитьВыражения(Выражение.Прав));
	ИначеЕсли ТипУзла = "ВыражениеНовый" Тогда
		Если ТипЗнч(Выражение.Конструктор) = Тип("Структура") Тогда
			Возврат СтрШаблон("Новый %1", ПостроитьВыражения(Выражение.Конструктор));
		Иначе
			Возврат СтрШаблон("Новый(%1)", ПостроитьСписокВыражений(Выражение.Конструктор));
		КонецЕсли;
	ИначеЕсли ТипУзла = "ТернарноеВыражение" Тогда
		Возврат СтрШаблон("?(%1, %2, %3)", ПостроитьВыражения(Выражение.Условие), ПостроитьВыражения(Выражение.ЧастьТогда), ПостроитьВыражения(Выражение.ЧастьИначе));
	ИначеЕсли ТипУзла = "СкобочноеВыражение" Тогда
		Возврат СтрШаблон("(%1)", ПостроитьВыражения(Выражение.Выражение));
	КонецЕсли;
КонецФункции // ПостроитьВыражения()

Функция ПостроитьУказатель(Указатель)
	Перем Буфер;
	Буфер = Новый Массив;
	Буфер.Добавить(Указатель.Объект.Имя);
	Если Указатель.Свойство("Разделители") Тогда
		Для Каждого Разделитель Из Указатель.Разделители Цикл
			Если Разделитель.Вид = "Идентификатор" Тогда
				Буфер.Добавить(".");
				Буфер.Добавить(Разделитель.Значение);
			ИначеЕсли Разделитель.Вид = "Индекс" Тогда
				Буфер.Добавить("[");
				Буфер.Добавить(ПостроитьСписокВыражений(Разделитель.Значение));
				Буфер.Добавить("]");
			ИначеЕсли Разделитель.Вид = "Вызов" Тогда
				Буфер.Добавить("(");
				Буфер.Добавить(ПостроитьСписокВыражений(Разделитель.Значение));
				Буфер.Добавить(")");
			Иначе
				ВызватьИсключение "Неизвестный вид разделителя";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СтрСоединить(Буфер);
КонецФункции // ПостроитьУказатель()

#КонецОбласти // BSL

#КонецОбласти // Backends

Подробно = Истина;

Если АргументыКоманднойСтроки.Количество() Тогда

	РезультатФормат = "BSL";

	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Источник = Новый ТекстовыйДокумент;
	Источник.Прочитать(АргументыКоманднойСтроки[0], КодировкаТекста.UTF8);

	Если РезультатФормат = "Lexems" Тогда

		КонецФайла = Лексемы().КонецФайла;

		Разбор = Разбор(Источник.ПолучитьТекст());
		Пока Разобрать(Разбор) <> КонецФайла Цикл
			Сообщить(СтрШаблон("%1: %2 -- `%3`", Разбор.Строка, Разбор.Элемент, Разбор.Литерал));
		КонецЦикла;

	ИначеЕсли РезультатФормат = "AST" Тогда

		Парсер = Парсер(Источник.ПолучитьТекст());
		ПарситьМодуль(Парсер);
		Сообщить(Парсер.Модуль);
		// JSONWriter = Новый JSONWriter;
		// FileName = GetTempFileName(".json");
		// JSONWriter.OpenFile(FileName,,, Новый JSONWriterSettings(, Символы.Tab));
		// ЗаписатьJSON(JSONWriter, Парсер.Модуль);
		// JSONWriter.Close();
		// Результат = Новый ТекстовыйДокумент(FileName, КодировкаТекста.UTF8);
		// Результат.Read(FileName, КодировкаТекста.UTF8);

	ИначеЕсли РезультатФормат = "BSL" Тогда

		Данные = Данные();
		Парсер = Парсер(Источник.ПолучитьТекст());
		ПарситьМодуль(Парсер);
		ПостроитьМодуль(Данные, Парсер.Модуль);

		Результат = Новый ТекстовыйДокумент;
		Результат.УстановитьТекст(СтрСоединить(Данные.Результат));
		Результат.Записать(АргументыКоманднойСтроки[1]);

	КонецЕсли;

	Сообщить((ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000);

Иначе

	Сообщить("укажите имя файла для обработки и имя файла результата");

КонецЕсли;
