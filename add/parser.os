Перем ф;
Перем Повтор;
Перем Данные;
Перем ПослЗапись;

Функция ВыполнитьHTTPЗапрос(ПолныйАдресРесурса)

	 Сообщить(РаскодироватьСтроку(ПолныйАдресРесурса, СпособКодированияСтроки.КодировкаURL));

	СтруктураURI = СтруктураURI(ПолныйАдресРесурса);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , , 2000);

	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		 // исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		 Сообщить("Произошла сетевая ошибка!");
		 //ВызватьИсключение;
		 Возврат Неопределено;
	 КонецПопытки;

	 // Анализируем фатальные ошибки
	 // В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	 // включив в него HTTP-статус

	 // Ошибки 4XX говорят о неправильном запросе - в широком смысле
	 // Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	 // Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	 Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
	   	 Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	 КонецЕсли;

	 // Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер)
	 // Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	 // Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	 Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
	   	 Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	 КонецЕсли;

	 // Обрабатываем перенаправление
	 Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
	   	 Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		 Если Результат.КодСостояния = 302 Тогда
			  Сообщить("Код статуса 302, Постоянное перенаправление.");
			  АдресРесурса = Результат.Заголовки.Получить("Location");
			  Если АдресРесурса <> Неопределено Тогда
				  Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				  ВыполнитьHTTPЗапрос(АдресРесурса);
			  Иначе
				  Сообщить("Сервер не сообщил адрес ресурса!");
			  КонецЕсли;
		 КонецЕсли;
	 КонецЕсли;
	 // Статусы 1XX и 2XX считаем хорошими
	 Если Результат.КодСостояния < 300 Тогда
		   //Сообщить("Скорее всего все хорошо");
		   Сообщить("Код статуса: " + Результат.КодСостояния);
		   Возврат Результат.ПолучитьТелоКакСтроку();
     КонецЕсли;

	Возврат Неопределено;

КонецФункции


 Функция СтруктураURI(Знач СтрокаURI) Экспорт

	СтрокаURI = СокрЛП(СтрокаURI);

	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;

	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;

	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;

	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);

	Возврат Результат;

КонецФункции

Функция Парсить(УРЛ, Знач Узел);

	Доч = Неопределено;

	Пока Истина Цикл
		Рез = ВыполнитьHTTPЗапрос("https://ruwordnet.ru" + УРЛ);
		Если НЕ Рез = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	нач = СтрНайти(Рез, "гипоним</h4>");
	Если нач > 0 Тогда
		Рез = Сред(Рез, нач);
		кон = СтрНайти(Рез, "</div>" + Символы.ПС + "                                                                                            </div>" + Символы.ПС + "                                        </div>");
		Если кон > 0 Тогда
			Рез = Лев(Рез, кон);
		КонецЕсли;
		Пока Истина Цикл
			нач = СтрНайти(Рез, "sense-list");
			Если нач > 0 Тогда
				Рез = Сред(Рез, нач + 12);
				Зн = "";
				Пока Истина Цикл
					след = СтрНайти(Рез, "sense-list");
					нач = СтрНайти(Рез, "<a href=");
					Если нач > 0 И (Нач < след ИЛИ след = 0) Тогда
						Рез = Сред(Рез, нач + 9);
						кон = СтрНайти(Рез, ">");
						дУРЛ = Лев(Рез, кон - 2);
						Рез = Сред(Рез, кон + 1);
						кон = СтрНайти(Рез, "<");
						Зн = Зн + ?(Зн = "", "", ", ") + Лев(Рез, кон - 1);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Доч = Неопределено Тогда
					Доч = Данные.НовыйДочерний(Узел, Новый Структура("И, З", "У", зн));
					Повтор.Вставить(УРЛ, Доч.Код);
				Иначе
					Доч = Данные.НовыйСоседний(Доч, Новый Структура("И, З", "У", зн));
				КонецЕсли;
				Код = Повтор.Получить(дУРЛ);
				Если Код = Неопределено Тогда
					Парсить(дУРЛ, Доч);
				Иначе
					Доч.Вставить("Дочерний", Код);
					Сообщить("Повтор");
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщить("Нет гип.");
	КонецЕсли;

	Если ТекущаяДата() - ПослЗапись > 3 * 60 Тогда
		ЗаписатьДанные();
		ПослЗапись = ТекущаяДата();
	КонецЕсли;

КонецФункции

Функция ЗаписатьДанные()
	ф.УстановитьТекст(Данные.СохранитьДанные());
	ф.Записать(ОбъединитьПути(ТекущийКаталог(), "data/.files/inf12"));
	Сообщить("Запись");
КонецФункции // ЗаписатьДанные()

ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

ПослЗапись = ТекущаяДата();
Повтор = Новый Соответствие;
Данные = Новый pagedata(ЭтотОбъект, "", "", "inf12", "");
ф = Новый ТекстовыйДокумент;


// АБСТРАКТНАЯ СУЩНОСТЬ , АБСТРАКТНЫЙ ОБЪЕКТ
// 3 КАЧЕСТВЕННЫЙ
// 7 ПОСТОЯННАЯ СУЩНОСТЬ
// 8 ПРОИСХОДЯЩАЯ СУЩНОСТЬ
// 9 РОЛЬ
// 10 СОСТОЯТЬ В ОТНОШЕНИИ
// 11 СОВЕРШИТЬ ДЕЙСТВИЕ
// 12 СВЯЗЬ МЕЖДУ СУЩНОСТЯМИ

Парсить("/ru/sense/%D0%A1%D0%92%D0%AF%D0%97%D0%AC%20%D0%9C%D0%95%D0%96%D0%94%D0%A3%20%D0%A1%D0%A3%D0%A9%D0%9D%D0%9E%D0%A1%D0%A2%D0%AF%D0%9C%D0%98", Данные.Корень);

ЗаписатьДанные();
