Перем ф, Данные, Слова, Узлы;


Функция ВыполнитьHTTPЗапрос(ПолныйАдресРесурса)

	 Сообщить(РаскодироватьСтроку(ПолныйАдресРесурса, СпособКодированияСтроки.КодировкаURL));

	СтруктураURI = СтруктураURI(ПолныйАдресРесурса);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , , 2000);

	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		 // исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		 Сообщить("Произошла сетевая ошибка!");
		 //ВызватьИсключение;
		 Возврат Неопределено;
	 КонецПопытки;

	 // Анализируем фатальные ошибки
	 // В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	 // включив в него HTTP-статус

	 // Ошибки 4XX говорят о неправильном запросе - в широком смысле
	 // Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	 // Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	 Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
	   	 Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	 КонецЕсли;

	 // Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер)
	 // Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	 // Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	 Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
	   	 Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	 КонецЕсли;

	 // Обрабатываем перенаправление
	 Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
	   	 Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		 Если Результат.КодСостояния = 302 Тогда
			  Сообщить("Код статуса 302, Постоянное перенаправление.");
			  АдресРесурса = Результат.Заголовки.Получить("Location");
			  Если АдресРесурса <> Неопределено Тогда
				  Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				  ВыполнитьHTTPЗапрос(АдресРесурса);
			  Иначе
				  Сообщить("Сервер не сообщил адрес ресурса!");
			  КонецЕсли;
		 КонецЕсли;
	 КонецЕсли;
	 // Статусы 1XX и 2XX считаем хорошими
	 Если Результат.КодСостояния < 300 Тогда
		   //Сообщить("Скорее всего все хорошо");
		   Сообщить("Код статуса: " + Результат.КодСостояния);
		   Возврат Результат.ПолучитьТелоКакСтроку();
     КонецЕсли;

	Возврат Неопределено;

КонецФункции


Функция СтруктураURI(Знач СтрокаURI) Экспорт

	СтрокаURI = СокрЛП(СтрокаURI);

	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;

	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;

	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;

	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);

	Возврат Результат;

КонецФункции


Функция ПарситьСайт(н);

	Пока Истина Цикл
		Рез = ВыполнитьHTTPЗапрос("https://slovar.cc/enc/bse/" + н + ".html");
		Если НЕ Рез = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	заг = "";
	нач = СтрНайти(Рез, "article-title"">");
	Если нач > 0 Тогда
		Рез = Сред(Рез, нач + 15);
		кон = СтрНайти(Рез, "</dt>");
		Если кон > 0 Тогда
			заг = Лев(Рез, кон-1);
			//ф.ДобавитьСтроку("#");
			//Сообщить(заг);
		КонецЕсли;
		нач = СтрНайти(Рез, "articleBody");
		Если нач > 0 Тогда
			Рез = Сред(Рез, нач + 18);
			Зн = "";
			кон = СтрНайти(Рез, "</p>");
			Если кон > 0 Тогда
				зн = Лев(Рез, кон-1);

				м = СтрРазделить(заг, " ");
				сокр = "";
				Для каждого эм из м Цикл
					сокр = сокр + ?(сокр = "", Лев(эм, 1), " " + нРег(Лев(эм,1))) + ".";
				КонецЦикла;

				зн = СтрЗаменить(зн, сокр, заг);
				зн = СтрЗаменить(зн, Лев(заг, 1) + ".", заг);
				зн = СтрЗаменить(зн, "&#39;", "'");
				пр = заг + " - это " + зн;

				Если НЕ пр = "" Тогда
					ф.ДобавитьСтроку(пр);
					//Сообщить(пр);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецФункции


Функция ЗаписатьТекст()
	ф.Записать(ОбъединитьПути(ТекущийКаталог(), "parser-ru-win64/bse.txt"));
	Сообщить("Запись");
КонецФункции // ЗаписатьТекст()


Функция зн(имя, нСтр)
	Рез = ф.ПолучитьСтроку(нСтр);
	нач = СтрНайти(Рез, имя + ">");
	Рез = Сред(Рез, нач + 1 + СтрДлина(Имя));
	кон = СтрНайти(Рез, "<");
	Возврат Лев(Рез, кон-1);
КонецФункции // зн()


Функция ДобавитьУзел(Узел, Родитель);

	ну = Данные.НовыйДочерний(Родитель, Новый Структура("Имя, Значение", " ", Узел.word));
	сл = Слова.Получить(Узел.token);
	Если НЕ сл = Неопределено Тогда
		Данные.НовыйАтрибут(ну, Новый Структура("Имя, Значение", "lem", сл.lemma));
		Данные.НовыйАтрибут(ну, Новый Структура("Имя, Значение", "pos", сл.part_of_speech));
	КонецЕсли;
	Если НЕ Узел.link_type = "" Тогда
		Данные.НовыйАтрибут(ну, Новый Структура("Имя, Значение", "lt", Узел.link_type));
	КонецЕсли;

	Найден = Истина;
	Пока Найден Цикл
		Найден = Ложь;
		Для каждого эл Из Узлы Цикл
			уз = эл.Значение;
			род = Неопределено;
			Если уз.Свойство("parent", род) Тогда
				Если род = Узел.token Тогда
					Узлы.Удалить(эл.Ключ);
					ДобавитьУзел(уз, ну);
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецФункции // ДобавитьУзел()


Функция Парсить();

	нСтр = 1;

	Пока нСтр <= ф.КоличествоСтрок() Цикл

		Рез = ф.ПолучитьСтроку(нСтр);

		Если Лев(Рез, 6) = "<text>" Тогда
			text = зн("text", нСтр);
			//Если НЕ Сред(Рез,7, 1) = "#" Тогда
				Слова = Новый Соответствие;
				Узлы = Новый Соответствие;
				Текст = Данные.НовыйДочерний(Данные.Корень, Новый Структура("Имя, Значение", "text", text));
				Корень = Неопределено;
				//Сообщить(рез);
				Пока Истина Цикл
					Если Лев(Рез, 5) = "<word" Тогда
						position = зн("position", нСтр + 1);
						lemma = зн("lemma", нСтр + 2);
						part_of_speech = зн("part_of_speech", нСтр + 3);
						Слова.Вставить(position, Новый Структура("lemma, part_of_speech", lemma, part_of_speech));
						нСтр = нСтр + 6;
					ИначеЕсли Лев(Рез, 5) = "<node" Тогда
						token = зн("token", нСтр);
						word = зн("word", нСтр);
						parent = зн("parent", нСтр);
						link_type = зн("link_type", нСтр);
						уз = Новый Структура("token, word, parent, link_type", token, word, parent, link_type);
						Если Лев(Рез, 8) = "<node is" ИЛИ Корень = Неопределено Тогда
							Корень = уз;
							Корень.Вставить("text", text);
						КонецЕсли;
						Узлы.Вставить(token, уз);
						нСтр = нСтр + 1;
					ИначеЕсли Лев(Рез, 11) = "</sentence>" Тогда
						// выгрузить узлы
						ДобавитьУзел(Корень, Текст);
						Прервать;
					Иначе
						нСтр = нСтр + 1;
					КонецЕсли;
					Рез = ф.ПолучитьСтроку(нСтр);
				КонецЦикла;
			//КонецЕсли;
		КонецЕсли;

		нСтр = нСтр + 1;

	КонецЦикла;

КонецФункции

Функция ЗаписатьДанные(База, Слово)
	Если База.ОткрытьПотокДанных(Истина) Тогда
		База.ДобавитьДанные(Новый Структура("ИмяДанных, ТипДанных", "" + Слово, "3"), ПолучитьДвоичныеДанныеИзСтроки(Данные.СохранитьДанные()));
	КонецЕсли;
КонецФункции // ЗаписатьДанные()

ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");
ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "dbaccess.os"), "dbaccess");

База = Новый dbaccess("syn");

с = 1969550 + 90000;

Пока с < 2064816 - 99 Цикл

	Данные = Новый pagedata(ЭтотОбъект);

	ф = Новый ТекстовыйДокумент;
	Для н = с по с + 99 Цикл
		ПарситьСайт(н);
	КонецЦикла;
	ЗаписатьТекст();

	ЗапуститьПриложение("Parser.exe -verbose -tagger 0 -parser 0 -lemmatizer 0 -emit_morph 0 -d dictionary.xml bse.txt -o parsing.txt" , ОбъединитьПути(ТекущийКаталог(), "parser-ru-win64"), Истина);

	ф = Новый ТекстовыйДокумент;
	ф.Прочитать("parser-ru-win64/parsing.txt");
	Парсить();

	Сообщить(с);
	ЗаписатьДанные(База, с);

	с = с + 100;

	//Прервать;

КонецЦикла;
