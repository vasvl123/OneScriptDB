// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

Перем Хост, Порт;
Перем ОстановитьСервер;
Перем Ресурсы;
Перем Загрузка;
Перем ВсеДанные;
Перем Профили;
Перем Соль;
Перем Контроллеры;
Перем МоментЗапуска;
Перем ОбновитьСписокФайлов;
Перем ОбновитьСписокБаз;
Перем Задачи, мЗадачи;
Перем АктивныеЗадачи;
Перем Соединения;


Функция ПолучитьИД()
	МоментЗапуска = МоментЗапуска - 1;
	Возврат Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска);
КонецФункции // ПолучитьИД()


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция СтруктуруВДвоичныеДанные(знСтруктура)
	Результат = Новый Массив;
	Если НЕ знСтруктура = Неопределено Тогда
		Для каждого Элемент Из знСтруктура Цикл
			Если ТипЗнч(знСтруктура) = Тип("Массив") Тогда
				Ключ = "";
				Значение = Элемент;
			Иначе
				Ключ = "" + Элемент.Ключ;
				Значение = Элемент.Значение;
			КонецЕсли;
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				Ключ = "*" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Соответствие") Тогда
				Ключ = "&" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				Ключ = "$" + Ключ;
				дЗначение = СтруктуруВДвоичныеДанные(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
				Ключ = "#" + Ключ;
				дЗначение = Значение;
			Иначе
				Если ТипЗнч(Значение) = Тип("Число") Тогда
					Ключ = "!" + Ключ;
				КонецЕсли;
				дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
			КонецЕсли;
			дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
			рдКлюч = дКлюч.Размер();
			рдЗначение = дЗначение.Размер();
			бРезультат = Новый БуферДвоичныхДанных(6);
			бРезультат.ЗаписатьЦелое16(0, рдКлюч);
			бРезультат.ЗаписатьЦелое32(2, рдЗначение);
			Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
			Результат.Добавить(дКлюч);
			Результат.Добавить(дЗначение);
		КонецЦикла;
	КонецЕсли;
	Возврат СоединитьДвоичныеДанные(Результат);
КонецФункции


Функция ДвоичныеДанныеВСтруктуру(Данные, знСтруктура = Неопределено)
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		рдДанные = Данные.Размер();
		Если рдДанные = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("БуферДвоичныхДанных") Тогда
		рдДанные = Данные.Размер;
		бдДанные = Данные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Позиция = 0;
	Если знСтруктура = Неопределено Тогда
		знСтруктура = Новый Структура;
	КонецЕсли;
	Пока Позиция < рдДанные - 1 Цикл
		рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
		рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
		Если рдКлюч + рдЗначение > рдДанные Тогда // Это не структура
			Возврат Неопределено;
		КонецЕсли;
		Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
		бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
		Позиция = Позиция + 6 + рдКлюч + рдЗначение;
		Л = Лев(Ключ, 1);
		Если Л = "*" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение, Новый Структура);
		ИначеЕсли Л = "&" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение, Новый Соответствие);
		ИначеЕсли Л = "$" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ДвоичныеДанныеВСтруктуру(бЗначение, Новый Массив);
		ИначеЕсли Л = "#" Тогда
			Ключ = Сред(Ключ, 2);
			Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
		Иначе
			Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
			Если Л = "!" Тогда
				Ключ = Сред(Ключ, 2);
				Значение = Число(Значение);
			КонецЕсли;
		КонецЕсли;
		Если Ключ = "" Тогда
			знСтруктура.Добавить(Значение);
		Иначе
			знСтруктура.Вставить(Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат знСтруктура;
КонецФункции


// Разбирает вошедший запрос и возвращает структуру запроса
Функция РазобратьЗапросКлиента(ТекстЗапроса)

	Перем ИмяКонтроллера;
	Перем ИмяМетода;
	Перем ПараметрыМетода;

	Заголовок = Новый Соответствие();

	мТекстовыеДанные = ТекстЗапроса;
	Разделитель = "";
	Пока Истина Цикл
		П = Найти(мТекстовыеДанные, Символы.ПС);
		Если П = 0 Тогда
			Прервать;
		КонецЕсли;
		Подстрока = Лев(мТекстовыеДанные, П);
		мТекстовыеДанные = Прав(мТекстовыеДанные, СтрДлина(мТекстовыеДанные) - П);
		// Разбираем ключ значение
		Если Найти(Подстрока,"HTTP/1") > 0 Тогда
			// Это строка протокола
			// Определим метод
			П1 = 0;
			Метод = Неопределено;
			Если Лев(Подстрока, 3) = "GET" Тогда
				Метод ="GET";
				П1 = 3;
			ИначеЕсли Лев(Подстрока, 4) = "POST" Тогда
				Метод ="POST";
				П1 = 4;
			ИначеЕсли Лев(Подстрока, 3) = "PUT" Тогда
				Метод = "PUT";
				П1 = 3;
			ИначеЕсли Лев(Подстрока, 6) = "DELETE" Тогда
				Метод ="DELETE";
				П1 = 6;
			КонецЕсли;
			Заголовок.Вставить("Method", Метод);
			// Определим Путь
			П2 = Найти(Подстрока,"HTTP/1");
			Путь = СокрЛП(Сред(Подстрока,П1+1,СтрДлина(Подстрока)-10-П1));
			Заголовок.Вставить("Path", Путь);
		Иначе
			Если Подстрока = Символы.ВК + Символы.ПС Тогда
				Прервать;
			ИначеЕсли Найти(Подстрока,":") > 0 Тогда
				П3 = Найти(Подстрока,":");
				Ключ 		= СокрЛП(Лев(Подстрока,П3-1));
				Значение	= СокрЛП(Прав(Подстрока,СтрДлина(Подстрока)-П3));
				Заголовок.Вставить(Ключ, Значение);
				Если Ключ = "Content-Type" Тогда
					Если Лев(Значение, 20) = "multipart/form-data;" Тогда
						Разделитель = "--" + Сред(Значение, 31);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Ключ 		= "unknown";
				Значение	= СокрЛП(Подстрока);
				Если СтрДлина(Значение) > 0 Тогда
					Заголовок.Вставить(Ключ, Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Метод ="POST" Тогда
		Содержимое = Заголовок.Получить("Content-Type");
		Если Содержимое = "text/plain;charset=UTF-8" Тогда // параметры строкой
			// Получим данные запроса
			ПД = Найти(мТекстовыеДанные,Символы.ВК+Символы.ПС+Символы.ВК+Символы.ПС);
			POSTДанные = Сред(мТекстовыеДанные,ПД,СтрДлина(мТекстовыеДанные)-ПД);
			// Разбираем данные пост
			Если СтрДлина(POSTДанные) > 0 Тогда
				POSTДанные = POSTДанные + "&";
			КонецЕсли;
			Заголовок.Вставить("POSTДанные", POSTДанные);
			POSTСтруктура = Новый Структура();
			Пока Найти(POSTДанные, "&") > 0 Цикл
				П1 = Найти(POSTДанные, "&");
				П2 = Найти(POSTДанные, "=");
				Ключ = Лев(POSTДанные, П2-1);
				Значение = Сред(POSTДанные, П2+1, П1-(П2+1));
				POSTДанные = Прав(POSTДанные, СтрДлина(POSTДанные)-П1);
				Если НЕ Ключ = "" Тогда
					POSTСтруктура.Вставить(Ключ, РаскодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL));
				КонецЕсли;
			КонецЦикла;
			Заголовок.Вставить("POSTData", POSTСтруктура);
		ИначеЕсли Лев(Содержимое, 20) = "multipart/form-data;" Тогда // параметры формы
			POSTСтруктура = Новый Структура();
			Пока Истина Цикл
				П = Найти(мТекстовыеДанные, Разделитель);
				Если П = 0 Тогда
					Прервать;
				КонецЕсли;
				Подстрока = Лев(мТекстовыеДанные, П);
				мТекстовыеДанные = Прав(мТекстовыеДанные, СтрДлина(мТекстовыеДанные) - П - СтрДлина(Разделитель) - 1);
				Если Найти(Подстрока, "Content-Disposition: form-data;") Тогда
					П1 = Найти(Подстрока, "name=");
					П2 = Найти(Подстрока, Символы.ПС);
					П3 = Найти(Подстрока, Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС);
					П4 = Найти(Подстрока, "; filename");
					Если НЕ П4 = 0 Тогда
						Значение = ПолучитьДвоичныеДанныеИзСтроки(Сред(Подстрока, П3 + 4, СтрДлина(Подстрока) - П3 - 6), "windows-1251");
						POSTСтруктура.Вставить("filename", РаскодироватьСтроку(Сред(Подстрока, П4 + 12, П2 - П4 - 14), СпособКодированияСтроки.КодировкаURL));
						Ключ = Сред(Подстрока, П1 + 6, П4 - П1 - 7);
					Иначе
						Ключ = Сред(Подстрока, П1 + 6, П2 - П1 - 8);
						Значение = РаскодироватьСтроку(Сред(Подстрока, П2 + 3, СтрДлина(Подстрока) - П2 - 5), СпособКодированияСтроки.КодировкаURL);
					КонецЕсли;
					Если НЕ Ключ = "" Тогда
						POSTСтруктура.Вставить(Ключ, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Заголовок.Вставить("POSTData", POSTСтруктура);
		ИначеЕсли Содержимое = "application/octet-stream" Тогда // двоичные данные
			ПД = Найти(мТекстовыеДанные,Символы.ВК+Символы.ПС+Символы.ВК+Символы.ПС);
			POSTДанные = Сред(мТекстовыеДанные,ПД);
			//Заголовок.Вставить("POSTДанные", POSTДанные);
			Заголовок.Вставить("POSTData", ДвоичныеДанныеВСтруктуру(ПолучитьДвоичныеДанныеИзСтроки(POSTДанные, "windows-1251")));
		КонецЕсли;
	КонецЕсли;

	//ЛогСообщить(ПД);
	// Разбор пути на имена контроллеров
	Путь = СокрЛП(Заголовок.Получить("Path"));
	// ПараметрыМетода = Новый Массив();
	Если Не Путь = Неопределено Тогда
		Если Лев(Путь,1) = "/" Тогда
			Путь = Прав(Путь, СтрДлина(Путь)-1);
		КонецЕсли;
		Если Прав(Путь,1) <> "/" Тогда
			Путь = Путь+"/";
		КонецЕсли;
		Сч = 0;
		Пока Найти(Путь,"/") > 0 Цикл
			П = Найти(Путь,"/");
			Сч = Сч + 1;
			ЗначениеПараметра = РаскодироватьСтроку(Лев(Путь,П-1), СпособКодированияСтроки.КодировкаURL);
			Путь = Прав(Путь, СтрДлина(Путь)-П);
			Если Сч = 1 Тогда
				ИмяКонтроллера = ЗначениеПараметра;
			ИначеЕсли Сч = 2 Тогда
				ИмяМетода = ЗначениеПараметра;
			ИначеЕсли НЕ ЗначениеПараметра = ".." Тогда
				ИмяМетода = ОбъединитьПути(ИмяМетода, ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		GETСтруктура = Новый Структура();
		Если НЕ СокрЛП(ИмяМетода) = "" Тогда
			Если Найти(ИмяМетода, "?") Тогда
				GETДанные = ИмяМетода;
				ИмяМетода = Лев(GETДанные, Найти(GETДанные, "?") - 1);
				GETДанные = СтрЗаменить(GETДанные, ИмяМетода + "?", "") + "&";
				// Разбираем данные гет
				Пока Найти(GETДанные, "&") > 0 Цикл
					П1 = Найти(GETДанные, "&");
					П2 = Найти(GETДанные, "=");
					Ключ = Лев(GETДанные, П2-1);
					Значение = Сред(GETДанные, П2 + 1, П1 - (П2 + 1));
					GETДанные = Прав(GETДанные, СтрДлина(GETДанные) - П1);
					Если НЕ Ключ = "" Тогда
						GETСтруктура.Вставить(Ключ, РаскодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Заголовок.Вставить("GETData", GETСтруктура);

	Запрос = Новый Структура;
	Запрос.Вставить("Заголовок", Заголовок);
	Запрос.Вставить("ИмяКонтроллера", "" + ИмяКонтроллера);
	Запрос.Вставить("ИмяМетода", "" + ИмяМетода);
	// Запрос.Вставить("ПараметрыМетода", ПараметрыМетода);

	Возврат Запрос;

КонецФункции


Функция ОбработатьЗапросКлиента(Запрос, Знач Соединение)

	Метод = Запрос.Заголовок.Получить("Method");

	Если НЕ Метод = Неопределено Тогда

		ПараметрыЗапроса = Запрос.Заголовок.Получить(Метод + "Data");

		Если ПараметрыЗапроса = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;

		Задача = Новый Структура;
		ИдЗадачи = ПолучитьИД();
		Задачи.Вставить("" + ИдЗадачи, Задача);
		мЗадачи.Добавить(Задача);
		Задача.Вставить("ИдЗадачи", "" + ИдЗадачи);
		Задача.Вставить("Этап", "Выполнить");
		Задача.Вставить("Ответ", "Неопределено");
		Задача.Вставить("ВремяНачало", ТекущаяДата());
		Задача.Вставить("Соединение", Соединение);
		Задача.Вставить("ИдКонтроллера", Неопределено);
		Задача.Вставить("Результат", Неопределено);
		Задача.Вставить("УдаленныйУзел", УдаленныйУзелАдрес(Соединение.УдаленныйУзел));
		ПараметрыЗапроса.Вставить("ИмяМетода", Запрос.ИмяМетода);
		ПараметрыЗапроса.Вставить("ИмяКонтроллера", Запрос.ИмяКонтроллера);
		Задача.Вставить("Запрос", ПараметрыЗапроса);

		Сообщить("dataserver " + Задача.УдаленныйУзел + " -> taskid=" + Задача.ИдЗадачи + " " + СокрЛП(Запрос.Заголовок.Получить("Method")) + " " + Запрос.Заголовок.Получить("Path"));

	КонецЕсли;

КонецФункции


Процедура ОбработатьОтветСервера(Задача)

	Попытка

		СтатусОтвета = 200;
		Заголовок = Новый Соответствие();
		Если ТипЗнч(Задача.Результат) = Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанныеОтвета =  Задача.Результат;
			Заголовок.Вставить("Content-Length", ДвоичныеДанныеОтвета.Размер());
			ContentType = "";
			Если Задача.Свойство("ContentType", ContentType) Тогда
				Заголовок.Вставить("Content-Type", ContentType);
			КонецЕсли;
		Иначе
			ДвоичныеДанныеОтвета = ПолучитьДвоичныеДанныеИзСтроки(Задача.Результат);
			Заголовок.Вставить("Content-Length", ДвоичныеДанныеОтвета.Размер());
			Заголовок.Вставить("Content-Type", "text/html");
			//Заголовок.Вставить("taskid", Задача.ИдЗадачи);
		КонецЕсли;

		//Если Задача.Соединение.Активно Тогда

		Попытка

			ПС = Символы.ВК + Символы.ПС;
			ТекстОтветаКлиенту = "HTTP/1.1 200 OK" + ПС;
			Для Каждого СтрокаЗаголовкаответа из Заголовок Цикл
				ТекстОтветаКлиенту = ТекстОтветаКлиенту + СтрокаЗаголовкаответа.Ключ + ":" + СтрокаЗаголовкаответа.Значение + ПС;
			КонецЦикла;

			мДанные = Новый Массив;
			мДанные.Добавить(ПолучитьДвоичныеДанныеИзСтроки(ТекстОтветаКлиенту + ПС));
			//Сообщить(ТекстОтветаКлиенту);
			мДанные.Добавить(ДвоичныеДанныеОтвета);

			Задача.Соединение.ОтправитьДвоичныеДанныеАсинхронно(СоединитьДвоичныеДанные(мДанные));
			Задача.Этап = "Вернуть";

		Исключение

			Сообщить("dataserver: " + ОписаниеОшибки());
			Задача.Этап = "Удалить";

		КонецПопытки;

		//КонецЕсли;

	Исключение
		Сообщить("Ошибка формирования ответа");
		Сообщить(ОписаниеОшибки());
		Задача.Этап = "Удалить";
	КонецПопытки;

КонецПроцедуры


Функция ПередатьДанные(Хост, Порт, стрДанные) Экспорт
	Попытка
		Соединение = Новый TCPСоединение(Хост, Порт);
		Соединение.ТаймаутОтправки = 5000;
		Соединение.ОтправитьДвоичныеДанныеАсинхронно(СтруктуруВДвоичныеДанные(стрДанные));
		Возврат Соединение;
	Исключение
		Сообщить(ОписаниеОшибки());
		Если Соединение = Неопределено Тогда
			Сообщить("dataserver: Хост недоступен: " + Хост + ":" + Порт);
		Иначе
			Соединение.Закрыть();
			Соединение = Неопределено;
		КонецЕсли;
	КонецПопытки;
	Возврат Соединение;
КонецФункции // ПередатьДанные()


Функция УдаленныйУзелАдрес(УдаленныйУзел)
	Возврат Лев(УдаленныйУзел, Найти(УдаленныйУзел, ":") - 1);
КонецФункции


Функция НовоеУсловиеОтбора(ЗапросДанных = Неопределено, КлючИмя, Сравнение, КлючЗначение)
	Если ЗапросДанных = Неопределено Тогда
		ЗапросДанных = Новый Структура("УсловияОтбора", Новый Структура);
	КонецЕсли;
	ЗапросДанных.УсловияОтбора.Вставить(КлючИмя, Новый Структура("Сравнение, Значение", Сравнение, КлючЗначение));
	Возврат ЗапросДанных;
КонецФункции

// расшифровывает данные по ключу
Функция Расшифровать(Шифр, КлючШифрования) Экспорт
	бШифр = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(Шифр));
	бКлючШифрования = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(КлючШифрования));
	ЗакодированныеДанные = Новый БуферДвоичныхДанных(32);
	Для Счетчик = 0 ПО 31 Цикл
		ЗначениеКлюча = бКлючШифрования.Получить(Счетчик);
		ЗакодированноеЗначение 	= бШифр.Получить(Счетчик);
		ЗначениеИсходныхДанных = ЗакодированноеЗначение - ЗначениеКлюча;
		Если ЗначениеИсходныхДанных < 0 Тогда
			ЗначениеИсходныхДанных = ЗначениеИсходныхДанных + 256;
		КонецЕсли;
		ЗакодированныеДанные.Установить(Счетчик, ЗначениеИсходныхДанных);
	КонецЦикла;
	Возврат ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ЗакодированныеДанные));
КонецФункции


Функция ПроверкаАвторизации(Параметры)
	ПрошелАвторизацию = Ложь;
	СтатусСубъекта = "Гость";
	Имя = "";
	Результат = Новый Структура;
	Если Параметры.Свойство("unm", Имя) Тогда
		СтатусСубъекта = "Не авторизован";
		Если НЕ "" + Имя = "" Тогда
			//Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
			ЗапросДанных = НовоеУсловиеОтбора(, "Имя", "Равно", Имя);
			ЗапросДанных = НовоеУсловиеОтбора(ЗапросДанных, "ТолькоОдин", "Равно", "Истина");
			СтатусСубъекта = "Неизвестный субъект";
			Если НЕ Профили.НайтиЗаголовок(ЗапросДанных) = "ОшибкаПотокаДанных" Тогда
				Если ЗапросДанных.ЗаголовокНайден Тогда
					Профиль = ЗапросДанных.Заголовок;
					СтатусСубъекта = "Неверный пароль";
					Если НЕ "" + Профиль.Пароль = "" Тогда
						Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
						Хэш.Добавить(Параметры.procid + Параметры.uid + Профиль.Пароль);
						Если ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма) = Параметры.pwd Тогда
							СтатусСубъекта = "Прошел авторизацию";
							ПрошелАвторизацию = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
	Параметры.Вставить("СтатусСубъекта", СтатусСубъекта);
	Параметры.Вставить("Профиль", Профиль);
	Сообщить(СтатусСубъекта);
	Возврат ПрошелАвторизацию;
КонецФункции // ПроверкаАвторизации()


Функция ВыполнитьРегистрацию(Параметры)
	Перем Имя;
	Перем Почта;
	Перем Профиль;
	Перем Пароль;
	ПрошелАвторизацию = Ложь;
	ТекстСообщение = "Введите свое имя";
	ТекстСтатус = "Внимание";
	Параметры.Вставить("Этап", "");
	Параметры.Вставить("key", "");
	Если Параметры.Свойство("unm", Имя) Тогда
		Если НЕ Имя = "" И НЕ Имя = "sys" Тогда
			//Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
			ЗапросДанных = НовоеУсловиеОтбора(, "Имя", "Равно", Имя);
			ЗапросДанных = НовоеУсловиеОтбора(ЗапросДанных, "ТолькоОдин", "Равно", "Истина");
			Если НЕ Профили.НайтиЗаголовок(ЗапросДанных) = "ОшибкаПотокаДанных" Тогда
				Если НЕ ЗапросДанных.ЗаголовокНайден Тогда
					Сообщить("Профиль не найден");
					Профиль = Новый Структура("Имя, Пароль, Почта, Ключ, Дата, УдаленныйУзел", Имя, "", "", "", ТекущаяДата(), Параметры.УдаленныйУзел);
				Иначе
					Профиль = ЗапросДанных.Заголовок;
				КонецЕсли;
				Если НЕ Профиль.Пароль = "" Тогда
					ТекстСообщение = "Такое имя уже существует";
				Иначе
					ТекстСообщение = "Укажите свой почтовый ящик";
					Если Параметры.Свойство("mail", Почта) Тогда
						Если НЕ Почта = "" Тогда
							ТекстСообщение = "Введите пароль два раза";
							Параметры.Вставить("Этап", "Подтверждение");
							Профиль.Почта = Почта;
							Если Профиль.Ключ = "" Тогда
								Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
								Хэш.Добавить(Соль + ПолучитьИД());
								Ключ = ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма);
								Профиль.Ключ = Ключ;
								Сообщить(Ключ);
								Профили.ДобавитьДанные(Профиль);
							Иначе
								Параметры.Вставить("key", Профиль.Ключ);
								Если Параметры.Свойство("pwd2", Пароль) Тогда
									Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
									Хэш.Добавить(Имя);
									ПустойПароль = ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма);
									Пароль = Расшифровать(Пароль, Профиль.Ключ);
									Если НЕ Пароль = ПустойПароль Тогда // не пустой
										ТекстСообщение = "Пароли не совпадают";
										Хэш = Новый ХешированиеДанных(ХешФункция.SHA256);
										Хэш.Добавить(Параметры.procid + Параметры.uid + Пароль);
										Если ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма) = Параметры.pwd Тогда
											ТекстСообщение = "Регистрация выполнена";
											ТекстСтатус = "Информация";
											Профиль.Пароль = Пароль;
											ПрошелАвторизацию = Истина;
											Профили.ДобавитьДанные(Профиль);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							Параметры.Вставить("key", Профиль.Ключ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
	Параметры.Вставить("ТекстСообщение", ТекстСообщение);
	Параметры.Вставить("ТекстСтатус", ТекстСтатус);
	Параметры.Вставить("Профиль", Профиль);
	Сообщить(ТекстСообщение);
	Возврат ПрошелАвторизацию;
КонецФункции // ВыполнитьРегистрацию()


Функция ПолучитьДанные(ИстДанных, БазаДанных)
	Перем Данные;
	Сис = ОбъединитьПути("data", ИстДанных);
	Если НЕ БазаДанных = "" Тогда // имя контейнера указано
		Данные = ВсеДанные.Получить(Сис + "/" + БазаДанных);
		Если Данные = Неопределено Тогда // открыть контейнер
			Данные = Новый dbaccess(ОбъединитьПути(ТекущийКаталог(), Сис), БазаДанных);
			ВсеДанные.Вставить(Сис + "/" + БазаДанных, Данные);
			ОбновитьСписокБаз = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	Возврат Данные;
КонецФункции


Функция ВыполнитьЗадачу(структЗадача)
	Перем Команда, ИстДанных, ИмяДанных, БазаДанных, ПозицияДанных, ЗапросДанных, procid, Данные, Профиль;

	Запрос = структЗадача.Запрос;

	БазаДанных = "" + УзелСвойство(Запрос, "БазаДанных");
	ИстДанных = "" + УзелСвойство(Запрос, "ИстДанных");
	ИмяДанных = "" + УзелСвойство(Запрос, "ИмяДанных");

	Субъект = ""; // имя пользователя

	// Если ИстДанных = "" Тогда
	// 	ИстДанных = "public";
	// КонецЕсли;

	Запрос.Свойство("procid", procid);
	Запрос.Свойство("cmd", Команда);

	Если Команда = Неопределено Тогда
		Запрос.Свойство("Команда", Команда);
	КонецЕсли;

	Сообщить("dataserver: " + Команда);

	Если Команда = "init" Тогда // регистрация контроллера
		Если НЕ procid = Неопределено Тогда
			Контроллеры.Вставить(procid, Запрос);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;

	ИдПроцесса = УзелСвойство(Запрос, "ИдПроцесса");
	Если НЕ ИдПроцесса = Неопределено Тогда
		Контроллер = Контроллеры.Получить(ИдПроцесса);
		Если НЕ Контроллер = Неопределено Тогда
			Профиль = УзелСвойство(Контроллер, "Профиль");
			Если НЕ Профиль = Неопределено Тогда
				Субъект = Профиль.Имя;
				Каталог = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект));
				Файл = Новый Файл(Каталог);
				Если НЕ Файл.Существует() Тогда
					СоздатьКаталог(Каталог);
				КонецЕсли;
			КонецЕсли;
		Иначе
			структЗадача.Ответ = "ЗапросВыполняется";
			Сообщить("dataserver: " + "контроллер не зарегистрирован");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Команда = "ПолучитьДанные" Тогда

		Если БазаДанных = "" Тогда // чтение данных из файла
			Попытка
				ИмяДанных = Запрос.ИмяДанных;
				Если (ИстДанных = Субъект ИЛИ ИстДанных = "" ИЛИ ИстДанных = "public") Тогда
					ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", ?(ИстДанных = "", Субъект, ИстДанных)), ИмяДанных + ".sd");
					Файл = Новый Файл(ИмяФайлаДанных);
					Если Файл.Существует() Тогда // у себя
						структЗадача.Вставить("Результат", Новый Структура("Данные", Новый ДвоичныеДанные(ИмяФайлаДанных)));
						структЗадача.Вставить("Ответ", "Успешно");
						Возврат Истина;
					КонецЕсли;
					Если НЕ Файл.Существует() Тогда
						Если ИстДанных = "" Тогда
							ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", "public"), ИмяДанных + ".sd");
							Файл = Новый Файл(ИмяФайлаДанных);
							Если Файл.Существует() Тогда // public
								структЗадача.Вставить("Результат", Новый Структура("Данные", Новый ДвоичныеДанные(ИмяФайлаДанных)));
								структЗадача.Вставить("Ответ", "Успешно");
								Возврат Истина;
							Иначе
								БазаДанных = "public"; // поискать еще в public.sdb
							КонецЕсли;
						Иначе
							структЗадача.Вставить("Ответ", "НеНайден");
							Возврат Истина;
						КонецЕсли;
					КонецЕсли;
				Иначе
					структЗадача.Вставить("Ответ", "Запрещено");
				КонецЕсли;
			Исключение
				структЗадача.Вставить("Ответ", "Ошибка");
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;

		КонецЕсли;

	КонецЕсли;

	Если Команда = "stopserver" Тогда
		ОстановитьСервер = Истина;
		Возврат Ложь;

	ИначеЕсли Команда = "termproc" Тогда
		УдалитьКонтроллерИЗадачи(procid); // удалить контроллер и его задачи
		Возврат Ложь;

	ИначеЕсли Команда = "auth" ИЛИ Команда = "reg" Тогда
		Если Команда = "auth" Тогда
			Результат = ПроверкаАвторизации(Запрос.ЗапросДанные);
		Иначе
			Результат = ВыполнитьРегистрацию(Запрос.ЗапросДанные);
		КонецЕсли;
		Если Результат = Истина Тогда
			Контроллер = Контроллеры.Получить(Запрос.ИдПроцесса);
			Если НЕ Контроллер = Неопределено Тогда
				Контроллер.Вставить("Субъект", Запрос.ЗапросДанные.Профиль.Имя);
				Контроллер.Вставить("Профиль", Запрос.ЗапросДанные.Профиль);
			КонецЕсли;
		КонецЕсли;
		структЗадача.Вставить("Ответ", ПроверкаАвторизации(Запрос.ЗапросДанные));
		структЗадача.Вставить("Результат", Запрос.ЗапросДанные);
		Возврат Истина;

	ИначеЕсли Команда = "ЗавершитьЗадачу" Тогда // завершить существующую задачу
		Для каждого элЗадача Из Задачи Цикл
			стрЗадача = элЗадача.Значение;
			Если стрЗадача.Запрос.Свойство("ОбратныйЗапрос") Тогда
				Если стрЗадача.Запрос.ОбратныйЗапрос.ИдЗадачи = Запрос.сЗадача Тогда
					стрЗадача.Ответ = "ЗавершитьЗадачу";
					стрЗадача.Результат = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Возврат Истина;

	ИначеЕсли Команда = "ЗаписатьЗаголовок" Тогда // запись заголовка
		Если БазаДанных = "web" ИЛИ БазаДанных = "log" Тогда // системные базы
			Данные = ПолучитьДанные("sys", БазаДанных);
		ИначеЕсли ИстДанных = Субъект Тогда
			Данные = ПолучитьДанные(Субъект, БазаДанных);
		Иначе
			Данные = ПолучитьДанные(ИстДанных, "inbox");
		КонецЕсли;
		Если Данные.ОткрытьПотокДанных(Истина) Тогда
			Если Запрос.Свойство("Заголовок") Тогда
				структЗадача.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок));
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;

	ИначеЕсли Команда = "ЗаписатьДанные" Тогда // запись данных
		Попытка
			// Если НЕ Суб = "" Тогда // контроль прав
			Если НЕ БазаДанных = "" Тогда // имя контейнера указано
				Если ИстДанных = Субъект Тогда
					Данные = ПолучитьДанные(Субъект, БазаДанных);
				ИначеЕсли ИстДанных = "" Тогда
					Данные = ПолучитьДанные(Субъект, "inbox");
				Иначе
					Данные = ПолучитьДанные(ИстДанных, "inbox");
				КонецЕсли;
				Если Данные.ОткрытьПотокДанных(Истина) Тогда
					Если Запрос.Свойство("Заголовок") Тогда
						структЗадача.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок, Запрос.дДанные));
						структЗадача.Вставить("Ответ", "Успешно");
					КонецЕсли;
				КонецЕсли;
			Иначе // записать в файл
				ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект), Запрос.Заголовок.ИмяДанных + ".sd");
				Запрос.дДанные.Записать(ИмяФайлаДанных);
				структЗадача.Вставить("Результат", "");
				структЗадача.Вставить("Ответ", "Успешно");
				ОбновитьСписокФайлов = ТекущаяДата();
			КонецЕсли;
			// Иначе
			// 	структЗадача.Вставить("Результат", "");
			// 	структЗадача.Вставить("Ответ", "Нет прав");
			// КонецЕсли;
		Исключение
			структЗадача.Вставить("Ответ", "Ошибка");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Возврат Истина;

	ИначеЕсли Команда = "ЗапросДанных" Тогда // выбрать данные по запросу

		Если Запрос.ЗапросДанных.Команда = "НайтиЗаголовок" Тогда // выбрать данные по запросу

			Если НЕ структЗадача.Свойство("Данные", Данные) Тогда
				Если БазаДанных = "web" ИЛИ БазаДанных = "log" Тогда // системные базы
					Данные = ПолучитьДанные("sys", БазаДанных);
				ИначеЕсли ИстДанных = Субъект Тогда
					Данные = ПолучитьДанные(Субъект, БазаДанных);
				ИначеЕсли ИстДанных = "" Тогда
					Данные = ПолучитьДанные("public", "public");
				Иначе
					Данные = ПолучитьДанные(ИстДанных, "public");
				КонецЕсли;
				// Иначе
				// 	структЗадача.Вставить("Результат", "");
				// 	структЗадача.Вставить("Ответ", "Нет прав");
				// 	Возврат Истина;
				// КонецЕсли;
				структЗадача.Вставить("Данные", Данные);
			КонецЕсли;

			структЗадача.Вставить("Ответ", Данные.НайтиЗаголовок(Запрос.ЗапросДанных));
			Сообщить("ЗаписейПрочитано: " + Запрос.ЗапросДанных.ЗаписейПрочитано + " за " + Запрос.ЗапросДанных.ВремяПоиска + " мс.");
			Если Запрос.ЗапросДанных.ЗаголовокНайден = Истина ИЛИ структЗадача.Ответ = "ЗапросЗавершен" ИЛИ структЗадача.Ответ = "ЗапросПриостановлен" Тогда
				структЗадача.Вставить("Результат", Запрос.ЗапросДанных);
				Возврат Истина;
			КонецЕсли;

		ИначеЕсли Запрос.ЗапросДанных.Команда = "СписокБаз" ИЛИ Запрос.ЗапросДанных.Команда = "СписокФайлов" Тогда
			Если НЕ Запрос.Свойство("СписокФайлов") Тогда
				Запрос.Вставить("СписокФайлов", Новый Массив);
				Если Запрос.ЗапросДанных.Команда = "СписокБаз" Тогда
					ТипФ = "*.sdb"; // базы пользователя
				Иначе
					ТипФ = "*.sd"; // СписокФайлов
				КонецЕсли;
				СписокФайлов = НайтиФайлы(ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект)), ТипФ, Ложь);
				Если СписокФайлов.Количество() Тогда
					Запрос.Вставить("ВсегоЭлементов", СписокФайлов.Количество());
					Для каждого элФайл Из СписокФайлов Цикл
						Заголовок = Новый Структура;
						Заголовок.Вставить("ИмяФайла", элФайл.ИмяБезРасширения);
						Заголовок.Вставить("ВремяИзменения", элФайл.ПолучитьВремяИзменения());
						Заголовок.Вставить("Размер", элФайл.Размер());
						Запрос.СписокФайлов.Добавить(Заголовок);
					КонецЦикла;
				КонецЕсли;
				Если НЕ Запрос.ЗапросДанных.Свойство("Позиция") Тогда
					Запрос.ЗапросДанных.Вставить("Позиция", 0);
				КонецЕсли
			КонецЕсли;
			Позиция = Число(Запрос.ЗапросДанных.Позиция);
			Запрос.ЗапросДанных.Вставить("ЗаголовокНайден", Ложь);
			ЗапросДанных = Неопределено;
			Пока Позиция < Запрос.СписокФайлов.Количество() Цикл
				Если ЗапросДанных = Неопределено Тогда
					Запрос.ЗапросДанных.Вставить("ЗаголовокНайден", Истина);
					ЗапросДанных = Запрос.ЗапросДанных;
				Иначе
					ЗапросДанных.Вставить("Соседний", Новый Структура());
					ЗапросДанных = ЗапросДанных.Соседний;
				КонецЕсли;
				ЗапросДанных.Вставить("Заголовок", Запрос.СписокФайлов.Получить(Позиция));
				Позиция = Позиция + 1;
				ЗапросДанных.Вставить("Позиция", Позиция);
			КонецЦикла;
			структЗадача.Вставить("Ответ", "ЗапросЗавершен");
			Если Запрос.ЗапросДанных.Свойство("Обновление") Тогда
				Если Запрос.ЗапросДанных.Обновление = "Авто" Тогда
					структЗадача.Вставить("Ответ", "ЗапросПриостановлен");
				КонецЕсли;
			КонецЕсли;
			структЗадача.Вставить("Результат", Запрос.ЗапросДанных);
			Возврат Истина;
		КонецЕсли;

		Возврат Ложь;

	ИначеЕсли Команда = "ПолучитьДанные" Тогда

		Если БазаДанных = "web" ИЛИ БазаДанных = "log" Тогда // системные базы
			Данные = ПолучитьДанные("sys", БазаДанных);
		ИначеЕсли ИстДанных = Субъект Тогда
			Данные = ПолучитьДанные(Субъект, БазаДанных);
		ИначеЕсли ИстДанных = "" Тогда
			Данные = ПолучитьДанные("public", "public");
		Иначе
			Данные = ПолучитьДанные(ИстДанных, "public");
		КонецЕсли;
		// Иначе
		// 	структЗадача.Вставить("Результат", "");
		// 	структЗадача.Вставить("Ответ", "Нет прав");
		// 	Возврат Истина;
		// КонецЕсли;

		ПозицияДанных = "" + УзелСвойство(Запрос, "ПозицияДанных");

		Если НЕ ПозицияДанных = "" Тогда // прочитать файл по позиции в контейнере
			ТипДанных = "";
			структЗадача.Вставить("Результат", Новый Структура("Данные", Данные.ПолучитьДанные(Число(ПозицияДанных), ТипДанных)));
			структЗадача.Результат.Вставить("ТипДанных", ТипДанных);
			структЗадача.Вставить("Ответ", "Успешно");

		ИначеЕсли НЕ ИмяДанных = "" Тогда // найти по имени данных
			ЗапросДанных = НовоеУсловиеОтбора(, "ИмяДанных", "Равно", ИмяДанных);
			Данные.НайтиЗаголовок(ЗапросДанных);
			Сообщить("ЗаписейПрочитано: " + ЗапросДанных.ЗаписейПрочитано + " за " + ЗапросДанных.ВремяПоиска + " мс.");
			Если ЗапросДанных.ЗаголовокНайден = Истина Тогда
				ЗапросДанных.Заголовок.Вставить("Данные", Данные.ПолучитьДанные(Число(ЗапросДанных.Заголовок.ПозицияДанных)));
				структЗадача.Вставить("Результат", ЗапросДанных.Заголовок);
				структЗадача.Вставить("Ответ", "Успешно");
			Иначе
				структЗадача.Вставить("Ответ", "НеНайден");
			КонецЕсли;

		Иначе // получить список контейнеров
			структЗадача.Вставить("Результат", Данные.ПолучитьЗаголовки());
			структЗадача.Вставить("Ответ", "Успешно");
		КонецЕсли;

	ИначеЕсли Команда = "УдалитьДанные" Тогда

		Если ИстДанных = Субъект Тогда
			Данные = ПолучитьДанные(Субъект, БазаДанных);
			ПозицияДанных = "" + УзелСвойство(Запрос, "ПозицияДанных");
			Если НЕ ПозицияДанных = "" Тогда // удалить по позиции в контейнере
				структЗадача.Вставить("Ответ", Данные.УдалитьДанные(Число(ПозицияДанных)));
			КонецЕсли;
		Иначе
			структЗадача.Вставить("Ответ", "Нет доступа");
		КонецЕсли;

	ИначеЕсли Команда = "ВнешнийЗапрос" Тогда

		Контроллеры.Вставить(Запрос.База, структЗадача);

		Если Запрос.Свойство("ИдЗадачи") Тогда	// есть результат
			рЗадача = Задачи.Получить(Запрос.ИдЗадачи);
			рЗадача.Вставить("Результат", структЗадача.Результат);
		КонецЕсли;

		структЗадача.Этап = "Приостановить";

		Возврат Ложь;

	ИначеЕсли Команда = "ВнешниеДанные" Тогда

		кЗадача = Контроллеры.Получить(Запрос.Параметры.База);
		Если НЕ кЗадача = Неопределено Тогда // есть соединение с базой
			Если кЗадача.Результат = Неопределено Тогда // послать запрос
				Запрос.Параметры.Вставить("ИдЗадачи", структЗадача.ИдЗадачи);
				кЗадача.Результат = СтруктуруВДвоичныеДанные(Запрос.Параметры);
				структЗадача.Этап = "Приостановить";
			КонецЕсли;
		КонецЕсли;

		Возврат Ложь;

	Иначе

		структЗадача.Результат = "Неизвестная команда";

	КонецЕсли;

	Возврат Истина;

КонецФункции


Процедура УдалитьКонтроллерИЗадачи(ИдКонтроллера)
	Перем procid;
	Контроллеры.Удалить(ИдКонтроллера);
	ПереченьЗадач = Новый Массив;
	Для каждого элЗадача Из Задачи Цикл
		Если элЗадача.Значение.Запрос.ИдПроцесса = ИдКонтроллера Тогда
			ПереченьЗадач.Добавить(ЭлЗадача.Значение);
		КонецЕсли;
	КонецЦикла;
	Для каждого структЗадача Из ПереченьЗадач Цикл
		Задачи.Удалить(структЗадача.ИдЗадачи);
		Если НЕ мЗадачи.Найти(структЗадача) = Неопределено Тогда
			мЗадачи.Удалить(мЗадачи.Найти(структЗадача));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Процедура ОбработатьСоединения() Экспорт

	Соль = "123";

	Версия = "0.0.1";
	Хост = "127.0.0.1";

	Порт = 8887;
	ПортК = 8886;

	Если АргументыКоманднойСтроки.Количество() > 1 Тогда
		Порт = АргументыКоманднойСтроки[0];
		ПортК = АргументыКоманднойСтроки[1];
	КонецЕсли;

	Таймаут = 5;

	TCPСервер = Новый TCPСервер(Порт);
	TCPСервер.ЗапуститьАсинхронно();
	Сообщить(СокрЛП(ТекущаяДата()) + " Дата-сервер запущен на порту: " + Порт);

	TCPСерверК = Новый TCPСервер(ПортК);
	TCPСерверК.ЗапуститьАсинхронно();
	Сообщить(СокрЛП(ТекущаяДата()) + " Внешние данные на порту: " + ПортК);

	Задачи = Новый Соответствие;
	мЗадачи = Новый Массив;

	ОстановитьСервер = Ложь;
	ПерезапуститьСервер = Ложь;
	Соединение = Неопределено;

	ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "dbaccess.os"), "dbaccess");
	ВсеДанные = Новый Соответствие();

	Контроллеры = Новый Соответствие();

	Соединения = Новый Массив;
	СоединенияК = Новый Массив;

	Профили = Новый dbaccess(ОбъединитьПути(ТекущийКаталог(), "data", "sys"), "users");

	СуммаЦиклов = 0;
	РабочийЦикл = 0;
	ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбновитьСписокФайлов = ТекущаяДата();
	ОбновитьСписокБаз = ТекущаяДата();

	Пока НЕ ОстановитьСервер Цикл

		НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СуммаЦиклов = СуммаЦиклов + 1;

		Если СуммаЦиклов > 999 Тогда
			ПредЗамер = ЗамерВремени;
			ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Загрузка = " " + РабочийЦикл / 10 + "% " + Цел(1000 * РабочийЦикл / (ЗамерВремени - ПредЗамер)) + " q/s " + Задачи.Количество() + " tasks";
			СуммаЦиклов = 0;
			РабочийЦикл = 0;
		КонецЕсли;

		АктивныеЗадачи = 0;
		к = мЗадачи.Количество();
		Пока к > 0 И НЕ ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50 Цикл
			к = к - 1;
			структЗадача = мЗадачи.Получить(0);
			мЗадачи.Удалить(0);

			ЕстьРезультат = (НЕ структЗадача.Результат = Неопределено);
			Если НЕ ЕстьРезультат Тогда

				ВыполнитьЗадачу = (структЗадача.Этап = "Выполнить" ИЛИ структЗадача.Этап = "Продолжить");

				Если структЗадача.Ответ = "ЗапросПриостановлен" Тогда
					ВыполнитьЗадачу = Ложь;

					Если структЗадача.Запрос.Свойство("Команда") Тогда
						Если структЗадача.Запрос.Команда = "ЗапросДанных" Тогда
							Если структЗадача.Запрос.ЗапросДанных.Команда = "СписокФайлов" Тогда
								Если ОбновитьСписокФайлов > структЗадача.ВремяНачало Тогда
									структЗадача.Запрос.ЗапросДанных.Позиция = 0;
									структЗадача.Запрос.Удалить("СписокФайлов");
									структЗадача.ВремяНачало = ТекущаяДата();
									ВыполнитьЗадачу = Истина;
								КонецЕсли;
							КонецЕсли;
							Если структЗадача.Запрос.ЗапросДанных.Команда = "СписокБаз" Тогда
								Если ОбновитьСписокБаз > структЗадача.ВремяНачало Тогда
									структЗадача.Запрос.ЗапросДанных.Позиция = 0;
									структЗадача.Запрос.Удалить("СписокФайлов");
									структЗадача.ВремяНачало = ТекущаяДата();
									ВыполнитьЗадачу = Истина;
								КонецЕсли;
							КонецЕсли;
							Если структЗадача.Запрос.ЗапросДанных.Команда = "НайтиЗаголовок" Тогда
								Если структЗадача.Данные.ВремяИзменения > структЗадача.ВремяНачало Тогда
									структЗадача.Запрос.ЗапросДанных.ПоследняяПозиция = 0;
									структЗадача.Запрос.ЗапросДанных.Удалить("ПозицияДанных");
									структЗадача.ВремяНачало = ТекущаяДата();
									ВыполнитьЗадачу = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если ВыполнитьЗадачу Тогда
					РабочийЦикл = РабочийЦикл + 1;
					Попытка
						структЗадача.Вставить("Ответ", Неопределено);
						ЕстьРезультат = ВыполнитьЗадачу(структЗадача);
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;

					Если структЗадача.Этап = "Выполнить" Тогда
						Если НЕ структЗадача.Ответ = "ЗапросПриостановлен" Тогда
							Если НЕ структЗадача.Ответ = "ЗапросВыполняется" Тогда
								//АктивныеЗадачи = АктивныеЗадачи + 1;
								структЗадача.Этап = "Удалить";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

			Если ЕстьРезультат = Истина Тогда
				Попытка
					Если структЗадача.Свойство("Соединение") Тогда // это http запрос
						ОбработатьОтветСервера(структЗадача);
					Иначе
						ОбратныйЗапрос = "";
						Если структЗадача.Запрос.Свойство("ОбратныйЗапрос", ОбратныйЗапрос) Тогда // возвращаем результат
							Контроллер = Контроллеры.Получить(структЗадача.Запрос.ИдПроцесса);
							Если НЕ Контроллер = Неопределено Тогда
								ОбратныйЗапрос.Вставить("РезультатДанные", Новый Структура("Ответ, Результат", структЗадача.Ответ, структЗадача.Результат));
								Если ПередатьДанные(Контроллер.Хост, Контроллер.Порт, ОбратныйЗапрос) = Неопределено Тогда
									Сообщить("dataserver: Ошибка передачи результатов");
								КонецЕсли;
								структЗадача.Результат = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;

			Если структЗадача.Этап = "Вернуть" Тогда
				Если НЕ структЗадача.Соединение.Статус = "Занят" Тогда
					структЗадача.Соединение.Закрыть();
					структЗадача.Соединение = Неопределено;
					структЗадача.Этап = "Удалить";
				КонецЕсли;
			КонецЕсли;

			Если структЗадача.Этап = "Удалить" Тогда
				Сообщить("dataserver <- taskid=" + СокрЛП(структЗадача.ИдЗадачи) + " time=" + (ТекущаяДата() - структЗадача.ВремяНачало) + Загрузка);
				Задачи.Удалить(структЗадача.ИдЗадачи);
				Продолжить;
			КонецЕсли;

			//Сообщить("dataserver: всего задач " + Задачи.Количество());

			мЗадачи.Добавить(структЗадача);

		КонецЦикла;

		Соединение = TCPСервер.ПолучитьСоединение(5);
		Если НЕ Соединение = Неопределено Тогда
			Соединения.Добавить(Соединение);
			Таймаут = 5;
		КонецЕсли;

		к = Соединения.Количество();
		Пока к > 0 Цикл
			к = к - 1;
			Соединение = Соединения.Получить(0);
			Соединения.Удалить(0);

			Если Соединение.Статус = "Успех" Тогда

				Попытка
					Запрос = Неопределено;
					Запрос = ДвоичныеДанныеВСтруктуру(Соединение.ПолучитьДвоичныеДанные());
				Исключение
					Сообщить("dataserver: " + ОписаниеОшибки());
				КонецПопытки;

				Если Запрос = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Если НЕ Запрос = Неопределено Тогда
					структЗадача = Новый Структура("ИдЗадачи, Этап, Запрос, Ответ, Результат, ВремяНачало", ПолучитьИД(), "Выполнить", Запрос, Неопределено, Неопределено, ТекущаяДата());
					Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
					мЗадачи.Добавить(структЗадача);
					//Сообщить("dataserver: всего задач " + Задачи.Количество());
				КонецЕсли;

				Соединение.Закрыть();
				Продолжить;

			ИначеЕсли Соединение.Статус = "Ошибка" Тогда

				Соединение.Закрыть();
				Продолжить;

			КонецЕсли;

			Соединения.Добавить(Соединение);

		КонецЦикла;

		// Ожидаем подключение клиента
		Соединение = TCPСерверК.ПолучитьСоединение(Таймаут);
		Если НЕ Соединение = Неопределено Тогда
			СоединенияК.Добавить(Соединение);
			Таймаут = 5;
		КонецЕсли;

		к = СоединенияК.Количество();
		Пока к > 0 Цикл
			к = к - 1;
			Соединение = СоединенияК.Получить(0);
			СоединенияК.Удалить(0);

			Если Соединение.Статус = "Успех" Тогда

				Попытка
					ТекстовыеДанныеВходящие = "";
					ТекстовыеДанныеВходящие = ПолучитьСтрокуИзДвоичныхДанных(Соединение.ПолучитьДвоичныеДанные(), "windows-1251");
				Исключение
					Сообщить("dataserver: " + ОписаниеОшибки());
				КонецПопытки;

				Если НЕ ТекстовыеДанныеВходящие = "" Тогда

					// Запрос http

					Попытка
						Запрос = РазобратьЗапросКлиента(ТекстовыеДанныеВходящие);
						ОбработатьЗапросКлиента(Запрос, Соединение);
						//Сообщить("webserver: всего задач " + Задачи.Количество());
					Исключение
						Сообщить(ОписаниеОшибки());
						Сообщить("Ошибка обработки запроса:");
						Сообщить(ТекстовыеДанныеВходящие);
						Попытка
							Соединение.ОтправитьСтроку("500");
						Исключение
						КонецПопытки;
					КонецПопытки;

				КонецЕсли;

				Продолжить;

			ИначеЕсли Соединение.Статус = "Ошибка" Тогда

				Соединение.Закрыть();
				Продолжить;

			КонецЕсли;

			СоединенияК.Добавить(Соединение);

		КонецЦикла;

		ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
		Если ВремяЦикла > 100 Тогда
			Сообщить("!dataserver ВремяЦикла=" + ВремяЦикла);
		КонецЕсли;
		Если Таймаут < 50 Тогда
			Таймаут = Таймаут + 1;
		КонецЕсли;

	КонецЦикла;

	TCPСервер.Остановить();
	TCPСерверК.Остановить();

КонецПроцедуры

МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбработатьСоединения();
