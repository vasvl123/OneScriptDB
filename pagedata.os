// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/
// Идея интерпретатора https://github.com/tsukanov-as/kojura

Перем БазаДанных Экспорт;
Перем ИмяДанных Экспорт;
Перем ПозицияДанных Экспорт;

Перем Данные;
Перем КодУзла;
Перем Узлы Экспорт;
Перем Изменены Экспорт;
Перем сКоличество Экспорт;
Перем Количество Экспорт;
Перем Пустой Экспорт;
// Перем УзлыОбновить Экспорт;
Перем ОбъектыОбновить Экспорт;
Перем Представление Экспорт;
Перем Библиотеки;
Перем Операторы;
Перем Рефлектор;
Перем Процесс Экспорт;
Перем Корень Экспорт;
Перем К Экспорт;
Перем НетЗначения Экспорт;
Перем ВсеСвязи;

Функция УзелСостояние(Узел, СостояниеИмя) Экспорт
	Перем УзелСостояния, УзелСостояние;
	Если Узел.Свойство("Состояния", УзелСостояния) Тогда
		УзелСостояния.Свойство(СостояниеИмя, УзелСостояние);
	КонецЕсли;
	Возврат УзелСостояние;
КонецФункции // УзелСостояние(Узел)


Функция СтрокуВСтруктуру(Знач Стр)
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Рез = Новый Структура;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
		Иначе
			Рез.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции


Функция СвойстваВСтуктуру(УзелСвойства) Экспорт
	Результат = Новый Структура;
	св = Дочерний(УзелСвойства);
	Пока НЕ св = Неопределено Цикл
		ИмяСвойства = св.Имя;
		Если Прав(ИмяСвойства, 1) = "." Тогда // группа свойств
			ИмяСвойства = Лев(ИмяСвойства, СтрДлина(ИмяСвойства) - 1);
			Результат.Вставить(ИмяСвойства, СвойстваВСтуктуру(св));
		Иначе
			Результат.Вставить(ИмяСвойства, ЗначениеСвойства(св));
		КонецЕсли;
		св = Соседний(св);
	КонецЦикла;
	Возврат Результат;
КонецФункции


Функция ИмяЗначение(Имя = "", Значение = "")
	Возврат Новый Структура("Имя, Значение", Имя, Значение);
КонецФункции


Функция УзелСостояниеЗначение(Узел, СостояниеИмя, Знач СостояниеЗначение) Экспорт
	Перем УзелСостояния;
	Если НЕ Узел.Свойство("Состояния", УзелСостояния) Тогда
		УзелСостояния = Новый Структура();
		Узел.Вставить("Состояния", УзелСостояния);
	КонецЕсли;
	УзелСостояния.Вставить(СостояниеИмя, СостояниеЗначение);
	//Сообщить("" + Узел.Код + " " + СостояниеИмя + "=" + (Лев(СостояниеЗначение,30)));
	Возврат СостояниеЗначение;
КонецФункции // УзелСостояниеЗначение(Узел)


Функция СтруктуруВСтроку(знСтруктура) Экспорт
	Если НЕ ТипЗнч(знСтруктура) = Тип("Структура") Тогда
		Возврат знСтруктура;
	КонецЕсли;
	Результат = "";
	Для каждого Элемент Из знСтруктура Цикл
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;

		Если ТипЗнч(Значение) = Тип("Структура") ИЛИ Ключ = "Код" ИЛИ Ключ = "Старший" ИЛИ Ключ = "Родитель" Тогда
			Продолжить;
		ИначеЕсли Ключ = "Имя" Тогда
			Ключ = "И";
		ИначеЕсли Ключ = "Значение" Тогда
			Ключ = "З";
			Значение = СтрЗаменить(Значение, Символы.Таб, "#x9");
			Значение = СтрЗаменить(Значение, Символы.ПС, "#xA");
			Значение = СтрЗаменить(Значение, Символы.ВК, "#xD");
		// ИначеЕсли Ключ = "сДочерний" Тогда
		// 	Продолжить;
		ИначеЕсли "" + Значение = "" Тогда
			Продолжить;
		ИначеЕсли Ключ = "Дочерний" Тогда
			Если Лев(Значение, 1) = "s" Тогда
				Продолжить;
			КонецЕсли;
			Ключ = "Д";
		ИначеЕсли Ключ = "Соседний" Тогда
			Если Лев(Значение, 1) = "s" Тогда
				Продолжить;
			КонецЕсли;
			Ключ = "С";
		ИначеЕсли Ключ = "Атрибут" Тогда
			Ключ = "А";
		Иначе
			Продолжить;
		КонецЕсли;
		Результат = Результат + ?(Результат = "", "", Символы.Таб) + Ключ + Символы.Таб + Значение;
	КонецЦикла;
	Возврат Результат;
КонецФункции


Функция УзелСвойство(Узел, Свойство) Экспорт
	УзелСвойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Узел.Свойство(Свойство, УзелСвойство);
	КонецЕсли;
	Возврат УзелСвойство;
КонецФункции // УзелСвойство(Узел)


Функция ЗначениеСвойства(знач УзелСвойство, Имя = Неопределено) Экспорт
	Значение = Неопределено;
	Если НЕ Имя = Неопределено Тогда
		УзелСвойство = УзелСвойство(УзелСвойство, Имя);
	КонецЕсли;
	Если НЕ УзелСвойство = Неопределено Тогда
		ДочернийУзел = Дочерний(УзелСвойство);
		Если НЕ ДочернийУзел = Неопределено Тогда
			Значение = Интерпретировать(ДочернийУзел, , Ложь);
		Иначе
			Значение = "" + УзелСвойство(УзелСвойство, "Значение");
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции // ЗначениеСвойства()


// Функция ОбновитьПредставлениеУзла(Знач Узел) Экспорт
// 	УзелСостояниеЗначение(Узел, "ЗначениеУзла", НетЗначения);
// 	УзлыОбновить.Вставить(Узел.Код, Узел);
// КонецФункции


// Функция ОбновитьУзел(Знач Узел) Экспорт
//
// 	//Сообщить("Обн. " + Узел.Код);
//
// 	УзелСостояниеЗначение(Узел, "ЗначениеУзла", НетЗначения);
//
// 	Связи = УзелСостояние(Узел, "Связи");
// 	Если НЕ Связи = Неопределено Тогда
// 		Для каждого элУзел Из Связи Цикл
// 			// Если элУзел.Значение = Ложь Тогда // не обновлять
// 			// 	Продолжить;
// 			// КонецЕсли;
// 			ОбновитьУзел(элУзел.Ключ);
// 		КонецЦикла;
// 	КонецЕсли;
//
// 	ДочернийУзел = Узел;
// 	РодительУзел = Узел.Родитель;
// 	Обновить = Истина;
// 	Пока НЕ РодительУзел = Неопределено Цикл
// 		Если РодительУзел.Имя = "Узел" ИЛИ РодительУзел.Имя = "У" ИЛИ РодительУзел.Имя = "Объект" ИЛИ РодительУзел.Имя = "О" Тогда
// 			Если УзелСостояние(ДочернийУзел, "ЭтоАтрибут") = Истина Тогда
// 				УзелСостояниеЗначение(РодительУзел, "Расширение", Неопределено); // Изменения в параметрах расширения узла
// 				РасширениеУзла(РодительУзел);
// 			КонецЕсли;
// 			Если РодительУзел.Имя = "Объект" ИЛИ РодительУзел.Имя = "О" Тогда
// 				// изменения в объекте
// 				Показать = Истина;
// 			Иначе
// 				Показать = УзелСостояние(РодительУзел, "Показать");
// 			КонецЕсли;
// 			Если Показать = Истина И Обновить Тогда
// 				ОбновитьПредставлениеУзла(РодительУзел);
// 				Обновить = Ложь;
// 			ИначеЕсли Показать = Ложь Тогда
// 				// игнорировать
// 			Иначе
// 				Если НЕ УзелСостояние(РодительУзел, "ЗначениеУзла") = НетЗначения Тогда // оптимизация
// 					Если Обновить Тогда
// 						ОбновитьУзел(РодительУзел);
// 						Обновить = Ложь;
// 					Иначе
// 						УзелСостояниеЗначение(РодительУзел, "ЗначениеУзла", НетЗначения);
// 					КонецЕсли;
// 				Иначе
// 					Прервать;
// 				КонецЕсли;
// 			КонецЕсли;
// 		КонецЕсли;
// 		ДочернийУзел = РодительУзел;
// 		РодительУзел = РодительУзел.Родитель;
// 	КонецЦикла;
//
// КонецФункции


Функция ПоказатьУзел(Знач Узел, Атрибуты = "", Дочерний = "", ЭтоАтрибут = Ложь) Экспорт
	Перем Представление;

	Представление = "";

	УзелИмя = Узел.Имя;
	УзелЗначение = "";
	Если Узел.Свойство("Значение") Тогда
		УзелЗначение = 	Узел.Значение;
	КонецЕсли;

	Если ЭтоАтрибут Тогда

		Если НЕ Дочерний = "" Тогда
			УзелЗначение = Дочерний;
		КонецЕсли;

		АтрибутИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
		АтрибутИмя = СтрЗаменить(АтрибутИмя, "_", "-");
		Представление = Представление + " " + АтрибутИмя + "=""" + УзелЗначение + """";

	Иначе

		Если Узел.Имя = "comment" Тогда
			Представление = Представление + "<!-- " + УзелЗначение + " -->";
		ИначеЕсли Узел.Имя = "br" Тогда
			Представление = Представление + "<" + Узел.Имя + ">";
		Иначе
			Представление = Представление + "<" + УзелИмя + Атрибуты + " id='" + "_" + Узел.Код + "'>";
			Представление = Представление + УзелЗначение;
			Представление = Представление + Дочерний + "</" + УзелИмя + ">";
		КонецЕсли;

	КонецЕсли;

	Возврат Представление;

КонецФункции // ПоказатьУзел()


// Создать копию ветки
Функция КопироватьВетку(Узел, Цель = Неопределено, Старший, Родитель, ЭтоАтрибут = Ложь, ПервыйВызов = Истина, Служебный = Истина, ПараметрыЗамены = Неопределено) Экспорт

	ИмяУзла = УзелСвойство(Узел, "Имя");
	ЗначениеУзла = УзелСвойство(Узел, "Значение");

	Если Цель = Неопределено Тогда
		Цель = ЭтотОбъект;
	КонецЕсли;

	КопияУзел = Цель.НовыйУзел(Новый Структура("Имя, Значение, Старший, Родитель", ИмяУзла, ЗначениеУзла, Старший, Родитель), Служебный ИЛИ Служебный(Узел));

	Если НЕ ЭтоАтрибут Тогда

		УзелАтрибут = Атрибут(Узел);
		Если НЕ УзелАтрибут = Неопределено Тогда
			УзелАтрибут = КопироватьВетку(УзелАтрибут, Цель, КопияУзел, КопияУзел, Истина, Ложь, Служебный ИЛИ Служебный(УзелАтрибут), ПараметрыЗамены);
			КопияУзел.Вставить("Атрибут", УзелАтрибут.Код);
		КонецЕсли;

	КонецЕсли;

	УзелДочерний = Дочерний(Узел);
	Если УзелДочерний = Неопределено Тогда
		Если ИмяУзла = "Узел" Тогда
			Если НЕ ПараметрыЗамены = Неопределено Тогда
				Параметр = УзелСвойство(ПараметрыЗамены, ЗначениеУзла);
				Если ТипЗнч(Параметр) = Тип("Структура") Тогда
					УзелДочерний = Параметр;
				ИначеЕсли ТипЗнч(Параметр) = Тип("Строка") Тогда
					КопияУзел.Вставить("Дочерний", Цель.НовыйУзел(Новый Структура("Имя, Значение, Старший, Родитель", "Строка", Параметр, Узел, Узел), Служебный ИЛИ Служебный(Узел)).Код);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если НЕ УзелДочерний = Неопределено Тогда
		УзелДочерний = КопироватьВетку(УзелДочерний, Цель, КопияУзел, КопияУзел, , Ложь, Служебный ИЛИ Служебный(УзелДочерний), ПараметрыЗамены);
		КопияУзел.Вставить("Дочерний", УзелДочерний.Код);
	КонецЕсли;

	Если ПервыйВызов Тогда
		КопияУзел.Вставить("Соседний", Неопределено);
	Иначе
		УзелСоседний = Соседний(Узел);
		Если НЕ УзелСоседний = Неопределено Тогда
			УзелСоседний = КопироватьВетку(УзелСоседний, Цель, КопияУзел, Родитель, ЭтоАтрибут, Ложь, Служебный ИЛИ Служебный(УзелСоседний), ПараметрыЗамены);
			КопияУзел.Вставить("Соседний", УзелСоседний.Код);
		КонецЕсли;
	КонецЕсли;

	Возврат КопияУзел;

КонецФункции // КопироватьВетку()


// // Передать значение внешнего узла
// Функция ВнешнийЗначение(Знач Узел, Объект) Экспорт
// 	ВнешнийУзел = НайтиУзел(Корень, Узел.Значение);
// 	Если НЕ ВнешнийУзел = Неопределено Тогда
// 		Связи = УзелСостояние(ВнешнийУзел, "Связи");
// 		Если Связи = Неопределено Тогда
// 			Связи = Новый Соответствие;
// 			УзелСостояниеЗначение(ВнешнийУзел, "Связи", Связи);
// 		КонецЕсли;
// 		Связи.Вставить(Узел, Объект);
// 	КонецЕсли;
// 	Возврат Интерпретировать(Дочерний(ВнешнийУзел));
// КонецФункции

Функция СравнитьИмя(Узел, Тип, Имя)
	Если Узел.Имя = "О" ИЛИ Узел.Имя = "Объект" Тогда
		зн = "" + УзелСвойство(Узел, "Значение");
		Если НЕ зн = "" Тогда
			м = СтрРазделить(зн, " ");
			оТип = м[0];
			оИмя = м[0];
			Если м.Количество() = 2 Тогда // полный путь
				оИмя = м[1];
			КонецЕсли;
			Если ((Тип = Имя) И (оТип = Тип ИЛИ оИмя = Имя)) ИЛИ
				((оТип = Тип ИЛИ Тип = "*") И (оИмя = Имя ИЛИ Имя = "*")) Тогда
					Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // СравнитьИмя()


Функция НайтиОбъекты(Знач Узел, оПоз, оТип, оИмя)

	Результаты = Новый Массив;

	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = "О" ИЛИ Узел.Имя = "Объект" Тогда
			Прервать;
		КонецЕсли;
		Узел = Узел.Родитель;
	КонецЦикла;

	Если оПоз = "" Тогда // свой объект
		Результаты.Добавить(Узел);
		Возврат Результаты;
	ИначеЕсли оПоз = "р" Тогда // найти родителя
		Узел = Узел.Родитель;
		Пока НЕ Узел = Неопределено Цикл
			Если СравнитьИмя(Узел, оТип, оИмя) Тогда
				Результаты.Добавить(Узел);
				Возврат Результаты;
			КонецЕсли;
			Узел = Узел.Родитель;
		КонецЦикла;
		Возврат Узел;
	ИначеЕсли оПоз = "д" Тогда // найти дочернего
		Узел = Дочерний(Узел);
	ИначеЕсли оПоз = "с" Тогда // найти соседнего
		Узел = Дочерний(Узел.Родитель);
	КонецЕсли;

	Пока НЕ Узел = Неопределено Цикл
		Если СравнитьИмя(Узел, оТип, оИмя) Тогда
			Результаты.Добавить(Узел);
		КонецЕсли;
		Узел = Соседний(Узел);
	КонецЦикла;

	Возврат Результаты; //Узел;

КонецФункции // НайтиОбъекты(Узел, Путь)


Функция СтруктураСвойств(УзелСвойства) Экспорт
	св = Дочерний(УзелСвойства);
	Пока НЕ св = Неопределено Цикл
		ИмяСвойства = св.Имя;
		Если Прав(ИмяСвойства, 1) = "." Тогда // группа свойств
			СтруктураСвойств(св);
		КонецЕсли;
		св = Соседний(св);
	КонецЦикла;
	Возврат УзелСвойства;
КонецФункции // СтруктураСвойств()


Функция СвойствоОбъекта(Знач Узел, ИмяСвойства)
	Свойство = Неопределено;
	Если НЕ Узел = Неопределено Тогда
		Свойство = Дочерний(Узел);
		МассивСвойства = СтрРазделить(ИмяСвойства, ".");
		к = 0;
		Пока к < МассивСвойства.Количество() Цикл
			ИмяСвойства = МассивСвойства[к];
			св = Дочерний(Свойство);

			Пока НЕ св = Неопределено Цикл
				ИмяУзла = св.Имя;
				Если Прав(ИмяУзла, 1) = "." Тогда
					ИмяУзла = Лев(ИмяУзла, СтрДлина(ИмяУзла) - 1);
				КонецЕсли;
				Если ИмяСвойства = ИмяУзла Тогда
					Прервать;
				КонецЕсли;
				св = Соседний(св);
			КонецЦикла;

			Свойство = св;
			Если Свойство = Неопределено Тогда
				Прервать;
			КонецЕсли;

			к = к + 1;
		КонецЦикла;
	КонецЕсли;
	Возврат Свойство;
КонецФункции // СвойствоОбъекта()


Функция ПолучитьСвойстваПоСсылке(Знач Узел, Путь = "", СоздатьСвязь = Ложь) Экспорт

	Результаты = Новый Массив;
	НачальныйУзел = Узел;

	Если Путь = "" Тогда
		Путь = "" + УзелСвойство(Узел, "Значение");
		Если Путь = "" Тогда
			ДочернийУзел = Дочерний(Узел);
			Если НЕ ДочернийУзел = Неопределено Тогда
				Путь = "" + Интерпретировать(ДочернийУзел, , Ложь);
			КонецЕсли;
			Если Путь = "" Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	МассивПуть = СтрРазделить(Путь, " ");
	оПоз = "";
	оТип = "*";
	оИмя = "*";
	Если МассивПуть.Количество() = 4 Тогда // полный путь
		оПоз = МассивПуть[0];
		оТип = МассивПуть[1];
		оИмя = МассивПуть[2];
	ИначеЕсли МассивПуть.Количество() = 3 Тогда // без типа объекта
		оПоз = МассивПуть[0];
		оТип = МассивПуть[1];
		оИмя = МассивПуть[1];
	ИначеЕсли МассивПуть.Количество() = 2 Тогда // без типа и имени объекта
		оПоз = МассивПуть[0];
	КонецЕсли;

	Если оПоз = "у" Тогда // указатель на свойство
		Узел = ПолучитьУзел(МассивПуть[1]);
		Если НЕ Узел = Неопределено Тогда
			Результаты.Добавить(Узел);
		КонецЕсли;
	Иначе // найти по маске
		Объекты = НайтиОбъекты(Узел, оПоз, оТип, оИмя);
		Если Объекты.Количество() = 0 Тогда
			Сообщить("Объекты не найдены: " + Путь);
		КонецЕсли;

		Для каждого оУзел Из Объекты Цикл
			ИмяСвойства = МассивПуть[МассивПуть.Количество()-1];
			Узел = СвойствоОбъекта(оУзел, ИмяСвойства);
			Если Узел = Неопределено Тогда
				Сообщить("Свойство не найдено: " + Путь);
				Продолжить;
			КонецЕсли;
			Результаты.Добавить(Узел);
		КонецЦикла;

	КонецЕсли;

	Если СоздатьСвязь = Истина Тогда

		Для каждого Узел Из Результаты Цикл

			// объект и свойство которые нужно добавить в связи для обновления
			нОбъект = НачальныйУзел;
			нСвойство = НачальныйУзел;
			Пока НЕ нОбъект = Неопределено Цикл
				Если нСвойство = НачальныйУзел И Прав(нОбъект.Родитель.Имя, 1) = "." Тогда // группа свойств
					нСвойство = нОбъект;
				КонецЕсли;
				Если нОбъект.Имя = "О" ИЛИ нОбъект.Имя = "Объект" Тогда
					Прервать;
				КонецЕсли;
				нОбъект = нОбъект.Родитель;
			КонецЦикла;

			оУзел = Узел;
			Пока НЕ оУзел = Неопределено Цикл
				Если оУзел.Имя = "О" ИЛИ оУзел.Имя = "Объект" Тогда
					Прервать;
				КонецЕсли;
				оУзел = оУзел.Родитель;
			КонецЦикла;

			Если НЕ оУзел = нОбъект Тогда // свои свойства не обновлять
				Связи = ВсеСвязи.Получить(Узел); // связанные свойства
				Если Связи = Неопределено Тогда
					Связи = Новый Соответствие;
					ВсеСвязи.Вставить(Узел, Связи);
				КонецЕсли;
				//Сообщить("+Связи " + Узел.Код + " -> " + нОбъект.Код + " св. " + нСвойство.Код);
				Связи.Вставить(нСвойство, нОбъект);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результаты;

КонецФункции // ПолучитьСвойстваПоСсылке()


// // Получить значение узла
// Функция УзелЗначение(Знач Узел) Экспорт
//
// 	Состояние = Неопределено;
// 	Расширение = Неопределено;
// 	ИмяУзла = "" + УзелСвойство(Узел, "Значение");
// 	НачальныйУзел = Узел;
//
// 	Если НЕ (ИмяУзла = "" ИЛИ Узел.Имя = "У" ИЛИ Узел.Имя = "Узел") Тогда // нужно найти определение узла
// 		Узел = ОпределениеУзла(Узел, ИмяУзла);
// 	КонецЕсли;
//
// 	Если НЕ Узел = Неопределено Тогда
// 		Состояние = УзелСостояние(Узел, "ЗначениеУзла"); // оптимизация
// 		Если Состояние = Неопределено ИЛИ Состояние = НетЗначения Тогда
// 			ДочернийУзел = Дочерний(Узел);
// 			Если ДочернийУзел = Неопределено Тогда
// 				Состояние = ""; //Пустой;
// 			Иначе
// 				Состояние = Интерпретировать(ДочернийУзел, , Ложь);
// 			КонецЕсли;
// 			Если НайтиАтрибут(НачальныйУзел, "Пересчитать", "Да") = Неопределено Тогда // если не нужно всегда пересчитывать
// 				УзелСостояниеЗначение(Узел, "ЗначениеУзла", Состояние);
// 			КонецЕсли;
// 		КонецЕсли;
// 	КонецЕсли;
//
// 	Если НЕ Расширение = Неопределено Тогда
// 		Состояние = "" + Расширение + Состояние;
// 	КонецЕсли;
//
// 	Возврат Состояние;
//
// КонецФункции


// // Установить значения узла
// Функция УзелУстановитьЗначение(Знач Определение, Знач УзелЗначение) Экспорт
//
// 	Состояние = Неопределено;
//
// 	Если ТипЗнч(УзелЗначение) = Тип("Число") Тогда
// 		УзелЗначение = НовыйУзел(Новый Структура("Имя, Значение, Родитель", "Число", УзелЗначение, Неопределено), Истина);
// 	ИначеЕсли ТипЗнч(УзелЗначение) = Тип("Строка") Тогда
// 		УзелЗначение = НовыйУзел(Новый Структура("Имя, Значение, Родитель", "Строка", УзелЗначение, Неопределено), Истина);
// 	КонецЕсли;
//
// 	Если НЕ Служебный(УзелЗначение) Тогда
// 		УзелЗначение = КопироватьВетку(УзелЗначение, ЭтотОбъект, Определение, Определение.Родитель, , Ложь);
// 	КонецЕсли;
//
// 	//Определение.Вставить("сДочерний", УзелЗначение.Код);
// 	Определение.Вставить("Дочерний", УзелЗначение.Код);
//
// 	ОбновитьУзел(Определение);
//
// 	Возврат Состояние;
//
// КонецФункции


// Функция ВставитьЗначение(Знач Узел, Знач Значение) Экспорт
// 	Узел = ОпределениеУзла(Узел, Узел.Значение, Ложь);
// 	Если Узел = Неопределено Тогда
// 		Возврат Неопределено;
// 	КонецЕсли;
// 	УзелУстановитьЗначение(Узел, Значение);
// КонецФункции


// Функция РасширениеУзла(Знач Узел)
//
// 	Расширение = УзелСостояние(Узел, "Расширение");
// 	Если Расширение = Неопределено Тогда
//
// 		Расширение = Ложь; // нет расширения
//
// 		Атр = Атрибут(Узел);
// 		Если НЕ Атр = Неопределено Тогда
//
// 			Если Атр.Имя = "Родитель" ИЛИ Атр.Имя = "Р" Тогда // если указан родитель - копируем
// 				Элемент = Дочерний(Узел);
// 				Если Элемент = Неопределено Тогда
// 					Если НЕ "" + Узел.Значение = "" Тогда // указано имя узла
// 						Определение = ОпределениеУзла(Узел, Атр.Значение);
// 						Если НЕ Определение = Неопределено Тогда
// 							Элемент = КопироватьВетку(Дочерний(Определение), ЭтотОбъект, Узел, Узел, , Ложь, , ПолучитьАргументы(Узел));
// 							Узел.Вставить("Дочерний", Элемент.Код);
// 						КонецЕсли;
// 					КонецЕсли;
// 				КонецЕсли;
// 				Расширение = Атр.Имя;
//
// 			ИначеЕсли Атр.Имя = "Функция" ИЛИ Атр.Имя = "Ф" Тогда // функцию потом убрать
// 				Расширение = "" + ВызватьФункцию(Узел, Атр.Значение);
// 				// Расширение = Атр.Имя;
//
// 			КонецЕсли;
//
// 		КонецЕсли;
//
// 		УзелСостояниеЗначение(Узел, "Расширение", Расширение);
//
// 	КонецЕсли;
//
// 	Возврат Расширение;
//
// КонецФункции // РасширениеУзла(Узел)


// // Поиск определения узла
// Функция ОпределениеУзла(Знач Узел, Знач ИмяЭлемента, Обновлять = Неопределено) Экспорт
//
// 	НачальныйУзел = Узел;
//
// 	Узел = УзелСостояние(Узел, "Определение");
//
// 	Если Узел = Неопределено Тогда
//
// 		Узел = НачальныйУзел.Старший;
//
// 		МассивПуть = СтрРазделить(ИмяЭлемента, ".");
// 		РодительНайден = Ложь;
// 		Для каждого элПуть Из МассивПуть Цикл
//
// 			Если НЕ РодительНайден Тогда
// 				РодительНайден = Истина;
// 				Пока НЕ Узел = Неопределено Цикл
// 					Если Узел.Имя = "Узел" ИЛИ Узел.Имя = "У" Тогда
// 						Если "" + УзелСвойство(Узел, "Значение") = элПуть Тогда
// 							Прервать;
// 						КонецЕсли;
// 					КонецЕсли;
// 					Узел = Узел.Старший;
// 				КонецЦикла;
// 			Иначе
// 				Узел = НайтиУзел(Узел, элПуть);
// 			КонецЕсли;
//
// 			Если Узел = Неопределено Тогда
// 				ВызватьИсключение СтрШаблон("" + НачальныйУзел.Код + " - неизвестный узел %1", ИмяЭлемента);
// 			КонецЕсли;
//
// 			РасширениеУзла(Узел);
//
// 		КонецЦикла;
//
// 		// Если Обновлять = Неопределено Тогда
// 		// 	Обновлять = НайтиАтрибут(НачальныйУзел, "Обновлять", "Нет"); // если не нужно автоматически пересчитывать зависимости
// 		// 	Если НЕ НачальныйУзел = Узел И Обновлять = Неопределено Тогда
// 		// 		Обновлять = Истина;
// 		// 	Иначе
// 		// 		Обновлять = Ложь;
// 		// 	КонецЕсли;
// 		// КонецЕсли;
//
// 		Связи = УзелСостояние(Узел, "Связи");
// 		Если Связи = Неопределено Тогда
// 			Связи = Новый Соответствие;
// 			УзелСостояниеЗначение(Узел, "Связи", Связи);
// 		КонецЕсли;
// 		Связи.Вставить(НачальныйУзел, Неопределено);
//
// 		УзелСостояниеЗначение(НачальныйУзел, "Определение", Узел);
//
// 	КонецЕсли;
//
// 	РасширениеУзла(Узел);
//
// 	Возврат Узел;
//
// КонецФункции // ОпределениеУзла()


Функция ОбновитьПредставление(Узел = Неопределено) Экспорт

	Попытка
		Представление = "";
		Если НЕ Узел = Неопределено Тогда
			//Сообщить("ОбновитьПредставление " + Узел.Код);
			Возврат Интерпретировать(Узел);
		ИначеЕсли ОбъектыОбновить.Количество() Тогда
			//Сообщить("ОбновитьПредставление");
			СписокОбъектов = Новый Соответствие;
			Для каждого элОбъект Из ОбъектыОбновить Цикл
				//Сообщить("+ОбъектыОбновить " + элОбъект.Ключ.Код);
				СписокОбъектов.Вставить(элОбъект.Ключ, элОбъект.Значение);
			КонецЦикла;
			Для каждого элОбъект Из СписокОбъектов Цикл
				Узел = элОбъект.Ключ;
				Если ОбъектыОбновить.Получить(Узел) = Истина Тогда // оптимизировать порядок обновления
					ОбъектыОбновить.Удалить(Узел);
					рУзел = Узел;
					Пока НЕ рУзел = Неопределено Цикл
						Если ОбъектыОбновить.Получить(рУзел) = Истина Тогда
							Прервать;
						КонецЕсли;
						рУзел = рУзел.Родитель;
					КонецЦикла;
					Если рУзел = Неопределено Тогда
						Представление = Представление + ОбработатьОбъект(Узел);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ОбъектыОбновить.Количество() Тогда
			Процесс.ЗадачаОбновитьВыполнить = Истина; // продолжение
		КонецЕсли;

	Исключение
		Процесс.ЗаписатьСобытие("Интерпретатор", ОписаниеОшибки(), 3);
		//Сообщить(ОписаниеОшибки());
		Инфо = ИнформацияОбОшибке();
		Стек = Инфо.ПолучитьСтекВызовов();
		Для каждого Кадр Из Стек Цикл
			Сообщить(Кадр.ИмяМодуля + " / " + Кадр.Метод + " / " + Кадр.НомерСтроки);
		КонецЦикла;
		//УзелСостояниеЗначение(элУзел.Значение, "Ошибка", Истина);
	КонецПопытки;

КонецФункции


Функция ОбновитьУзел(Знач Узел) Экспорт
	//Сообщить("ОбновитьУзел " + Узел.Код);
	ОбновитьСвязи(Узел);
	оУзел = Узел;
	Пока НЕ оУзел = Неопределено Цикл
		Если оУзел.Имя = "О" ИЛИ оУзел.Имя = "Объект" Тогда
			//Сообщить("Объект " + оУзел.Код);
			Изменения = УзелСвойство(оУзел, "Изменения");
			Если Изменения = Неопределено Тогда
				Изменения = Новый Соответствие;
				оУзел.Вставить("Изменения", Изменения);
				//Сообщить("+Изменения " + Узел.Код);
			КонецЕсли;
			Изменения.Вставить(Узел, Истина);
			ОбъектыОбновить.Вставить(оУзел, Истина);
			Процесс.ЗадачаОбновитьВыполнить = Истина; // продолжение
			Прервать;
		КонецЕсли;
		оУзел = оУзел.Родитель;
	КонецЦикла;
КонецФункции


// Функция ОбновитьПредставление(Узел, Обновить) Экспорт
//
// 	Представление = "";
//
// 	Если Обновить ИЛИ ОбъектыОбновить.Количество() Тогда
// 		УзлыОбновить.Очистить();
// 		ОбновитьПредставлениеУзла(Узел);
// 	КонецЕсли;
//
// 	Если УзлыОбновить.Количество() Тогда
//
// 		СписокУзлов = Новый Соответствие;
// 		// узлы которые нужно обновить
// 		Для каждого элУзел Из УзлыОбновить Цикл
// 			//Сообщить(" ->> " + элУзел.Ключ);
// 			СписокУзлов.Вставить(элУзел.Ключ, элУзел.Значение);
// 		КонецЦикла;
//
// 		УзлыОбновить.Очистить();
//
// 		Для каждого элУзел Из СписокУзлов Цикл
// 			Попытка
// 				Состояние = Интерпретировать(элУзел.Значение);
// 				Представление = Представление + Состояние;
// 			Исключение
// 				Процесс.ЗаписатьСобытие("Интерпретатор", ОписаниеОшибки(), 3);
// 				//Сообщить(ОписаниеОшибки());
// 				Инфо = ИнформацияОбОшибке();
// 				Стек = Инфо.ПолучитьСтекВызовов();
// 				Для каждого Кадр Из Стек Цикл
// 					Сообщить(Кадр.ИмяМодуля + " / " + Кадр.Метод + " / " + Кадр.НомерСтроки);
// 				КонецЦикла;
// 				//УзелСостояниеЗначение(элУзел.Значение, "Ошибка", Истина);
// 			КонецПопытки;
//
// 		КонецЦикла;
//
// 	КонецЕсли;
//
// 	Если УзлыОбновить.Количество() Тогда
// 		Процесс.ЗадачаОбновитьВыполнить = Истина; // продолжение
// 	КонецЕсли;
//
// 	Возврат Неопределено;
//
// КонецФункции


Функция ПолучитьАргументы(Узел)
	Перем Значение;
	Аргументы = Новый Структура("ЭтотУзел", Узел);
	Аргумент = Атрибут(Узел);
	Пока НЕ Аргумент = Неопределено Цикл
		//УзелСостояниеЗначение(Аргумент, "ЭтоАтрибут", Истина); // для отслеживания источника изменений
		Если Аргумент.Имя = "Аргумент" ИЛИ Аргумент.Имя = "А" Тогда
			Аргументы.Вставить(Аргумент.Значение, Интерпретировать(Дочерний(Аргумент), , Ложь));
		ИначеЕсли Аргумент.Имя = "Свойства." Тогда // свойства объекта
			Аргументы.Вставить(Аргумент.Имя, Аргумент);
		ИначеЕсли Аргумент.Свойство("Значение", Значение) Тогда // тип значения аргумента - строка
			Аргументы.Вставить(Аргумент.Имя, Значение);
		Иначе
			Аргументы.Вставить(Аргумент.Имя, Дочерний(Аргумент));
		КонецЕсли;
		Аргумент = Соседний(Аргумент);
	КонецЦикла;
	Возврат Аргументы;
КонецФункции


Функция ДобавитьСобытие(Знач Узел, Событие, Значение = Неопределено) Экспорт
Перем зСвойство, уСвойство;

	Если Событие = "ПриНажатии" Тогда
		АтрибутПриНажатии = НайтиАтрибут(Узел, "А", "ПриНажатии"); // нужно вычислить и передать значение
		Если НЕ АтрибутПриНажатии = Неопределено Тогда
			уСвойство = Дочерний(АтрибутПриНажатии);
		КонецЕсли;
	ИначеЕсли Событие = "ПриИзменении" Тогда
		АтрибутЗначение = НайтиАтрибут(Узел, "А", "Значение"); // изменить значение свойства
		Если НЕ АтрибутЗначение = Неопределено Тогда
			зСвойство = Дочерний(АтрибутЗначение);
		КонецЕсли;
		АтрибутВыбрано = НайтиАтрибут(Узел, "А", "Выбрано"); // изменить значение свойства
		Если НЕ АтрибутВыбрано = Неопределено Тогда
			зСвойство = Дочерний(АтрибутВыбрано);
		КонецЕсли;
		АтрибутПриИзменении = НайтиАтрибут(Узел, "А", "ПриИзменении"); // нужно вычислить и передать значение
		Если НЕ АтрибутПриИзменении = Неопределено Тогда
			уСвойство = Дочерний(АтрибутПриИзменении);
		КонецЕсли;
	КонецЕсли;

	Если НЕ зСвойство = Неопределено Тогда
		Свойства = ПолучитьСвойстваПоСсылке(зСвойство);
		Для каждого Свойство Из Свойства Цикл
			НовоеЗначениеУзла(Свойства[0], ИмяЗначение("Строка", Значение), Истина);
		КонецЦикла;
	КонецЕсли;

	Если НЕ уСвойство = Неопределено Тогда
		Свойства = ПолучитьСвойстваПоСсылке(уСвойство);
		Для каждого Свойство Из Свойства Цикл
			уЗначение = Соседний(уСвойство);
			Если НЕ уЗначение = Неопределено Тогда
				Значение = Интерпретировать(уЗначение);
				//Значение = ЗначениеСвойства(сЗначение);
				НовоеЗначениеУзла(Свойство, Значение, Истина);
				Возврат Неопределено; // событие не создается
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ зСвойство = Неопределено Тогда
		Возврат Неопределено; // событие не создается
	КонецЕсли;

	стрСобытие = ИмяЗначение("" + Процесс.ПолучитьИД(), Событие + Символы.Таб + Узел.Код + Символы.Таб + Значение);

	УзелОбъект = Неопределено;
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = "О" ИЛИ Узел.Имя = "Объект" Тогда
			УзелОбъект = Узел;
			Прервать;
		КонецЕсли;
		Узел = Узел.Родитель;
	КонецЦикла;
	Если НЕ УзелОбъект = Неопределено Тогда
		Свойства = Неопределено;
		свУзел = Дочерний(УзелОбъект);
		Если НЕ свУзел = Неопределено Тогда
			Если свУзел.Имя = "Свойства." Тогда
				Свойства = СтруктураСвойств(свУзел);
			КонецЕсли;
		КонецЕсли;
		Если НЕ Свойства = Неопределено Тогда
			Если Свойства.д.Свойство("События") Тогда
				НовоеЗначениеУзла(Свойства.д.События, стрСобытие, Истина, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ДобавитьСобытие()


Функция ОбъектФорма(Узел, Свойства)
	Вид = "<script>var p = {id: '" + Узел.Код + "', fid: '" + Свойства.д.Форма.Код + "'";
	св = Дочерний(Свойства.д.Форма);
	Пока не св = Неопределено Цикл
		Вид = Вид + "," + св.Имя + ":" + св.Значение;
		св = Соседний(св);
	КонецЦикла;
	Возврат Вид + "}; var id='_" + Узел.Код + "'; updifrm(id,p);</script>";
КонецФункции // ОбъектФорма()


Функция ОбъектВид(Узел, Свойства)
	Вид = "" + ЗначениеСвойства(Свойства.д, "Описание");
	Возврат Вид + Узел.Содержимое;
КонецФункции


Функция СоздатьСвойства(Знач Узел, шСвойства, Служебный = Неопределено) Экспорт
	св = Неопределено;
	Если Служебный = Неопределено Тогда
		Служебный = Служебный(Узел);
	КонецЕсли;
	к = -1;
	св = Узел;
	стрСвойства = СтрРазделить(шСвойства, Символы.ПС);
	Для каждого стр Из стрСвойства Цикл // парсер
		Если НЕ стр = "" Тогда
			м = СтрРазделить(стр, Символы.Таб);
			т = 0;
			Имя = "";
			Зн = "";
			п = 0;
			Пока п < м.Количество() Цикл
				Если м[п] = "" Тогда
					т = т + 1;
				ИначеЕсли Имя = "" Тогда
					имзн = СтрЗаменить(м[п], ": ", Символы.Таб);
					имзн = СтрРазделить(имзн, Символы.Таб);
					Имя = имзн[0];
					Если имзн.Количество() > 1 Тогда
						Зн = имзн[1];
					КонецЕсли;
				Иначе // атрибуты
					Прервать;
				КонецЕсли;
				п = п + 1;
			КонецЦикла;
			Если Имя = "" И Зн = "" Тогда
				Продолжить;
			КонецЕсли;
			Если т > к Тогда
				св = НовыйДочерний(св, ИмяЗначение(Имя, "" + Зн), Служебный, Служебный = Истина);
				к = т;
			Иначе
				Пока т < к Цикл
					св = св.Родитель;
					к = к - 1;
				КонецЦикла;
				св = НовыйСоседний(св, ИмяЗначение(Имя, "" + Зн), Служебный);
			КонецЕсли;
			// атрибуты
			ат = св;
			Пока п < м.Количество() Цикл
				имзн = СтрРазделить(м[п], "=");
				Имя = имзн[0];
				Если имзн.Количество() > 1 Тогда
					Зн = имзн[1];
				Иначе
					Зн = "";
				КонецЕсли;
				д = "";
				Если Лев(Зн, 1) = "|" Тогда // дочернее значение атрибута
					д = Сред(Зн, 2);
					Зн = "";
				КонецЕсли;
				Если ат = св Тогда
					ат = НовыйАтрибут(ат, ИмяЗначение(Имя, "" + Зн), Служебный);
				Иначе
					ат = НовыйСоседний(ат, ИмяЗначение(Имя, "" + Зн), Служебный);
				КонецЕсли;
				Если НЕ д = "" Тогда // добавить дочерний узел в атрибут
					имзн = СтрЗаменить(д, ": ", Символы.Таб);
					имзн = СтрРазделить(имзн, Символы.Таб);
					Имя = имзн[0];
					Если имзн.Количество() > 1 Тогда
						Зн = имзн[1];
					КонецЕсли;
					НовыйДочерний(ат, ИмяЗначение(Имя, "" + Зн), Служебный, Служебный = Истина);
				КонецЕсли;
				п = п + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Узел;
КонецФункции // СоздатьСвойства()


// Функция ДобавитьСвойство(УзелСвойства, Свойства, стрСвойства) Экспорт
// 	элСвойство = Неопределено;
// 	Если Свойства.Свойство(стрСвойства.Имя, элСвойство) Тогда
// 		элСвойство.Значение = стрСвойства.Значение;
// 	Иначе
// 		дСвойство = Дочерний(УзелСвойства);
// 		Если дСвойство = Неопределено Тогда
// 			элСвойство = НовыйДочерний(УзелСвойства, стрСвойства, Истина);
// 		Иначе
// 			элСвойство = НовыйПоследний(дСвойство, стрСвойства, Истина);
// 		КонецЕсли;
// 		Свойства.Вставить(элСвойство.Имя, элСвойство);
// 	КонецЕсли;
// 	Возврат элСвойство;
// КонецФункции // ДобавитьСвойство()


Функция ОбновитьСвязи(Знач Узел) Экспорт
	//Сообщить("ОбновитьСвязи " + Узел.Код);
	Связи = ВсеСвязи.Получить(Узел);
	Если НЕ Связи = Неопределено Тогда
		Для каждого элУзел Из Связи Цикл
			//Сообщить("+Изменения " + элУзел.Ключ.Код);
			Изменения = УзелСвойство(элУзел.Значение, "Изменения");
			Изменения.Вставить(элУзел.Ключ, Истина);
			//Сообщить("+ОбъектыОбновить " + элУзел.Значение.Код);
			ОбъектыОбновить.Вставить(элУзел.Значение, Истина);
		КонецЦикла;
	КонецЕсли;
КонецФункции


Функция ОбработатьОбъект(Знач Узел, Конструктор = Ложь) Экспорт

	ТипОбъекта = Узел.Значение;

	Если ТипОбъекта = "" Тогда
		Возврат Ложь;
	КонецЕсли;

	//Сообщить("ОбработатьОбъект " + Узел.Код + " " + ТипОбъекта);

	пТипИмя = Найти(ТипОбъекта, " ");
	Если пТипИмя > 0 Тогда
		ИмяОбъекта = Сред(ТипОбъекта, пТипИмя + 1);
		ТипОбъекта = Лев(ТипОбъекта, пТипИмя - 1);
	КонецЕсли;

	ТаблицаМетодов = Неопределено;

	Если СтрНайти(ТипОбъекта, ".") Тогда
		ТипОбъекта = СтрРазделить(ТипОбъекта, ".");
		ИмяБиблиотеки = ТипОбъекта[0];
		ТипОбъекта = ТипОбъекта[1];
	Иначе
		ИмяБиблиотеки = "Объекты";
	КонецЕсли;

	Библиотека = Библиотеки.Получить(ИмяБиблиотеки);
	Если Библиотека = Неопределено Тогда
		Библиотека = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "lib", ИмяБиблиотеки + ".os"));
		Библиотеки.Вставить(ИмяБиблиотеки, Библиотека);
		Если Библиотека = Неопределено Тогда
			ВызватьИсключение "Библиотека " + ИмяБиблиотеки + " не найдена";
		КонецЕсли;
	КонецЕсли;

	Свойства = УзелСвойство(Узел, "Свойства");
	Если Свойства = Неопределено Тогда
		свУзел = Дочерний(Узел);
		Если НЕ свУзел = Неопределено Тогда
			Если свУзел.Имя = "Свойства." Тогда
				Свойства = СтруктураСвойств(свУзел);
				Узел.Вставить("Свойства", Свойства);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Свойства = Неопределено Тогда // это новый объект
		шСвойства = "";
		ТаблицаМетодов = Рефлектор.ПолучитьТаблицуМетодов(Библиотека);
		ИмяФункции = ТипОбъекта + "_Свойства";
		Если Рефлектор.МетодСуществует(Библиотека, ИмяФункции) Тогда
			Параметры = Новый Массив;
			Параметры.Добавить(Узел);
			шСвойства = Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
		КонецЕсли;
		Свойства = НовыйДочерний(Узел, ИмяЗначение("Свойства.", ""), Служебный(Узел));
		СоздатьСвойства(Свойства, шСвойства);
		Узел.Вставить("Свойства", Свойства);
	КонецЕсли;

	Если Конструктор Тогда
		Возврат Свойства;
	КонецЕсли;

	Изменения = УзелСвойство(Узел, "Изменения");
	Если Изменения = Неопределено Тогда
		// инициализация
		Изменения = Новый Соответствие;
		Изменения.Вставить(Узел, Истина);
		Узел.Вставить("ИмяОбъекта", ИмяОбъекта);
		Узел.Вставить("ТипОбъекта", ИмяОбъекта);
	КонецЕсли;

	ОбъектыОбновить.Удалить(Узел);

	Если Изменения.Количество() Тогда

		//Атрибуты = ПолучитьАргументы(Узел);
		Узел.Вставить("Изменения", Новый Соответствие);

		ИмяФункции = ТипОбъекта + "_Модель";
		Если Рефлектор.МетодСуществует(Библиотека, ИмяФункции) Тогда
			Сообщить("м. " + Узел.Код);
			Параметры = Новый Массив;
			Параметры.Добавить(ЭтотОбъект);
			Параметры.Добавить(Свойства);
			Параметры.Добавить(Изменения);
			Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
			Для каждого св Из Изменения Цикл
				ОбновитьСвязи(св.Ключ);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

	Если ПолучитьУзел(Узел.Код) = Неопределено Тогда // Узел был удален
		Возврат "";
	КонецЕсли;

	// обработать вложенные объекты
	Содержимое = Интерпретировать(Свойства, , Ложь);
	Узел.Вставить("Содержимое", Содержимое);

	// сформировать представление объекта
	Состояние = "";
	Если Свойства.д.Свойство("Вид") Тогда // Стандартный вид
		Состояние = ЗначениеСвойства(Свойства.д.Вид);
	Иначе
		Состояние = ОбъектВид(Узел, Свойства);
		Состояние = "<div id='_" + Узел.Код + "'>" + Состояние + "</div>";
	КонецЕсли;
	Если Свойства.д.Свойство("Форма") Тогда
		Состояние = Состояние + ОбъектФорма(Узел, Свойства);
	КонецЕсли;

	Возврат Состояние;

КонецФункции // ОбработатьОбъект()


Функция ВызватьФункцию(Знач Узел, Знач ИмяФункции = Неопределено, структЗадача = Неопределено) Экспорт

	Если НЕ ИмяФункции = Неопределено Тогда // указано имя функции

		Если СтрНайти(ИмяФункции, ".") Тогда
			ИмяФункции = СтрРазделить(ИмяФункции, ".");
			ИмяБиблиотеки = ИмяФункции[0];
			ИмяФункции = ИмяФункции[1];
		Иначе
			ИмяБиблиотеки = "Функции";
		КонецЕсли;

		Библиотека = Библиотеки.Получить(ИмяБиблиотеки);
		Если Библиотека = Неопределено Тогда
			Библиотека = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "lib", ИмяБиблиотеки + ".os"));
			Библиотеки.Вставить(ИмяБиблиотеки, Библиотека);
		КонецЕсли;
		Если НЕ Библиотека = Неопределено Тогда
			ТаблицаМетодов = Рефлектор.ПолучитьТаблицуМетодов(Библиотека);
			Параметры = Неопределено;
			Для каждого Метод Из ТаблицаМетодов Цикл
				Если Метод.Имя = ИмяФункции Тогда
					Параметры = Новый Массив;
					Параметры.Добавить(ЭтотОбъект);
					Если структЗадача = Неопределено Тогда // если вызвал интерпретатор
						Аргументы = ПолучитьАргументы(Узел);
						Параметры.Добавить(Аргументы);
					Иначе // задача "ВыполнитьФункцию"
						Параметры.Добавить(структЗадача);
						Параметры.Добавить(Истина);
					КонецЕсли;
					Состояние = Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Параметры = Неопределено Тогда
				ВызватьИсключение "Функция " + ИмяФункции + " не найдена";
			КонецЕсли;
		Иначе
			ВызватьИсключение "Библиотека " + ИмяБиблиотеки + " не найдена";
		КонецЕсли;

	КонецЕсли;

	Возврат Состояние;

КонецФункции // ВызватьФункцию()


Функция Интерпретировать(Знач Узел, ЭтоАтрибут = Ложь, НачальныйУзел = Истина) Экспорт
	Перем Имя, Значение, Результат;

	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел: " + Узел;
		//Сообщить("Это не узел");
		Возврат "";
	КонецЕсли;

	СледУзел = Узел;
	Пока НЕ СледУзел = Неопределено Цикл
		Узел = СледУзел;

		Состояние = Неопределено;

		Имя = Узел.Имя;
		Значение = УзелСвойство(Узел, "Значение");

		//Сообщить("у " + Узел.Код + " " + Имя + " " + Значение);

		Если Имя = "Истина" Тогда
			Состояние = Истина;
		ИначеЕсли Имя = "Ложь" Тогда
			Состояние = Ложь;
		ИначеЕсли Имя = "Неопределено" Тогда
			Состояние = Неопределено;
		ИначеЕсли Имя = "Пустой" Тогда
			Состояние = Пустой;
		ИначеЕсли Имя = "Число" Тогда
			Если НЕ "" + Значение = "" Тогда
				Состояние = Число(Значение);
			Иначе
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					Состояние = Число(Интерпретировать(УзелДочерний, , Ложь));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Имя = "Пробел" Тогда
			Состояние = " ";
		ИначеЕсли Имя = "Строка" Тогда
			Состояние = "" + Значение;
			УзелДочерний = Дочерний(Узел);
			Если НЕ УзелДочерний = Неопределено Тогда
				Состояние = Состояние + Интерпретировать(УзелДочерний, , Ложь);
			КонецЕсли;
		ИначеЕсли Имя = "Структура" Тогда
			Состояние = Значение;
		ИначеЕсли (Имя = "Аргумент" ИЛИ Имя = "А") И этоАтрибут Тогда
			// объявление аргумента
			Если Значение = "Значение" Тогда // текстовое поле
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					Состояние = " value=""" + Интерпретировать(УзелДочерний) + """ onchange=""addcmd(this,event)""";
				КонецЕсли;
			ИначеЕсли Значение = "Выбрано" Тогда // галочка
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					Состояние = ?(Интерпретировать(УзелДочерний) = "true", " checked=""checked""", "");
				КонецЕсли;
			ИначеЕсли Значение = "ПриИзменении" Тогда
				Состояние = " onchange=""addcmd(this,event)""";
			ИначеЕсли Значение = "ПриНажатии" Тогда
				Состояние = " onclick=""addcmd(this,event); return false""";
			ИначеЕсли Значение = "ПриОтправке" Тогда
				Состояние = " onsubmit=""addcmd(this,event); return false""";
			КонецЕсли;

		ИначеЕсли Имя = "Функция" ИЛИ Имя = "Ф" Тогда
			УзелДочерний = Дочерний(Узел);
			Если УзелДочерний = Неопределено Тогда
				Состояние = "" + ВызватьФункцию(Узел);
				УзелДочерний = Дочерний(Узел);
			КонецЕсли;
			Если НЕ УзелДочерний = Неопределено Тогда
				Состояние = Состояние + Интерпретировать(УзелДочерний, , Ложь);
			КонецЕсли;

		ИначеЕсли Имя = "Свойства." Тогда // свойства объекта

		ИначеЕсли Имя = "Объект" ИЛИ Имя = "О" Тогда // это функциональный узел
			Состояние = "" + ОбработатьОбъект(Узел);

		// ИначеЕсли Имя = "Узел" ИЛИ Имя = "У" Тогда // узлы будут просто шаблонами
		// 	Элемент = УзелСостояние(Узел, "Показать");
		// 	Если Элемент = Неопределено Тогда
		// 		Элемент = НайтиАтрибут(Узел, "Показать"); // если нужно сразу показать
		// 		Если Элемент = Неопределено Тогда
		// 			Элемент = "";
		// 		ИначеЕсли Элемент.Значение = "Да" Тогда
		// 			Элемент = Истина;
		// 		ИначеЕсли Элемент.Значение = "Нет" Тогда
		// 			Элемент = Ложь;
		// 		КонецЕсли;
		// 		УзелСостояниеЗначение(Узел, "Показать", Элемент);
		// 	КонецЕсли;
		// 	Если Элемент = Истина Тогда
		// 		Состояние = "<div id=""_" + Узел.Код + """>" + УзелЗначение(Узел) + "</div>";
		// 	КонецЕсли;

		ИначеЕсли Имя = "" Тогда // это оператор
			Параметры = Новый Массив;
			Параметры.Добавить(ЭтотОбъект);
			Параметры.Добавить(Дочерний(Узел));
			Если НЕ "" + Значение = "" Тогда
				Состояние = Рефлектор.ВызватьМетод(Операторы, "Оператор_" + Значение, Параметры);
			КонецЕсли;

		// ИначеЕсли Имя = "С" Тогда
		// 	Если НЕ "" + Значение = "" Тогда // указано имя узла
		// 		Состояние = ОпределениеУзла(Узел, Значение);
		// 	Иначе
		// 		Состояние = Дочерний(Узел);
		// 	КонецЕсли;

		ИначеЕсли Имя = "Ссылка" ИЛИ Имя = "С" Тогда
			Свойства = ПолучитьСвойстваПоСсылке(Узел, , Истина);
			Если Свойства.Количество() = 0 Тогда
				ВызватьИсключение "Свойство не найдено: " + Узел.Значение;
			КонецЕсли;
			Состояние = Свойства[0];

		// ИначеЕсли Имя = "Ключ" ИЛИ Имя = "К" Тогда

		//Если Значение = "Содержимое" ИЛИ Значение = "ИмяОбъекта" ИЛИ Значение = "ТипОбъекта" Тогда // содержимое объекта или имя объекта
		ИначеЕсли Имя = "Переменная" ИЛИ Имя = "П" Тогда // значение переменной объекта
			сУзел = Узел;
			Пока НЕ сУзел = Неопределено Цикл
				Если сУзел.Имя = "Свойства." Тогда
					Состояние = "" + УзелСвойство(сУзел.Родитель, Значение);
					Прервать;
				КонецЕсли;
				сУзел = сУзел.Родитель;
			КонецЦикла;

		ИначеЕсли Имя = "Значение" ИЛИ Имя = "З" Тогда // значение свойств объектов
			Состояние = "";
			сУзел = Узел;
			Свойства = ПолучитьСвойстваПоСсылке(Узел, Значение, Истина);
			Если Свойства.Количество() = 0 Тогда
				Сообщить("Свойство не найдено: " + Значение + " узел " + Узел.Код);
			КонецЕсли;
			Для каждого Свойство Из Свойства Цикл
				Если Состояние = "" Тогда
					Состояние = ЗначениеСвойства(Свойство);
				Иначе
					Состояние = "" + Состояние + " " + ЗначениеСвойства(Свойство);
				КонецЕсли;
			КонецЦикла;

		// ИначеЕсли Имя = "З" Тогда // Для узла потом переделать
		// 	Если НЕ "" + Значение = "" Тогда
		// 		Состояние = УзелЗначение(Узел);
		// 	КонецЕсли;

		// ИначеЕсли Имя = "Пусть" ИЛИ Имя = "П" Тогда // вставить вычисленное значение
		// 	Значение = Дочерний(Узел);
		// 	Если НЕ Значение = Неопределено Тогда
		// 		Значение = Интерпретировать(Значение, , Ложь);
		// 		ВставитьЗначение(Узел, Значение);
		// 	КонецЕсли;

		// ИначеЕсли Имя = "Вставить" ИЛИ Имя = "В" Тогда // вставить как есть
		// 	Значение = Дочерний(Узел);
		// 	Если НЕ Значение = Неопределено Тогда
		// 		ВставитьЗначение(Узел, Значение);
		// 	КонецЕсли;

		// ИначеЕсли Имя = "Указатель" Тогда
		// 	Если НЕ "" + Значение = "" Тогда
		// 		Состояние = ПолучитьУзел(Значение); // указан код узла
		// 	КонецЕсли;
		ИначеЕсли Имя = "Свойство" Тогда
			Элемент = Интерпретировать(Дочерний(Узел));
			Состояние = УзелСвойство(Элемент, Значение);
		ИначеЕсли Имя = "Атрибут" Тогда
			Элемент = Интерпретировать(Дочерний(Узел));
			Состояние = НайтиСоседний(Атрибут(Элемент), Значение).Значение;
		ИначеЕсли Имя = "Первый" Тогда
			Список = Интерпретировать(Дочерний(Узел));
			Элемент = Дочерний(Список);
			Если Элемент = Неопределено Тогда
				Элемент = Пустой;
			КонецЕсли;
			Состояние = Элемент;
		ИначеЕсли Имя = "Соседний" Тогда
			Элемент = Интерпретировать(Дочерний(Узел));
			Если НЕ Элемент = Неопределено Тогда
				Элемент = Соседний(Элемент);
			КонецЕсли;
			Если Элемент = Неопределено Тогда
				Элемент = Пустой;
			КонецЕсли;
			Состояние = Элемент;
		Иначе

			Если НЕ ЭтоАтрибут Тогда
				ЗначениеУзелДочерний = "";
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					ЗначениеУзелДочерний = Интерпретировать(УзелДочерний, , Ложь);
				КонецЕсли;
				ЗначениеУзелАтрибут = "";
				УзелАтрибут = Атрибут(Узел);
				Если НЕ УзелАтрибут = Неопределено Тогда
					ЗначениеУзелАтрибут = Интерпретировать(УзелАтрибут, Истина, Ложь);
				КонецЕсли;
				Состояние = ПоказатьУзел(Узел, ЗначениеУзелАтрибут, ЗначениеУзелДочерний);
			Иначе
				ЗначениеУзелДочерний = "";
				УзелДочерний = Дочерний(Узел);
				Если НЕ УзелДочерний = Неопределено Тогда
					ЗначениеУзелДочерний = Интерпретировать(УзелДочерний, , Ложь);
				КонецЕсли;
				Состояние = ПоказатьУзел(Узел, , ЗначениеУзелДочерний, Истина);
			КонецЕсли;

		КонецЕсли;

		Если НачальныйУзел Тогда
			Возврат Состояние;
		КонецЕсли;

		К = К + 1;
		Если Результат = Неопределено Тогда
			Результат = Состояние;
		Иначе
			Результат = Результат + Состояние;
		КонецЕсли;

		СледУзел = Соседний(Узел);

	КонецЦикла;

	Возврат Результат;

КонецФункции // Интерпретировать()


Функция НайтиПоКоду(Код, Старший) Экспорт
	Найден = Неопределено;

	Атрибут = Атрибут(Старший);
	Если НЕ Атрибут = Неопределено Тогда
		Если Атрибут.Код = Код Тогда
			Найден = Атрибут;
		КонецЕсли;
	КонецЕсли;
	Если Найден = Неопределено Тогда
		Дочерний = Дочерний(Старший);
		Если НЕ Дочерний = Неопределено Тогда
			Если Дочерний.Код = Код Тогда
				Найден = Дочерний;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Найден = Неопределено Тогда
		Соседний = Соседний(Старший);
		Если НЕ Соседний = Неопределено Тогда
			Если Соседний.Код = Код Тогда
				Найден = Соседний;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Найден = Неопределено Тогда
		Если НЕ Атрибут = Неопределено Тогда
			Найден = НайтиПоКоду(Код, Атрибут);
		КонецЕсли;
	КонецЕсли;
	Если Найден = Неопределено Тогда
		Если НЕ Дочерний = Неопределено Тогда
			Найден = НайтиПоКоду(Код, Дочерний);
		КонецЕсли;
	КонецЕсли;
	Если Найден = Неопределено Тогда
		Если НЕ Соседний = Неопределено Тогда
			Найден = НайтиПоКоду(Код, Соседний);
		КонецЕсли;
	КонецЕсли;

	Возврат Найден;

КонецФункции


Функция ПолучитьУзел(Код, Старший = Неопределено) Экспорт
	Узел = Узлы.Получить(Код);
	Если НЕ Узел = Неопределено Тогда
		Возврат Узел;
	КонецЕсли;
	// Если Лев(Код, 1) = "s" Тогда
	// 	Возврат Неопределено
	// КонецЕсли;
	//Стр = Данные.ПолучитьСтроку(Число(Код));
	Попытка
		Стр = Данные.ПолучитьСтроку(Число(Код));
	Исключение
		Возврат Неопределено;
		//ВызватьИсключение "Неверный код узла: " + Код;
	КонецПопытки;
	Стр = СтрРазделить(Стр, Символы.Таб);
	Ключ = Неопределено;
	Для Каждого знСтр Из Стр Цикл
		Если Ключ = Неопределено Тогда
			Ключ = знСтр;
			Если Ключ = "И" Тогда
				Ключ = "Имя";
			ИначеЕсли Ключ = "З" Тогда
				Ключ = "Значение";
			ИначеЕсли Ключ = "Д" Тогда
				Ключ = "Дочерний";
			ИначеЕсли Ключ = "С" Тогда
				Ключ = "Соседний";
			ИначеЕсли Ключ = "А" Тогда
				Ключ = "Атрибут";
			КонецЕсли;
		Иначе
			Если Узел = Неопределено Тогда
				Узел = Новый Структура("Код", Код);
			КонецЕсли;
			Если Ключ = "Значение" Тогда
				знСтр = СтрЗаменить(знСтр, "#x9", Символы.Таб);
				знСтр = СтрЗаменить(знСтр, "#xA", Символы.ПС);
				знСтр = СтрЗаменить(знСтр, "#xD", Символы.ВК);
			КонецЕсли;
			Узел.Вставить(Ключ, знСтр);
			Ключ = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Если НЕ Узел = Неопределено Тогда

		Если НЕ Старший = Неопределено Тогда
			Узел.Вставить("Старший", Старший);
			Родитель = Старший;
			Если УзелСвойство(Старший, "Соседний") = Код Тогда
				Родитель = Старший.Родитель;
			КонецЕсли;
			Узел.Вставить("Родитель", Родитель);
			Если УзелСвойство(Родитель, "Атрибут") = Узел.Код ИЛИ (УзелСостояние(Старший, "ЭтоАтрибут") = Истина И УзелСвойство(Старший, "Соседний") = Узел.Код) Тогда
				УзелСостояниеЗначение(Узел, "ЭтоАтрибут", Истина);
			КонецЕсли;
		КонецЕсли;

		УзелИмя = Узел.Имя;
		Если НЕ УзелИмя = "" Тогда
			Если Прав(УзелИмя, 1) = "." Тогда
				Узел.Вставить("д", Новый Структура);
				УзелИмя = Лев(УзелИмя, СтрДлина(УзелИмя)-1);
			КонецЕсли;
			Родитель = УзелСвойство(Узел, "Родитель");
			Если НЕ Родитель = Неопределено Тогда
				Если Узел.Родитель.Свойство("д") Тогда
					Узел.Родитель.д.Вставить(УзелИмя, Узел);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Узлы.Вставить(Код, Узел);

	КонецЕсли;

	Возврат Узел;
КонецФункции // ПолучитьУзел()

Функция НовыйУзел(Узел, Служебный = Ложь) Экспорт
	Если Служебный Тогда
		НовыйКод = "s" + сКоличество;
		сКоличество = сКоличество + 1;
	Иначе
		Пока КодУзла <= Количество Цикл
			КодУзла = КодУзла + 1;
			Если КодУзла > Количество Тогда
				Данные.ДобавитьСтроку("");
				Количество = Данные.КоличествоСтрок();
				Прервать;
			КонецЕсли;
			Если Данные.ПолучитьСтроку(КодУзла) = "" Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НовыйКод = "" + КодУзла;
	КонецЕсли;

	УзелИмя = Узел.Имя;
	Если НЕ УзелИмя = "" Тогда
		Если Прав(УзелИмя, 1) = "." Тогда
			Узел.Вставить("д", Новый Структура);
			УзелИмя = Лев(УзелИмя, СтрДлина(УзелИмя)-1);
		КонецЕсли;
		Родитель = УзелСвойство(Узел, "Родитель");
		Если НЕ Родитель = Неопределено Тогда
			Если Узел.Родитель.Свойство("д") Тогда
				Узел.Родитель.д.Вставить(УзелИмя, Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Узел.Вставить("Код", НовыйКод);
	Узлы.Вставить(Узел.Код, Узел);
	Возврат Узел;
КонецФункции // НовыйУзел(СтруктураУзла)

Функция НовыйРодитель(Дочерний, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Дочерний.Старший);
	СтруктураУзла.Вставить("Родитель", Дочерний.Родитель);
	СтруктураУзла.Вставить("Дочерний", Дочерний.Код);
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	СтаршийУзел = Дочерний.Старший;
	Если НЕ Дочерний(СтаршийУзел) = Неопределено Тогда
		Если СтаршийУзел.Дочерний = Дочерний.Код Тогда
			СтаршийУзел.Дочерний = НовыйУзел.Код;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Соседний(СтаршийУзел) = Неопределено Тогда
		Если СтаршийУзел.Соседний = Дочерний.Код Тогда
			СтаршийУзел.Соседний = НовыйУзел.Код;
		КонецЕсли;
	КонецЕсли;
	СоседнийУзел = Соседний(Дочерний);
	Если НЕ СоседнийУзел = Неопределено Тогда
		СоседнийУзел.Старший = НовыйУзел;
		НовыйУзел.Вставить("Соседний", СоседнийУзел.Код);
	КонецЕсли;
	Дочерний.Вставить("Соседний", Неопределено);
	Дочерний.Вставить("Старший", НовыйУзел);
	Дочерний.Вставить("Родитель", НовыйУзел);
	Возврат НовыйУзел;
КонецФункции // НовыйРодитель()

Функция УдалитьРодителя(Дочерний) Экспорт
	РодительУзел = Дочерний.Родитель;
	СтаршийУзел = РодительУзел.Старший;
	Если УзелСвойство(СтаршийУзел, "Дочерний") = РодительУзел.Код Тогда
		СтаршийУзел.Дочерний = Дочерний.Код;
	КонецЕсли;
	Если УзелСвойство(СтаршийУзел, "Соседний") = РодительУзел.Код Тогда
		СтаршийУзел.Соседний = Дочерний.Код;
	КонецЕсли;
	Дочерний.Вставить("Старший", РодительУзел.Старший);
	Дочерний.Вставить("Родитель", РодительУзел.Родитель);
	СоседнийУзел = Дочерний;
	Пока НЕ УзелСвойство(СоседнийУзел, "Соседний") = Неопределено Цикл
		СоседнийУзел = Соседний(СоседнийУзел);
	КонецЦикла;
	СоседнийУзелРодитель = Соседний(РодительУзел);
	Если НЕ СоседнийУзелРодитель = Неопределено Тогда
		СоседнийУзел.Вставить("Соседний", СоседнийУзелРодитель.Код);
		СоседнийУзелРодитель.Старший = СоседнийУзел;
	КонецЕсли;
КонецФункции // УдалитьРодителя()

Функция НовоеЗначениеУзла(Знач Узел, Значение = Неопределено, Служебный = Ложь, Добавить = Ложь, Обновить = Истина) Экспорт
	ДочернийУзел = Дочерний(Узел);
	Если НЕ ДочернийУзел = Неопределено Тогда
		Если НЕ Добавить Тогда
			// прежний дочерний нужно удалять
			УдалитьУзел(ДочернийУзел, , Истина);
			ДочернийУзел = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ТипЗнч(Значение) = Тип("Структура") ИЛИ НЕ Значение.Свойство("Имя") Тогда
		Значение = ИмяЗначение(Строка(ТипЗнч(Значение)), Значение);
	КонецЕсли;
	нУзел = НовыйДочерний(Узел, Значение, Служебный, НЕ ДочернийУзел = Неопределено);
	Если Обновить Тогда
		ОбновитьУзел(Узел);
	КонецЕсли;
	Возврат нУзел;
КонецФункции // НовоеЗначениеУзла()

Функция НовыйДочерний(Знач Старший, СтруктураУзла, Служебный = Ложь, ВКонец = Ложь) Экспорт
	Если ВКонец Тогда
		сУзел = Дочерний(Старший);
		Если НЕ сУзел = Неопределено Тогда
			Пока НЕ сУзел = Неопределено Цикл
				Старший = сУзел;
				сУзел = Соседний(сУзел);
			КонецЦикла;
			Возврат НовыйСоседний(Старший, СтруктураУзла, Служебный);
		КонецЕсли;
	КонецЕсли;
	СтруктураУзла.Вставить("Старший", Старший);
	СтруктураУзла.Вставить("Родитель", Старший);
	УзелСоседний = Дочерний(Старший);
	Если НЕ УзелСоседний = Неопределено Тогда
		СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
	КонецЕсли;
	Если СтруктураУзла.Свойство("Код") Тогда // существующий узел
		НовыйУзел = СтруктураУзла;
	Иначе
		НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	КонецЕсли;
	Старший.Вставить("Дочерний", НовыйУзел.Код);
	Если НЕ УзелСоседний = Неопределено Тогда
		УзелСоседний.Вставить("Старший", НовыйУзел);
	КонецЕсли;
	// Если УзелСостояние(Старший, "ЭтоАтрибут") = Истина Тогда
	// 	УзелСостояниеЗначение(НовыйУзел, "ЭтоАтрибут", Истина);
	// КонецЕсли;
	Возврат НовыйУзел;
КонецФункции // НовыйДочерний()

Функция НовыйСоседний(Старший, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Старший);
	СтруктураУзла.Вставить("Родитель", Старший.Родитель);
	УзелСоседний = Соседний(Старший);
	Если НЕ УзелСоседний = Неопределено Тогда
		СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
	КонецЕсли;
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	Старший.Вставить("Соседний", НовыйУзел.Код);
	Если НЕ УзелСоседний = Неопределено Тогда
		УзелСоседний.Вставить("Старший", НовыйУзел);
	КонецЕсли;
	Если УзелСостояние(Старший, "ЭтоАтрибут") = Истина Тогда
		УзелСостояниеЗначение(НовыйУзел, "ЭтоАтрибут", Истина);
	КонецЕсли;
	Возврат НовыйУзел;
КонецФункции // НовыйСоседний()

Функция НовыйПоследний(Знач Старший, СтруктураУзла, Служебный = Ложь) Экспорт
	УзелСоседний = Соседний(Старший);
	Пока НЕ УзелСоседний = Неопределено Цикл
		Старший = УзелСоседний;
		УзелСоседний = Соседний(Старший);
	КонецЦикла;
	СтруктураУзла.Вставить("Старший", Старший);
	СтруктураУзла.Вставить("Родитель", Старший.Родитель);
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	Старший.Вставить("Соседний", НовыйУзел.Код);
	Если УзелСостояние(Старший, "ЭтоАтрибут") = Истина Тогда
		УзелСостояниеЗначение(НовыйУзел, "ЭтоАтрибут", Истина);
	КонецЕсли;
	Возврат НовыйУзел;
КонецФункции // НовыйПоследний()

Функция НовыйАтрибут(Старший, СтруктураУзла, Служебный = Ложь) Экспорт
	СтруктураУзла.Вставить("Старший", Старший);
	СтруктураУзла.Вставить("Родитель", Старший);
	УзелСоседний = Атрибут(Старший);
	Если НЕ УзелСоседний = Неопределено Тогда
		СтруктураУзла.Вставить("Соседний", УзелСоседний.Код);
	КонецЕсли;
	НовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
	Старший.Вставить("Атрибут", НовыйУзел.Код);
	Если НЕ УзелСоседний = Неопределено Тогда
		УзелСоседний.Вставить("Старший", НовыйУзел);
	КонецЕсли;
	УзелСостояниеЗначение(НовыйУзел, "ЭтоАтрибут", Истина);
	Возврат НовыйУзел;
КонецФункции // НовыйАтрибут()

Функция Служебный(Узел)
	Если НЕ Узел = Неопределено Тогда
		Если Лев(Узел.Код, 1) = "s" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // Служебный()

Функция УдалитьУзел(Узел, Совсем = Истина, Цепочку = Ложь, НачальныйУзел = Истина) Экспорт

	УзелСоседний = Соседний(Узел);

	Если НачальныйУзел Тогда
		Если Узел.Родитель.Свойство("д") Тогда // удалить из индекса
			УзелИмя = Узел.Имя;
			Если НЕ УзелИмя = "" Тогда
				Если Прав(УзелИмя, 1) = "." Тогда
					УзелИмя = Лев(УзелИмя, СтрДлина(УзелИмя)-1);
				КонецЕсли;
				Узел.Родитель.д.Удалить(УзелИмя);
			КонецЕсли;
		КонецЕсли;
		УзелСтарший = Узел.Старший;
		Если НЕ УзелСвойство(УзелСтарший, "Атрибут") = Неопределено Тогда
			Если УзелСтарший.Атрибут = Узел.Код Тогда
				Если УзелСоседний = Неопределено Тогда
					//УзелСтарший.Удалить("Атрибут");
					УзелСтарший.Атрибут = Неопределено;
				Иначе
					УзелСтарший.Атрибут = УзелСоседний.Код;
					УзелСоседний.Старший = УзелСтарший;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		Если НЕ УзелСвойство(УзелСтарший, "Дочерний") = Неопределено Тогда
			Если УзелСтарший.Дочерний = Узел.Код Тогда
				Если УзелСоседний = Неопределено Тогда
					//УзелСтарший.Удалить("Дочерний");
					УзелСтарший.Дочерний = Неопределено;
				Иначе
					УзелСтарший.Дочерний = УзелСоседний.Код;
					УзелСоседний.Старший = УзелСтарший;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		Если НЕ УзелСвойство(УзелСтарший, "Соседний") = Неопределено Тогда
			Если УзелСтарший.Соседний = Узел.Код Тогда
				Если УзелСоседний = Неопределено Тогда
					//УзелСтарший.Удалить("Соседний");
					УзелСтарший.Соседний = Неопределено;
				Иначе
					УзелСтарший.Соседний = УзелСоседний.Код;
					УзелСоседний.Старший = УзелСтарший;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Цепочку Тогда
		Если НЕ УзелСоседний = Неопределено Тогда
			УдалитьУзел(УзелСоседний, Совсем, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;

	// удалить связи
	Для каждого элСвязь Из ВсеСвязи Цикл
		Связи = элСвязь.Значение;
		уСвязи = Новый Соответствие;
		уСвязи.Вставить(Узел);
		Для каждого элУзел Из Связи Цикл
			Если элУзел.Значение = Узел Тогда
				уСвязи.Вставить(элУзел.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для каждого элУзел Из уСвязи Цикл
			Связи.Удалить(элУзел.Ключ);
		КонецЦикла;
	КонецЦикла;
	ВсеСвязи.Удалить(Узел);

	Узлы.Удалить(Узел.Код);
	ЭтоСлужебный = Служебный(Узел);
	Если НЕ ЭтоСлужебный Тогда
		Данные.ЗаменитьСтроку(Узел.Код, "");
	КонецЕсли;

	Если Совсем ИЛИ ЭтоСлужебный Тогда
		Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
			УдалитьУзел(Атрибут(Узел), , Истина, Ложь);
		КонецЕсли;
		Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
			УдалитьУзел(Дочерний(Узел), , Истина,  Ложь);
		КонецЕсли;
		ОсвободитьОбъект(Узел);
	КонецЕсли;

КонецФункции // УдалитьУзел(Узел)

Функция КопироватьУзел(Узел, Буфер, ПервыйВызов = Истина) Экспорт

	Буфер.Вставить(Узел.Код, Узел);

	Если НЕ УзелСвойство(Узел, "Атрибут") = Неопределено Тогда
		КопироватьУзел(Атрибут(Узел), Буфер, Ложь);
	КонецЕсли;

	Если НЕ УзелСвойство(Узел, "Дочерний") = Неопределено Тогда
		КопироватьУзел(Дочерний(Узел), Буфер, Ложь);
	КонецЕсли;

	Если НЕ ПервыйВызов Тогда
		Если НЕ УзелСвойство(Узел, "Соседний") = Неопределено Тогда
			КопироватьУзел(Соседний(Узел), Буфер, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецФункции // КопироватьУзел()

Функция НайтиСоседний(Знач Узел, ИмяУзла) Экспорт
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = ИмяУзла Тогда
			Возврат Узел;
		КонецЕсли;
		Узел = Соседний(Узел);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // НайтиСоседний()

Функция НайтиАтрибут(Знач Узел, ИмяАтрибута, ЗначениеАтрибута = Неопределено) Экспорт
	Узел = Атрибут(Узел);
	Пока НЕ Узел = Неопределено Цикл
		Если Узел.Имя = ИмяАтрибута Тогда
			Если ЗначениеАтрибута = Неопределено Тогда
				Возврат Узел;
			ИначеЕсли ЗначениеАтрибута = УзелСвойство(Узел, "Значение") Тогда
				Возврат Узел;
			КонецЕсли;
		КонецЕсли;
		Узел = Соседний(Узел);
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // НайтиАтрибут()

Функция Соседний(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	СоседнийУзел = УзелСвойство(Узел, "Соседний");
	Если НЕ СоседнийУзел = Неопределено Тогда
		СоседнийУзел = ПолучитьУзел(СоседнийУзел, Узел);
		Если УзелСостояние(Узел, "ЭтоАтрибут") = Истина Тогда
			УзелСостояниеЗначение(СоседнийУзел, "ЭтоАтрибут", Истина)
		КонецЕсли;
	КонецЕсли;
	Возврат СоседнийУзел;
КонецФункции // Соседний()

Функция Дочерний(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	// ДочернийУзел = УзелСвойство(Узел, "сДочерний"); // Если изменено значение узла
	// Если ДочернийУзел = Неопределено Тогда
		ДочернийУзел = УзелСвойство(Узел, "Дочерний");
	//КонецЕсли;
	Если НЕ ДочернийУзел = Неопределено Тогда
		ДочернийУзел = ПолучитьУзел(ДочернийУзел, Узел);
	КонецЕсли;
	Возврат ДочернийУзел;
КонецФункции // Дочерний()

Функция Атрибут(Знач Узел) Экспорт
	Если НЕ ТипЗнч(Узел) = Тип("Структура") Тогда
		ВызватьИсключение "Неверный узел";
	КонецЕсли;
	АтрибутУзел = УзелСвойство(Узел, "Атрибут");
	Если НЕ АтрибутУзел = Неопределено Тогда
		АтрибутУзел = ПолучитьУзел(АтрибутУзел, Узел);
	КонецЕсли;
	Возврат АтрибутУзел;
КонецФункции // Атрибут()

Функция СохранитьДанные() Экспорт
	Для каждого элУзел Из Узлы Цикл
		Если НЕ элУзел.Значение = Неопределено И НЕ Служебный(элУзел.Значение) Тогда
			Данные.ЗаменитьСтроку(ЭлУзел.Ключ, СтруктуруВСтроку(элУзел.Значение));
		КонецЕсли;
	КонецЦикла;
	Возврат Данные.ПолучитьТекст();
КонецФункции // СохранитьДанные()

Функция ПрочитатьВетку(Знач Узел)
	Если НЕ Узел = Неопределено Тогда
		ПрочитатьВетку(Атрибут(Узел));
		ПрочитатьВетку(Дочерний(Узел));
		ПрочитатьВетку(Соседний(Узел));
	КонецЕсли;
КонецФункции

Функция ПроверитьДанные()
	ПрочитатьВетку(Корень);
	Для нСтр = 1 По Данные.КоличествоСтрок() Цикл
		Если Узлы.Получить(Строка(нСтр)) = Неопределено Тогда
			Стр = Данные.ПолучитьСтроку(нСтр);
			Если НЕ Стр = "" Тогда
				Сообщить("Забытая строка " + нСтр);
				Данные.ЗаменитьСтроку(нСтр, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции


// поиск узла внутри узла
Функция НайтиУзел(Знач Узел, ЗначениеУзла, ИмяУзла = "", ПервыйВызов = Истина) Экспорт
	Объявление = Неопределено;
	Если Узел.Имя = ИмяУзла ИЛИ (ИмяУзла = "" И (Узел.Имя = "Узел" ИЛИ Узел.Имя = "У" ИЛИ Узел.Имя = "Объект" ИЛИ Узел.Имя = "О")) Тогда
		Если "" + УзелСвойство(Узел, "Значение") = ЗначениеУзла Тогда
			Возврат Узел;
		ИначеЕсли ПервыйВызов Тогда
			УзелДочерний = Дочерний(Узел);
			Если НЕ УзелДочерний = Неопределено Тогда
				Объявление = НайтиУзел(УзелДочерний, ЗначениеУзла, ИмяУзла, Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе
		УзелДочерний = Дочерний(Узел);
		Если НЕ УзелДочерний = Неопределено Тогда
			Объявление = НайтиУзел(УзелДочерний, ЗначениеУзла, ИмяУзла, Ложь);
		КонецЕсли;
	КонецЕсли;
	Если Объявление = Неопределено Тогда
		УзелСоседний = Соседний(Узел);
		Если НЕ УзелСоседний = Неопределено Тогда
			Объявление = НайтиУзел(УзелСоседний, ЗначениеУзла, ИмяУзла, Ложь);
		КонецЕсли;
	КонецЕсли;
	Возврат Объявление;
КонецФункции // НайтиУзел()


Функция ЗагрузитьHTML(Знач Узел, СтруктураHTML, НомерЭлемента) Экспорт
	Пока НомерЭлемента < СтруктураHTML.Количество() - 1 Цикл
		УзелСтрока = СтруктураHTML.Получить(НомерЭлемента);
		Если УзелСтрока = "_rt" Тогда
			Прервать;
		ИначеЕсли УзелСтрока = "_at" Тогда
			НомерЭлемента = НомерЭлемента + 1;
			УзелСтрока = СтруктураHTML.Получить(НомерЭлемента);
			Пока НЕ УзелСтрока = "_rt" Цикл
				стрУзла = СтрокуВСтруктуру(УзелСтрока);
				НовыйАтрибут(Узел, ИмяЗначение(стрУзла.attrName, стрУзла.attrVal));
				НомерЭлемента = НомерЭлемента + 1;
				УзелСтрока = СтруктураHTML.Получить(НомерЭлемента);
			КонецЦикла;
			НомерЭлемента = НомерЭлемента + 1;
			Продолжить;
		ИначеЕсли УзелСтрока = "_ch" Тогда
			НомерЭлемента = НомерЭлемента + 1;
			дУзел = НовыйДочерний(Узел, ИмяЗначение());
			ЗагрузитьHTML(дУзел, СтруктураHTML, НомерЭлемента)
		Иначе
			Если НЕ Узел.Имя = "" Тогда
				Узел = НовыйСоседний(Узел, ИмяЗначение());
			КонецЕсли;
			стрУзла = СтрокуВСтруктуру(УзелСтрока);
			Если стрУзла.Свойство("tagName") Тогда
				Узел.Вставить("Имя", стрУзла.tagName);
			Иначе
				Узел.Вставить("Имя", "text");
				Узел.Вставить("Значение", стрУзла.text);
			КонецЕсли;
		КонецЕсли;
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
КонецФункции // ЗагрузитьHTML()


Функция ПолучитьТекст() Экспорт
	Возврат Данные.ПолучитьТекст();
КонецФункции

Функция ПриСозданииОбъекта(обПроцесс, Текст = "", знБазаДанных = "", знИмяДанных = "", знПозицияДанных = "") Экспорт
	БазаДанных = знБазаДанных;
	ИмяДанных = знИмяДанных;
	ПозицияДанных = знПозицияДанных;
	Процесс = обПроцесс;

	Данные = Новый ТекстовыйДокумент;
	Узлы = Новый Соответствие;
	Если НЕ Текст = "" Тогда
		Данные.УстановитьТекст(Текст);
		Стр1 = Данные.ПолучитьСтроку(1);
		Если КодСимвола(Лев(Стр1, 1)) = 65279 Тогда // BOM
			Данные.ЗаменитьСтроку(1, Сред(Стр1, 2));
		КонецЕсли;
	КонецЕсли;

	Количество = Данные.КоличествоСтрок();
	сКоличество = 0;
	КодУзла = 0;
	К = 0;

	Представление = "";
	Если Количество = 0 Тогда
		Корень = НовыйУзел(ИмяЗначение("О", "Корень"));
	Иначе
		Корень = ПолучитьУзел("1");
	КонецЕсли;
	Корень.Вставить("Родитель", Неопределено);
	Корень.Вставить("Старший", Неопределено);

	//ПроверитьДанные();

	Библиотеки = Новый Соответствие;
	Операторы = ЗагрузитьСценарий(ОбъединитьПути(ТекущийКаталог(), "lib", "Операторы.os"));
	Рефлектор = Новый Рефлектор;
	Пустой = НовыйУзел(Новый Структура("Имя, Родитель", "Пустой", Неопределено), Истина);
	НетЗначения = Новый Структура;
	УзлыОбновить = Новый Соответствие;
	ОбъектыОбновить = Новый Соответствие;
	ВсеСвязи = Новый Соответствие;
	Изменены = Ложь;

КонецФункции
