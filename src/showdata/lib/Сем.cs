// MIT License
// Copyright (c) 2021 vasvl123
// https://github.com/vasvl123/onesharp.net


namespace onesharp.lib
{
	class Сем : Onesharp
	{
        public Сем() : base("Сем") { }

        Узел Формы;

        public object УзелСвойство(Структура Узел, string Свойство)
        {
            object УзелСвойство = null;
            if (!(Узел == Неопределено))
            {
                Узел.Свойство(Свойство, out УзелСвойство);
            }
            return УзелСвойство;
        } // УзелСвойство(Узел)

        public Узел ИмяЗначение(string Имя = "", object _Значение = null)
        {
            var Значение = (_Значение is null) ? "" : _Значение;
            return Узел.Новый("Имя, Значение", Имя, Значение);
        }

        public void ОбработатьОтвет(string Действие, pagedata Данные, Узел Свойства, Структура Результат)
		{

			if (Действие == "ФормыСлов")
			{
				if (!(Результат == Неопределено))
				{
					var служ = Данные.Служебный(Формы);
					foreach (КлючИЗначение Вариант in Результат)
					{
                        var вЗначение = Вариант.Значение as Структура;
                        var ф = Формы._с.Получить(вЗначение.с.Слово);
						if (ф == Неопределено)
						{
							ф = Формы._с.Получить(Стр.Заменить(вЗначение.с.Слово, "Ё", "Е"));
							if (ф == Неопределено)
							{
								continue;
							}
						}
						string[] мРез = Стр.Разделить(вЗначение.с.Результат, Символы.ПС);
						foreach (var Рез in мРез)
						{
							if (!(Рез == ""))
							{
								var мФорм = Стр.Разделить(Рез, Символы.Таб);
								var ф0 = мФорм[0];
								var ф1 = мФорм[1];
								if (ф1 == "PREP" || ф1 == "PRCL" || ф1 == "PNCT" || ф1 == "CONJ" || ф1 == "ADVB")
								{
									ф1 = ф1 + " " + ф0;
								}
								var Запись = ИмяЗначение(ф0, ф1);
								var у = Данные.НовыйДочерний(ф, Запись, служ, Истина); // Добавить форму
								if (мФорм.Length > 2)
								{
									Данные.НовыйАтрибут(у, ИмяЗначение(мФорм[2], мФорм[3]), служ);
								}
							}
						}
					}
				}
				Свойства.д.Разбор.Значение = "Токены";

			}
			else if (Действие == "Грамматики")
			{
				if (!(Свойства.Свойство("Грамматики")))
				{
					Свойства.Вставить("Грамматики", Соответствие.Новый());
				}
				if (!(Свойства.Свойство("Связи")))
				{
					Свойства.Вставить("Связи", Соответствие.Новый());
				}
				foreach (КлючИЗначение б in Результат)
				{
					var мб = Стр.Разделить(б.Значение as string, "_");
					if (Лев(б.Ключ as string, 2) == "св")
					{
						var св = Свойства.с.Связи.Получить(мб[0]) as Массив;
						if (св == Неопределено)
						{
							св = Массив.Новый();
							Свойства.с.Связи.Вставить(мб[0], св);
						}
						if (св.Найти(мб[1]) == -1)
						{
							св.Добавить(мб[1]);
						}
					}
					else
					{
						var н = 0;
						while (!(Свойства.с.Грамматики.Получить(мб[0] + "_" + н) == Неопределено))
						{
							н = н + 1;
						}
						Свойства.с.Грамматики.Вставить(мб[0] + "_" + н, мб[1]);
					}
				}

			}
			else if (Действие == "Элемент")
			{

				Свойства.д.Номер.Значение = Результат.с.Строка;
				Результат.Удалить("Элемент");
				Свойства.Вставить("Элементы", Результат.с.Элементы);

			}

			Данные.ОбъектыОбновитьДобавить(Свойства.Родитель);
			Свойства.Родитель.Вставить("Обновить", Неопределено);

		}


		public string Корень_Свойства(pagedata Данные, Узел оУзел)
		{

			if (!(оУзел.Свойство("Свойства")))
			{ // новый объект
				var Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
				оУзел.Вставить("Свойства", Свойства);
			}
			if (оУзел.с.Свойства.Дочерний == Неопределено)
			{
				var шСвойства = @"
				|*Формы
				|*Вид
				|	div	class=card mb-3 col-lg-7	style=background-color:rgba(255,255,255,0.3); min-height:20rem
				|		div class=card-body
				|			h4: OpenCorpora datasets
				|			П: Содержимое
				";
				Данные.СоздатьСвойства(оУзел.с.Свойства, шСвойства, "Только");
			}
			if (Формы == Неопределено) { // формы слов
				Формы = оУзел.с.Свойства.д.Формы;
				Формы.Вставить("_с", Соответствие.Новый());
				var фУзел = Формы.Дочерний;
				while (! (фУзел == Неопределено)) {
					Формы._с.Вставить(фУзел.Имя, фУзел);
					фУзел = фУзел.Соседний;
				}
			}

            return null;
		} // Корень_Свойства()


		public string Элемент_Свойства(pagedata Данные, Узел оУзел)
		{

			var Свойства = оУзел.Дочерний;
			if (Свойства == Неопределено)
			{ // новый объект
				Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
			}
			
            var шСвойства = @"
			|*События
			|*Показать: Нет
			|*Номер
			|*Элемент
			|*Кнопка
			|*Вид
			|	З: Кнопка
			|	: Если
			|		З: Показать
			|		ul
			|			П: Содержимое
			|";

			Данные.СоздатьСвойства(Свойства, шСвойства, "Только");
			оУзел.Вставить("Свойства", Свойства);

			// получить элемент справочника
			var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Позиция, База, Действие", Свойства.д.Позиция.Значение, Свойства.д.База.Значение, "Элемент"), Свойства, "Морфология");
			Данные.Процесс.НоваяЗадача(Запрос, "Служебный");

            return null;
		}


		public void Элемент_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{

			var оУзел = Свойства.Родитель;

			// обработать события
			if (Изменения.Получить(Свойства.д.События) == Истина)
			{
				var дУзел = Свойства.д.События.Дочерний as Узел;
				if (!(дУзел == Неопределено))
				{
					var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
					var тСобытие = мСобытие[0];
					if (тСобытие == "ПриНажатии")
					{
						if (Свойства.д.Показать.Значение == "Да")
						{
							Свойства.д.Показать.Значение = "Нет";
						}
						else
						{
							Свойства.д.Показать.Значение = "Да";
						}
					}
				}
				Данные.УдалитьУзел(дУзел);
				Изменения.Вставить(Свойства.д.События, Истина);
			}

			if (Свойства.д.Показать.Значение == "Да")
			{
				if (Свойства.Свойство("Элементы"))
				{
					var д = Свойства;
					var н = 1;
					foreach (int зн in Свойства.с.Элементы as Массив)
					{
						д = Данные.НовыйСоседний(д, ИмяЗначение("О", "Сем.Элемент"), Истина);
						Данные.НовыйАтрибут(д, ИмяЗначение("Позиция", зн), Истина);
						Данные.НовыйАтрибут(д, ИмяЗначение("База", Свойства.д.База.Значение), Истина);
						н = н + 1;
					}
					Свойства.Удалить("Элементы");
				}
			}

			if (Свойства.д.Элемент.Значение == "")
			{
				Свойства.д.Элемент.Значение = Свойства.д.Номер.Значение;
			}

			// сформировать представление
			var ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-secondary' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
            var см = (Свойства.д.Показать.Значение == "Нет") ? "&#9655;" : "&#9661;";
			var Вид = Стр.Заменить(ш, ".текст", см);
			Вид = "<div class='btn-group' role='group'>" + Вид + Стр.Заменить(ш, ".текст", Свойства.д.Элемент.Значение) + "</div>";

			Свойства.д.Кнопка.Значение = Вид;

		}


		public string Страница_Свойства(pagedata Данные, Узел оУзел)
		{

			//Если НЕ оУзел.Свойство("Свойства") Тогда // новый объект
			var Свойства = оУзел.Дочерний; //Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
			var шСвойства = @"
			|*События
			|*Показать: Нет
			|*Кнопка
			|*Вид
			|	З: Кнопка
			|	: Если
			|		З: Показать
			|		П: Содержимое
			|";

			Данные.СоздатьСвойства(Свойства, шСвойства);
			оУзел.Вставить("Свойства", Свойства);
            //КонецЕсли;

            return null;
		}


		public void Страница_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{

			var оУзел = Свойства.Родитель;

			// обработать события
			if (Изменения.Получить(Свойства.д.События) == Истина)
			{
				var дУзел = Свойства.д.События.Дочерний as Узел;
				if (!(дУзел == Неопределено))
				{
					var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
					var тСобытие = мСобытие[0];
					if (тСобытие == "ПриНажатии")
					{
						if (Свойства.д.Показать.Значение == "Да")
						{
							Свойства.д.Показать.Значение = "Нет";
						}
						else
						{
							Свойства.д.Показать.Значение = "Да";
						}
					}
				}
				Данные.УдалитьУзел(дУзел);
				Изменения.Вставить(Свойства.д.События, Истина);
			}

			// сформировать представление
			var ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-primary' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
            var см = (Свойства.д.Показать.Значение == "Нет") ? "&#9655;" : "&#9661;";
            var Вид = Стр.Заменить(ш, ".текст", см);
			Вид = "<div class='btn-group' role='group'>" + Вид + Стр.Заменить(ш, ".текст", Свойства.д.Номер.Значение) + "</div>";

			Свойства.д.Кнопка.Значение = Вид;

		}


		public string Предложение_Свойства(pagedata Данные, Узел оУзел)
		{
			object Свойства = null;
            var шСвойства = "";

            if (!(оУзел.Свойство("Свойства", out Свойства)))
			{ // новый объект
				Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
				шСвойства = @"
				|Токены
				|Разбор: Нет";
				Данные.СоздатьСвойства(Свойства as Узел, шСвойства);
			}

			шСвойства = @"
			|*Открыть: Нет
			|*вТокен
			|*вПравило
			|*вСвязь
			|*События
			|*Вид";
			
			Данные.СоздатьСвойства(Свойства as Узел, шСвойства, "Только");
			оУзел.Вставить("Свойства", Свойства);

            return null;

		}


        public void Предложение_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
        {
            var оУзел = Свойства.Родитель;

            var вТокен = Свойства.д.вТокен.Значение as Узел;
            var вСвязь = "" + Свойства.д.вСвязь.Значение;

            // обработать события
            if (Изменения.Получить(Свойства.д.События) as bool? == Истина)
            {
                var дУзел = Свойства.д.События.Дочерний as Узел;
                if (!(дУзел is null))
                {
                    var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
                    var тСобытие = мСобытие[0];
                    if (тСобытие == "ПриНажатии")
                    {
                        var сУзел = Данные.ПолучитьУзел(мСобытие[1]);

                        var ЗначениеКнопка = УзелСвойство(дУзел, "Параметры") as string;
                        if (!(ЗначениеКнопка is null))
                        {

                            if (ЗначениеКнопка == "sent")
                            {
                                var см = Свойства.д.Открыть.Значение as string;
                                см = (см == "Да") ? "Нет": "Да";
                                Свойства.д.Открыть.Значение = см;
                                if (см == "Нет")
                                {
                                    Свойства.д.Разбор.Значение = "Нет";
                                    if (!(Свойства.д.Токены.Дочерний == Неопределено))
                                    {
                                        Данные.УдалитьУзел(Свойства.д.Токены.Дочерний, Истина, Истина);
                                    }
                                    Свойства.д.вСвязь.Значение = "";
                                    Свойства.д.вТокен.Значение = null;
                                    Свойства.Удалить("Грамматики");
                                }

                            }
                            else if (ЗначениеКнопка == "optoken")
                            {

                                var Параметры = Структура.Новый();
                                Параметры.Вставить("nodeid", сУзел.Код);
                                Параметры.Вставить("data", Данные.ИмяДанных);
                                Параметры.Вставить("type", "win");
                                Параметры.Вставить("mode", "struct");
                                Параметры.Вставить("cmd", "newtab");
                                Данные.Процесс.НоваяЗадача(Параметры, "Служебный");

                            }
                            else if (ЗначениеКнопка == "token")
                            {

                                if (!(вТокен == сУзел))
                                {
                                    if (!(вСвязь == ""))
                                    { // И НЕ вТокен.Значение = "" И НЕ сУзел.Значение = "" Тогда
                                      // добавить связь
                                        var мУзел1 = Новый.Массив();
                                        var фУзел1 = (Формы._с.Получить(ВРег(вТокен.Имя)) as Узел).Дочерний;
                                        while (!(фУзел1 == Неопределено))
                                        { // варианты форм
                                            if (вТокен.Значение as string == "")
                                            {
                                                мУзел1.Добавить(Новый.Структура("токгр, токнач", фУзел1.Значение, (фУзел1.Атрибут == Неопределено) ? фУзел1.Имя : фУзел1.Атрибут.Имя));
                                            }
                                            else if (фУзел1.Значение as string == вТокен.Значение as string)
                                            { // форма известна
                                                мУзел1.Добавить(Новый.Структура("токгр, токнач", фУзел1.Значение, (фУзел1.Атрибут == Неопределено) ? фУзел1.Имя : фУзел1.Атрибут.Имя));
                                                break;
                                            }
                                            фУзел1 = фУзел1.Соседний;
                                        }
                                        var мУзел2 = Новый.Массив();
                                        var фУзел2 = (Формы._с.Получить(ВРег(сУзел.Имя)) as Узел).Дочерний;
                                        while (!(фУзел2 == Неопределено))
                                        { // варианты форм
                                            if (сУзел.Значение as string == "")
                                            {
                                                if (!(фУзел2.Соседний == Неопределено))
                                                { // не одна форма
                                                    мУзел2.Добавить(Новый.Структура("токгр, токнач", фУзел2.Значение, (фУзел2.Атрибут == Неопределено) ? фУзел2.Имя : фУзел2.Атрибут.Имя));
                                                }
                                            }
                                            else if (фУзел2.Значение as string == сУзел.Значение as string)
                                            { // форма известна
                                                мУзел2.Добавить(Новый.Структура("токгр, токнач", фУзел2.Значение, (фУзел2.Атрибут == Неопределено) ? фУзел2.Имя : фУзел2.Атрибут.Имя));
                                                break;
                                            }
                                            фУзел2 = фУзел2.Соседний;
                                        }
                                        if (!(фУзел1 == Неопределено) && !(фУзел2 == Неопределено))
                                        { // форма токена известна
                                            var нп = Данные.НовыйДочерний(вТокен, ИмяЗначение(вСвязь, сУзел.Имя), Ложь, Истина);
                                            нп.Вставить("п", Структура.Новый()); // параметры
                                            нп.п.Вставить("ток1имя", вТокен.Имя);
                                            нп.п.Вставить("ток1ф", мУзел1);
                                            нп.п.Вставить("ток2имя", сУзел.Имя);
                                            нп.п.Вставить("ток2код", сУзел.Код);
                                            нп.п.Вставить("ток2ф", мУзел2);
                                            нп.п.Вставить("б", "");
                                            Свойства.д.вСвязь.Значение = "";
                                            вСвязь = Свойства.д.вСвязь.Значение;
                                            сУзел.п.Вставить("т2", сУзел.п.т1); // привязка
                                            сУзел.п.Вставить("свкод", нп.Код);
                                            сУзел.п.Вставить("свимя", нп.Имя);
                                            сУзел.п.Вставить("ток2имя", сУзел.Имя);
                                        }
                                    }
                                    else
                                    {
                                        Свойства.д.вТокен.Значение = сУзел;
                                        вТокен = Свойства.д.вТокен.Значение;
                                    }

                                }
                                else
                                {
                                    Свойства.д.вСвязь.Значение = "";
                                    вСвязь = Свойства.д.вСвязь.Значение;
                                    Свойства.д.вТокен.Значение = null;
                                    вТокен = Свойства.д.вТокен.Значение;
                                }

                            }
                            else if (ЗначениеКнопка == "link")
                            {

                                if (!(Свойства.д.вПравило.Значение == сУзел))
                                {
                                    Свойства.д.вПравило.Значение = сУзел;
                                }
                                else
                                {
                                    Свойства.д.вПравило.Значение = Неопределено;
                                }

                            }
                            else if (Лев(ЗначениеКнопка, 5) == "link_")
                            {

                                var св = Сред(ЗначениеКнопка, 6);
                                if (!(вСвязь == св))
                                {
                                    Свойства.д.вСвязь.Значение = св;
                                    вСвязь = Свойства.д.вСвязь.Значение;
                                }
                                else
                                {
                                    Свойства.д.вСвязь.Значение = "";
                                    вСвязь = Свойства.д.вСвязь.Значение;
                                }

                            }
                            else if (ЗначениеКнопка == "conf" || ЗначениеКнопка == "excl" || ЗначениеКнопка == "del" || ЗначениеКнопка == "delgr")
                            {
                                var б = "";
                                
                                if (ЗначениеКнопка == "conf")
                                {
                                    б = "+";
                                }
                                else if (ЗначениеКнопка == "excl")
                                {
                                    б = "-";
                                }
                                else if (ЗначениеКнопка == "del")
                                {
                                    б = "";
                                }
                                else if (ЗначениеКнопка == "delgr")
                                {
                                    б = "г";
                                }

                                var св = Новый.Структура("ток1имя, ток2имя, ток1, ток2, свимя, б", сУзел.п.ток1имя, сУзел.п.ток2имя, сУзел.п.ток1ф, сУзел.п.ток2ф, ВРег(сУзел.Имя), б);

                                var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", св, "Связи"), Свойства, "Морфология");
                                Данные.Процесс.НоваяЗадача(Запрос, "Служебный");

                                сУзел.п.б = б;

                                if (б == "г")
                                { // удалить связь
                                    Данные.УдалитьУзел(сУзел);
                                }

                            }

                        }

                    }
                    else
                    { // изменение полей
                        var сУзел = Данные.ПолучитьУзел(мСобытие[1]) as Узел;
                        Свойства.д.вСвязь.Значение = дУзел.с.Параметры;
                        вСвязь = Свойства.д.вСвязь.Значение;
                    }

                }
                Данные.УдалитьУзел(дУзел);
                Изменения.Вставить(Свойства.д.События, Истина);
                оУзел.Вставить("Обновить", Истина);
            }

            if (!(УзелСвойство(оУзел, "Обновить") as bool? == Ложь))
            {

                // найти формы
                if (Свойства.д.Разбор.Значение == "Нет" && Свойства.д.Открыть.Значение == "Да")
                {
                    if (Свойства.д.Свойство("Текст"))
                    {
                        var служ = Данные.Служебный(Формы);
                        var пр = Данные.ЗначениеСвойства(Свойства.д.Текст);
                        var сСимв = @".,!?:;()«»""'–…"; // - дефис потом
                        for (var н = 1; н <= Стр.Длина(сСимв); н++) {
                            var сс = Сред(сСимв, н, 1);
                            пр = Стр.Заменить(пр, сс, " " + сс + " ");
                        }
                        var м = Стр.Разделить(пр, " ");
                        var мсл = "";
                        foreach (var сл in м)
                        {
                            if (!(сл == ""))
                            {
                                // если есть взять готовую форму
                                var токФорма = "";
                                if (Свойства.д.Свойство("Грам"))
                                {
                                    var тУзел = Свойства.д.Грам.Дочерний;
                                    while (!(тУзел == Неопределено))
                                    {
                                        if (тУзел.Имя == сл)
                                        {
                                            токФорма = тУзел.Значение;
                                            break;
                                        }
                                        тУзел = тУзел.Соседний;
                                    }
                                    //if (токФорма == "PREP" || токФорма == "PRCL" || токФорма == "PNCT" || токФорма == "CONJ" || токФорма == "ADVB")
                                    //{
                                    //    токФорма = токФорма + " " + ВРег(сл);
                                    //}
                                }
                                // добавить токен
                                var т = Данные.НовыйДочерний(Свойства.д.Токены, ИмяЗначение(сл, токФорма), Ложь, Истина);
                                if (Стр.Найти(сСимв, сл) == 0)
                                {
                                    var всл = ВРег(сл);
                                    if (Формы._с.Получить(всл) == Неопределено)
                                    {
                                        var ф = Данные.НовыйДочерний(Формы, ИмяЗначение(всл), служ, Истина);
                                        Формы._с.Вставить(всл, ф);
                                        мсл = мсл + Символы.ПС + всл;
                                    }
                                }
                                var д = Стр.Найти(сл, "-");
                                if (!(д == 0))
                                { // есть дефис
                                    мсл = мсл + Символы.ПС + ВРег(Лев(сл, д - 1));
                                    мсл = мсл + Символы.ПС + ВРег(Сред(сл, д + 1));
                                }
                            }
                        }
                        if (!(мсл == ""))
                        {
                            var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", Сред(мсл, 2), "ФормыСлов"), Свойства, "Морфология");
                            Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
                            Свойства.д.Разбор.Значение = "Формы";
                        }
                        else
                        {
                            Свойства.д.Разбор.Значение = "Токены";
                        }
                    }
                    оУзел.Вставить("Обновить", Ложь);
                }

                // найти правила
                if (Свойства.д.Разбор.Значение == "Токены")
                {

                    var прГрамматики = УзелСвойство(Свойства, "Грамматики") as Соответствие;
                    var Грамматики = "";

                    Узел ток1 = null;

                    if (прГрамматики == Неопределено)
                    { // проверим токены с дефисом
                        ток1 = Свойства.д.Токены.Дочерний;
                        while (!(ток1 == Неопределено))
                        {
                            var д = Стр.Найти(ток1.Имя, "-");
                            if (!(д == 0))
                            { // есть дефис
                                var ток1Формы = Формы._с.Получить(ВРег(ток1.Имя)) as Узел;
                                if (ток1Формы.Дочерний == Неопределено)
                                { // нет формы с дефисом
                                    Данные.НовыйСоседний(ток1, ИмяЗначение(Сред(ток1.Имя, д + 1)));
                                    ток1["Имя"] = Лев(ток1.Имя, д - 1);
                                    Данные.НовыйСоседний(ток1, ИмяЗначение("-"));
                                    ток1 = ток1.Соседний.Соседний;
                                }
                            }
                            ток1 = ток1.Соседний;
                        }
                    }

                    ток1 = Свойства.д.Токены.Дочерний;
                    while (!(ток1 == Неопределено))
                    {
                        ток1.Вставить("п", Структура.Новый());
                        var ток1Формы = Формы._с.Получить(ВРег(ток1.Имя)) as Узел;
                        if (!(ток1Формы == Неопределено))
                        {
                            var фУзел1 = ток1Формы.Дочерний;
                            while (!(фУзел1 == Неопределено))
                            { // варианты форм
                                Узел Ток2 = null;
                                if (!(ток1.Значение as string == ""))
                                {
                                    if (!(фУзел1.Значение as string == ток1.Значение as string))
                                    { // если форма известна
                                        фУзел1 = фУзел1.Соседний;
                                        continue;
                                    }
                                }
                                if (Лев(фУзел1.Значение as string, 4) == "PREP")
                                { // предлог всегда перед
                                    Ток2 = ток1.Соседний;
                                }
                                else
                                {
                                    Ток2 = Свойства.д.Токены.Дочерний;
                                }
                                while (!(Ток2 == Неопределено))
                                {
                                    if (!(ток1 == Ток2))
                                    {
                                        var ток2Формы = Формы._с.Получить(ВРег(Ток2.Имя)) as Узел; // формы токена
                                        if (!(ток2Формы == Неопределено))
                                        {
                                            var фУзел2 = ток2Формы.Дочерний;
                                            while (!(фУзел2 == Неопределено))
                                            {
                                                if (!("" + Ток2.Значение == ""))
                                                { // если форма известна
                                                    if (!(фУзел2.Значение as string == Ток2.Значение as string))
                                                    {
                                                        фУзел2 = фУзел2.Соседний;
                                                        continue;
                                                    }
                                                }

                                                var ток1нач = (фУзел1.Атрибут == Неопределено) ? фУзел1.Имя : фУзел1.Атрибут.Имя;
                                                var ток2нач = (фУзел2.Атрибут == Неопределено) ? фУзел2.Имя : фУзел2.Атрибут.Имя;

                                                var гр = фУзел1.Значение + Символы.Таб + фУзел2.Значение + Символы.Таб + ток1нач + Символы.Таб + ток2нач;

                                                if (прГрамматики == Неопределено)
                                                {
                                                    Грамматики = Грамматики + Символы.ПС + гр;

                                                }
                                                else
                                                {

                                                    var н = 0;
                                                    while (!(прГрамматики.Получить(гр + "_" + н) == Неопределено))
                                                    {

                                                        var мсв = Стр.Разделить(прГрамматики.Получить(гр + "_" + н) as string, Символы.Таб);

                                                        // найдено подходящее правило
                                                        var нп = Данные.НовыйДочерний(ток1, ИмяЗначение(мсв[0], Ток2.Имя), Ложь, Истина);
                                                        нп.Вставить("п", Структура.Новый()); // параметры
                                                        нп.п.Вставить("ток1имя", ток1.Имя);
                                                        нп.п.Вставить("ток1гр", фУзел1.Значение);
                                                        нп.п.Вставить("ток1нач", ток1нач);
                                                        нп.п.Вставить("ток2имя", Ток2.Имя);
                                                        нп.п.Вставить("ток2код", Ток2.Код);
                                                        нп.п.Вставить("ток2гр", фУзел2.Значение);
                                                        нп.п.Вставить("ток2нач", ток2нач);
                                                        нп.п.Вставить("б", мсв[1]);

                                                        н = н + 1;

                                                    }

                                                }

                                                фУзел2 = фУзел2.Соседний;
                                            }
                                        }
                                    }
                                    Ток2 = Ток2.Соседний;
                                }
                                фУзел1 = фУзел1.Соседний;
                            }
                        }
                        ток1 = ток1.Соседний;
                    }

                    if (!(Грамматики == ""))
                    {
                        var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", Сред(Грамматики, 2), "Грамматики"), Свойства, "Морфология");
                        Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
                    }
                    else
                    {
                        Свойства.д.Разбор.Значение = "Привязать";
                    }

                    оУзел.Вставить("Обновить", Ложь);

                }

                //Привязать токены
                if (Свойства.д.Разбор.Значение == "Привязать")
                {

                    var чРечи = Массив.Новый(); // порядок разбора
                    чРечи.Добавить(Неопределено);
                    чРечи.Добавить("ADJF");
                    чРечи.Добавить("NOUN");
                    чРечи.Добавить("PREP");
                    чРечи.Добавить("VERB");
                    чРечи.Добавить("");
                    foreach (string элРечи in чРечи)
                    {
                        var ток1 = Свойства.д.Токены.Дочерний;
                        var т1 = 1;
                        while (!(ток1 == Неопределено))
                        {
                            if (элРечи is null)
                            { // инициализация
                                ток1.Вставить("п", Структура.Новый());
                                ток1.п.Вставить("т1", т1);
                            }
                            else if (ток1.п.Свойство("свкод"))
                            {
                                // уже привязан
                            }
                            else
                            {
                                var т2 = 1;
                                var Ток2 = Свойства.д.Токены.Дочерний;
                                while (!(Ток2 == Неопределено))
                                {
                                    if (!(ток1 == Ток2))
                                    {
                                        var св = Ток2.Дочерний; // связи
                                        while (!(св == Неопределено))
                                        {
                                            if (Лев(св.п.ток2гр, Стр.Длина(элРечи)) == элРечи)
                                            {
                                                if (св.п.ток2код == ток1.Код)
                                                {
                                                    if (ток1.п.Свойство("т2"))
                                                    { // уже привязан
                                                        var р1 = Число(ток1.п.т1) - Число(ток1.п.т2);
                                                        р1 = (р1 < 0) ? -(р1) : р1;
                                                        var р2 = Число(ток1.п.т1) - Число(Ток2.п.т1);
                                                        р2 = (р2 < 0) ? -(р2) : р2;
                                                        if (р1 < р2)
                                                        {
                                                            //св.Имя = "_" + св.Имя;
                                                            св = св.Соседний;
                                                            continue;
                                                        }
                                                    }
                                                    if (св.п.б == "+")
                                                    { // корректная связь
                                                        var корр = Истина;
                                                        if (Лев(ток1.Значение, 4) == "PREP")
                                                        { // если предлог проверить связь
                                                            корр = Ложь;
                                                            var пв = ток1.Дочерний; // связи предлога
                                                            while (!(пв == Неопределено))
                                                            {
                                                                if (св.Имя == пв.Имя)
                                                                { // связь та же
                                                                    var пс = Данные.ПолучитьУзел(пв.п.ток2код); // токен связанный с предлогом
                                                                    if (пс.п.Свойство("свкод"))
                                                                    {
                                                                        if (пс.п.свкод == пв.Код)
                                                                        { // привязан к предлогу
                                                                            корр = Истина;
                                                                        }
                                                                    }
                                                                }
                                                                пв = пв.Соседний;
                                                            }
                                                        }
                                                        if (корр)
                                                        {
                                                            ток1.п.Вставить("т2", Ток2.п.т1);
                                                            ток1.п.Вставить("свкод", св.Код);
                                                            ток1.п.Вставить("свимя", св.Имя);
                                                            ток1.п.Вставить("ток2имя", Ток2.Имя);
                                                        }
                                                    }
                                                }
                                            }
                                            св = св.Соседний;
                                        }
                                    }
                                    Ток2 = Ток2.Соседний;
                                    т2 = т2 + 1;
                                }
                            }
                            ток1 = ток1.Соседний;
                            т1 = т1 + 1;
                        }
                    }

                    Свойства.д.Разбор.Значение = "Выполнен";
                    оУзел.Вставить("Обновить", Ложь);
                }

                // сформировать представление
                var Вид = "";
                if (Свойства.д.Свойство("Текст"))
                { // Предложение
                    var пр = Данные.ЗначениеСвойства(Свойства.д.Текст);
                    var ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-light' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
                    var см = (Свойства.д.Открыть.Значение == "Нет") ? "&#9655;" : "&#9661;";
                    Вид = Стр.Заменить(ш, ".текст", см);
                    if (Свойства.д.Открыть.Значение == "Нет")
                    {
                        if (Свойства.д.Свойство("фВид"))
                        { // показать поле для ввода предложения
                            Вид = Данные.ЗначениеСвойства(Свойства.д.фВид);
                        }
                        else
                        {
                            Вид = "<div class='btn-group' role='group'>" + Вид + Стр.Заменить(ш, ".текст", пр) + "</div>";
                        }
                    }
                    else
                    {
                        var тУзел = Свойства.д.Токены.Дочерний as Узел;
                        while (!(тУзел == Неопределено))
                        {
                            Вид = Вид + "<button id='_" + тУзел.Код + "' type='button' class='text-left btn1 btn-" + ((вТокен == тУзел) ? "info" : "light") + "' onclick='addcmd(this,event); return false' role='token'>" + тУзел.Имя + "</button>";
                            тУзел = тУзел.Соседний;
                        }
                    }
                }

                if (!(Свойства.д.Разбор.Значение == "Нет") && Свойства.д.Открыть.Значение == "Да")
                { // Токены
                    var тУзел = Свойства.д.Токены.Дочерний;
                    Вид = Вид + "<p>" + ТокенВид(Данные, Свойства, тУзел) + "</p>";
                }

                if (!(вТокен is null))
                { // выбрать связь
                  // показать виды связей
                    var нСв = "";
                    var Связи = Массив.Новый();
                    if (!(вСвязь == ""))
                    {
                        Связи.Добавить(вСвязь);
                    }
                    else
                    {
                        if (!(вТокен is null))
                        {
                            // м = Свойства.Связи.Получить(вТокен.Значение);
                            // Если НЕ м = Неопределено Тогда
                            // 	Для каждого св Из м Цикл
                            // 		Связи.Добавить(св);
                            // 	КонецЦикла;
                            // КонецЕсли;
                        }
                        Связи.Добавить("+");
                    }
                    if (вСвязь == "+")
                    {
                        нСв = нСв + "<input id='" + вТокен.Код + "' type='text' class='form-control-sm' onchange='addcmd(this,event); return false' role='link'></input>";
                        нСв = нСв + "<script>$('#" + вТокен.Код + "')[0].focus();</script>";
                    }
                    else
                    {
                        foreach (string св in Связи)
                        {
                            if (вСвязь == "" || св == вСвязь)
                            {
                                нСв = нСв + "<button id='_" + вТокен.Код + "' type='button' class='text-left btn1 btn-" + ((вСвязь == "") ? "secondary" : "warning") + "' onclick='addcmd(this,event); return false' role='link_" + св + "'>" + св + "</button>";
                            }
                        }
                    }
                    Вид = Стр.Заменить(Вид, "<!--t_" + вТокен.Код + "-->", "<ul>" + нСв + "</ul>");
                }

                Свойства.д.Вид.Значение = "<p>" + Вид + "</p>";

            }

        }

        object ТокенВид(pagedata Данные, Узел Свойства, Узел дУзел, Массив мУзел = null, Узел рУзел = null)
		{
			var Связи = "";
			var вТокен = Свойства.д.вТокен.Значение as Узел;
			while (!(дУзел == Неопределено))
			{
				var Связь = "";
				if (дУзел.Родитель == Свойства.д.Токены)
				{
					мУзел = Массив.Новый();
					мУзел.Добавить(дУзел);
					if (вТокен is null)
					{
						if (дУзел.Свойство("п"))
						{
							if (дУзел.п.Свойство("свкод"))
							{ // привязан к другому
								дУзел = дУзел.Соседний;
								continue;
							}
						}
					}
					if (вТокен is null || вТокен == дУзел)
					{
						Связь = "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + ((вТокен == дУзел) ? "info" : "light") + "' onclick='addcmd(this,event); return false' role='" + ((вТокен == дУзел) ? "optoken" : "token") + "'>" + дУзел.Имя + "</button>";
						if (!(дУзел.Дочерний == Неопределено))
						{
							Связь = Связь + ТокенВид(Данные, Свойства, дУзел.Дочерний, мУзел);
						}
					}
				}
				else
				{
					if (!(рУзел == Неопределено))
					{
						if (!(рУзел.Имя == дУзел.Имя))
						{ // у предлога должна совпадать связь
							дУзел = дУзел.Соседний;
							continue;
						}
					}
					if (вТокен == дУзел.Родитель || !(дУзел.п.б == "-"))
					{ // связь не некорректная
						var тУзел = Данные.ПолучитьУзел(дУзел.п.ток2код) as Узел;
						if (!(вТокен == дУзел.Родитель) && тУзел.п.Свойство("свкод"))
						{
							if (!(тУзел.п.свкод == дУзел.Код))
							{ // не тот токен привязан
								тУзел = null;
							}
						}
						if (!(тУзел == Неопределено))
						{
							if (мУзел.Найти(тУзел) == -1)
							{
								мУзел.Добавить(тУзел);
								if (вТокен == дУзел.Родитель || дУзел.п.б == "+")
								{
									Связь = "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + ((дУзел.п.б == "-") ? "danger" : ((дУзел.п.б == "+" && !(вТокен is null)) ? "success" : "secondary")) + "' onclick='addcmd(this,event); return false' role='optoken'>" + дУзел.Имя + "</button>";
									Связь = Связь + "<button id='_" + тУзел.Код + "' type='button' class='text-left btn1 btn-light' onclick='addcmd(this,event); return false' role='token'>" + дУзел.Значение + "</button>";
									if (!(вТокен is null))
									{
										if (дУзел.п.б == "")
										{
											Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='conf'>&#9745;</button>";
											Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='excl'>&#9746;</button>";
											Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='delgr'>&#10008;</button>";
										}
										else
										{
											Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='del'>&#9744;</button>";
										}
									}
								}
								if (!(тУзел.Дочерний == Неопределено) && дУзел.п.б == "+")
								{
									if (Лев(дУзел.п.ток2гр, 4) == "PREP")
									{
										var зСвязь = ТокенВид(Данные, Свойства, тУзел.Дочерний, мУзел, дУзел);
										if (!(вТокен == дУзел.Родитель) && зСвязь == "")
										{
											Связь = "";
										}
										Связь = Связь + зСвязь;
									}
									else
									{
										Связь = Связь + ТокенВид(Данные, Свойства, тУзел.Дочерний, мУзел);
									}
								}
								мУзел.Удалить(мУзел.Найти(тУзел));
							}
						}
					}
				}
				if (!(Связь == ""))
				{
					Связь = Связь + "<!--t_" + дУзел.Код + "-->";
					Связь = "<ul>" + Связь + "</ul>";
					Связи = Связи + Связь;
				}
				дУзел = дУзел.Соседний;
			}
			return Связи;
		} // ТокенВид()

	
	}

}
